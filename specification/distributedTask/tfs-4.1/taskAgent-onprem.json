{
  "swagger": "2.0",
  "info": {
    "title": "TaskAgent",
    "description": "",
    "termsOfService": "https://go.microsoft.com/fwlink/?LinkId=329770",
    "contact": {
      "name": "nugetvss",
      "email": "nugetvss@microsoft.com"
    },
    "license": {
      "name": "MICROSOFT SOFTWARE LICENSE TERMS",
      "url": "https://go.microsoft.com/fwlink/?LinkId=329770"
    },
    "version": "4.1"
  },
  "host": "https://fabrikam-fiber-inc:8080/DefaultCollection",
  "x-ms-parameterized-host" : {
    "hostTemplate": "{instance}",
    "parameters": [
      {
        "name": "instance",
        "description": "TFS server name ({server:port})",
        "required": true,
        "type": "string",
        "in": "path"
      }
    ]
  },
  "x-ms-vss-area": "TaskAgent",
  "x-ms-vss-resource-area-id": "a85b8835-c1a1-4aac-ae97-1c3d0ba72dbd",
  "basePath": "/",
  "tags": [
    {
      "name": "Deploymentgroups"
    },
    {
      "name": "Targets"
    },
    {
      "name": "Taskgroups"
    },
    {
      "name": "Variablegroups"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/{collection}/{project}/_apis/distributedtask/deploymentgroups": {
      "post": {
        "tags": [
          "Deploymentgroups"
        ],
        "x-ms-docs-override-version": "4.1-preview.1",
        "x-ms-vss-resource": "deploymentgroups",
        "x-ms-vss-method": "AddDeploymentGroup",
        "x-ms-preview": true,
        "description": "Create a deployment group.",
        "operationId": "Add",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Team Foundation Server collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Deployment group to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeploymentGroupCreateParameter"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DeploymentGroup"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.machinegroup_manage"
            ]
          }
        ],
        "x-ms-examples": {
          "Create a deployment group": {
            "$ref": "./httpExamples/deploymentgroups/POST__distributedtask_DeploymentGroups-onprem.json"
          }
        }
      },
      "get": {
        "tags": [
          "Deploymentgroups"
        ],
        "x-ms-docs-override-version": "4.1-preview.1",
        "x-ms-vss-resource": "deploymentgroups",
        "x-ms-vss-method": "GetDeploymentGroups",
        "x-ms-preview": true,
        "description": "Get a list of deployment groups by name or IDs.",
        "operationId": "List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Team Foundation Server collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "description": "Name of the deployment group.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "actionFilter",
            "description": "Get only deployment groups on which this action can be performed.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "manage",
              "use"
            ],
            "x-ms-enum": {
              "name": "DeploymentGroupActionFilter",
              "values": [
                {
                  "value": "none",
                  "description": "All deployment groups."
                },
                {
                  "value": "manage",
                  "description": "Only deployment groups for which caller has **manage** permission."
                },
                {
                  "value": "use",
                  "description": "Only deployment groups for which caller has **use** permission."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "Include these additional details in the returned objects.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "machines",
              "tags"
            ],
            "x-ms-enum": {
              "name": "DeploymentGroupExpands",
              "values": [
                {
                  "value": "none",
                  "description": "No additional properties."
                },
                {
                  "value": "machines",
                  "description": "Deprecated: Include all the deployment targets."
                },
                {
                  "value": "tags",
                  "description": "Include unique list of tags across all deployment targets."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "Get deployment groups with names greater than this continuationToken lexicographically.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "Maximum number of deployment groups to return. Default is **1000**.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Comma separated list of IDs of the deployment groups.",
            "required": false,
            "type": "string",
            "format": "array (int32)"
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeploymentGroup"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.machinegroup_manage"
            ]
          }
        ],
        "x-ms-examples": {
          "Get a deployment group by name": {
            "$ref": "./httpExamples/deploymentgroups/GET__distributedtask_DeploymentGroups__Name_-onprem.json"
          },
          "Get deployment groups by IDs": {
            "$ref": "./httpExamples/deploymentgroups/GET__distributedtask_DeploymentGroups__Ids_-onprem.json"
          },
          "List all deployment groups": {
            "$ref": "./httpExamples/deploymentgroups/GET__distributedtask_DeploymentGroups-onprem.json"
          },
          "Get deployment groups in pages": {
            "$ref": "./httpExamples/deploymentgroups/GET__distributedtask_DeploymentGroups__Page_-onprem.json"
          }
        }
      }
    },
    "/{collection}/{project}/_apis/distributedtask/deploymentgroups/{deploymentGroupId}": {
      "delete": {
        "tags": [
          "Deploymentgroups"
        ],
        "x-ms-docs-override-version": "4.1-preview.1",
        "x-ms-vss-resource": "deploymentgroups",
        "x-ms-vss-method": "DeleteDeploymentGroup",
        "x-ms-preview": true,
        "description": "Delete a deployment group.",
        "operationId": "Delete",
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Team Foundation Server collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deploymentGroupId",
            "description": "ID of the deployment group to be deleted.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.machinegroup_manage"
            ]
          }
        ],
        "x-ms-examples": {
          "Delete a deployment group": {
            "$ref": "./httpExamples/deploymentgroups/DELETE__distributedtask_DeploymentGroup__Id_-onprem.json"
          }
        }
      },
      "get": {
        "tags": [
          "Deploymentgroups"
        ],
        "x-ms-docs-override-version": "4.1-preview.1",
        "x-ms-vss-resource": "deploymentgroups",
        "x-ms-vss-method": "GetDeploymentGroup",
        "x-ms-preview": true,
        "description": "Get a deployment group by its ID.",
        "operationId": "Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Team Foundation Server collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deploymentGroupId",
            "description": "ID of the deployment group.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "actionFilter",
            "description": "Get the deployment group only if this action can be performed on it.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "manage",
              "use"
            ],
            "x-ms-enum": {
              "name": "DeploymentGroupActionFilter",
              "values": [
                {
                  "value": "none",
                  "description": "All deployment groups."
                },
                {
                  "value": "manage",
                  "description": "Only deployment groups for which caller has **manage** permission."
                },
                {
                  "value": "use",
                  "description": "Only deployment groups for which caller has **use** permission."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "Include these additional details in the returned object.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "machines",
              "tags"
            ],
            "x-ms-enum": {
              "name": "DeploymentGroupExpands",
              "values": [
                {
                  "value": "none",
                  "description": "No additional properties."
                },
                {
                  "value": "machines",
                  "description": "Deprecated: Include all the deployment targets."
                },
                {
                  "value": "tags",
                  "description": "Include unique list of tags across all deployment targets."
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DeploymentGroup"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.machinegroup_manage"
            ]
          }
        ],
        "x-ms-examples": {
          "Get a deployment group by its ID": {
            "$ref": "./httpExamples/deploymentgroups/GET__distributedtask_DeploymentGroups__Id_-onprem.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Deploymentgroups"
        ],
        "x-ms-docs-override-version": "4.1-preview.1",
        "x-ms-vss-resource": "deploymentgroups",
        "x-ms-vss-method": "UpdateDeploymentGroup",
        "x-ms-preview": true,
        "description": "Update a deployment group.",
        "operationId": "Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Team Foundation Server collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Deployment group to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeploymentGroupUpdateParameter"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deploymentGroupId",
            "description": "ID of the deployment group.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DeploymentGroup"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.machinegroup_manage"
            ]
          }
        ],
        "x-ms-examples": {
          "Update a deployment group": {
            "$ref": "./httpExamples/deploymentgroups/PATCH__distributedtask_DeploymentGroups__Id_-onprem.json"
          }
        }
      }
    },
    "/{collection}/{project}/_apis/distributedtask/deploymentgroups/{deploymentGroupId}/targets": {
      "get": {
        "tags": [
          "Targets"
        ],
        "x-ms-docs-override-version": "4.1-preview.1",
        "x-ms-vss-resource": "targets",
        "x-ms-vss-method": "GetDeploymentTargets",
        "x-ms-preview": true,
        "description": "Get a list of deployment targets in a deployment group.",
        "operationId": "List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Team Foundation Server collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deploymentGroupId",
            "description": "ID of the deployment group.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "tags",
            "description": "Get only the deployment targets that contain all these comma separted list of tags.",
            "required": false,
            "type": "string",
            "format": "array (string)"
          },
          {
            "in": "query",
            "name": "name",
            "description": "Name pattern of the deployment targets to return.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "partialNameMatch",
            "description": "When set to true, treats **name** as pattern. Else treats it as absolute match. Default is **false**.",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "Include these additional details in the returned objects.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "capabilities",
              "assignedRequest",
              "lastCompletedRequest"
            ],
            "x-ms-enum": {
              "name": "DeploymentTargetExpands",
              "values": [
                {
                  "value": "none",
                  "description": "No additional properties."
                },
                {
                  "value": "capabilities",
                  "description": "Include capabilities of the deployment agent."
                },
                {
                  "value": "assignedRequest",
                  "description": "Include the job request assigned to the deployment agent."
                },
                {
                  "value": "lastCompletedRequest",
                  "description": "Include the last completed job request of the deployment agent."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "agentStatus",
            "description": "Get only deployment targets that have this status.",
            "required": false,
            "type": "string",
            "enum": [
              "offline",
              "online",
              "all"
            ],
            "x-ms-enum": {
              "name": "TaskAgentStatusFilter",
              "values": [
                {
                  "value": "offline",
                  "description": "Only deployment targets that are offline."
                },
                {
                  "value": "online",
                  "description": "Only deployment targets that are online."
                },
                {
                  "value": "all",
                  "description": "All deployment targets."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "agentJobResult",
            "description": "Get only deployment targets that have this last job result.",
            "required": false,
            "type": "string",
            "enum": [
              "failed",
              "passed",
              "neverDeployed",
              "all"
            ],
            "x-ms-enum": {
              "name": "TaskAgentJobResultFilter",
              "values": [
                {
                  "value": "failed",
                  "description": "Only those deployment targets on which last job failed (**Abandoned**, **Canceled**, **Failed**, **Skipped**)."
                },
                {
                  "value": "passed",
                  "description": "Only those deployment targets on which last job Passed (**Succeeded**, **Succeeded with issues**)."
                },
                {
                  "value": "neverDeployed",
                  "description": "Only those deployment targets that never executed a job."
                },
                {
                  "value": "all",
                  "description": "All deployment targets."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "Get deployment targets with names greater than this continuationToken lexicographically.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "Maximum number of deployment targets to return. Default is **1000**.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeploymentMachine"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.machinegroup_manage"
            ]
          }
        ],
        "x-ms-examples": {
          "List all deployment targets in a deployment group": {
            "$ref": "./httpExamples/targets/GET__distributedtask_DeploymentTargets-onprem.json"
          },
          "Get deployment targets having given tags": {
            "$ref": "./httpExamples/targets/GET__distributedtask_DeploymentTargets__Tags_-onprem.json"
          },
          "Get deployment targets by partial name match": {
            "$ref": "./httpExamples/targets/GET__distributedtask_DeploymentTargets__Name_-onprem.json"
          },
          "Get deployment targets including their last job requests": {
            "$ref": "./httpExamples/targets/GET__distributedtask_DeploymentTargets__LastRequest_-onprem.json"
          },
          "Get deployment targets filtered by agent status": {
            "$ref": "./httpExamples/targets/GET__distributedtask_DeploymentTargets__AgentStatus_-onprem.json"
          },
          "Get deployment targets in pages": {
            "$ref": "./httpExamples/targets/GET__distributedtask_DeploymentTargets__Page_-onprem.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Targets"
        ],
        "x-ms-docs-override-version": "4.1-preview.1",
        "x-ms-vss-resource": "targets",
        "x-ms-vss-method": "UpdateDeploymentTargets",
        "x-ms-preview": true,
        "description": "Update tags of a list of deployment targets in a deployment group.",
        "operationId": "Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Team Foundation Server collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Deployment targets with tags to udpdate.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeploymentTargetUpdateParameter"
              }
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deploymentGroupId",
            "description": "ID of the deployment group in which deployment targets are updated.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeploymentMachine"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.machinegroup_manage"
            ]
          }
        ],
        "x-ms-examples": {
          "Update tags of a deployment target": {
            "$ref": "./httpExamples/targets/PATCH__distributedtask_DeploymentTargets-onprem.json"
          }
        }
      }
    },
    "/{collection}/{project}/_apis/distributedtask/deploymentgroups/{deploymentGroupId}/targets/{targetId}": {
      "delete": {
        "tags": [
          "Targets"
        ],
        "x-ms-docs-override-version": "4.1-preview.1",
        "x-ms-vss-resource": "targets",
        "x-ms-vss-method": "DeleteDeploymentTarget",
        "x-ms-preview": true,
        "description": "Delete a deployment target in a deployment group. This deletes the agent from associated deployment pool too.",
        "operationId": "Delete",
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Team Foundation Server collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deploymentGroupId",
            "description": "ID of the deployment group in which deployment target is deleted.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "targetId",
            "description": "ID of the deployment target to delete.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.machinegroup_manage"
            ]
          }
        ],
        "x-ms-examples": {
          "Delete a deployment target": {
            "$ref": "./httpExamples/targets/DELETE_distributedtask_DeploymentTargets__Id_-onprem.json"
          }
        }
      },
      "get": {
        "tags": [
          "Targets"
        ],
        "x-ms-docs-override-version": "4.1-preview.1",
        "x-ms-vss-resource": "targets",
        "x-ms-vss-method": "GetDeploymentTarget",
        "x-ms-preview": true,
        "description": "Get a deployment target by its ID in a deployment group",
        "operationId": "Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Team Foundation Server collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deploymentGroupId",
            "description": "ID of the deployment group to which deployment target belongs.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "targetId",
            "description": "ID of the deployment target to return.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "Include these additional details in the returned objects.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "capabilities",
              "assignedRequest",
              "lastCompletedRequest"
            ],
            "x-ms-enum": {
              "name": "DeploymentTargetExpands",
              "values": [
                {
                  "value": "none",
                  "description": "No additional properties."
                },
                {
                  "value": "capabilities",
                  "description": "Include capabilities of the deployment agent."
                },
                {
                  "value": "assignedRequest",
                  "description": "Include the job request assigned to the deployment agent."
                },
                {
                  "value": "lastCompletedRequest",
                  "description": "Include the last completed job request of the deployment agent."
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DeploymentMachine"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.machinegroup_manage"
            ]
          }
        ],
        "x-ms-examples": {
          "Get a deployment target by its ID": {
            "$ref": "./httpExamples/targets/GET__distributedtask_DeploymentTargets__Id_-onprem.json"
          }
        }
      }
    },
    "/{collection}/{project}/_apis/distributedtask/taskgroups": {
      "post": {
        "tags": [
          "Taskgroups"
        ],
        "x-ms-docs-override-version": "4.1-preview.1",
        "x-ms-vss-resource": "taskgroups",
        "x-ms-vss-method": "AddTaskGroup",
        "x-ms-preview": true,
        "description": "Create a task group.",
        "operationId": "Add",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Team Foundation Server collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Task group object to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskGroupCreateParameter"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TaskGroup"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.taskgroups_write"
            ]
          }
        ],
        "x-ms-examples": {
          "Create a task group": {
            "$ref": "./httpExamples/taskgroups/POST__CreateTaskGroup-onprem.json"
          }
        }
      }
    },
    "/{collection}/{project}/_apis/distributedtask/taskgroups/{taskGroupId}": {
      "delete": {
        "tags": [
          "Taskgroups"
        ],
        "x-ms-docs-override-version": "4.1-preview.1",
        "x-ms-vss-resource": "taskgroups",
        "x-ms-vss-method": "DeleteTaskGroup",
        "x-ms-preview": true,
        "description": "Delete a task group.",
        "operationId": "Delete",
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Team Foundation Server collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "taskGroupId",
            "description": "Id of the task group to be deleted.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "comment",
            "description": "Comments to delete.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.taskgroups_manage"
            ]
          }
        ],
        "x-ms-examples": {
          "Delete a task group": {
            "$ref": "./httpExamples/taskgroups/DELETE__DeleteATaskGroup-onprem.json"
          }
        }
      },
      "get": {
        "tags": [
          "Taskgroups"
        ],
        "x-ms-docs-override-version": "4.1-preview.1",
        "x-ms-vss-resource": "taskgroups",
        "x-ms-vss-method": "GetTaskGroups",
        "x-ms-preview": true,
        "description": "List task groups.",
        "operationId": "List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Team Foundation Server collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "taskGroupId",
            "description": "Id of the task group.",
            "required": true,
            "x-ms-required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "expanded",
            "description": "'true' to recursively expand task groups. Default is 'false'.",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "taskIdFilter",
            "description": "Guid of the taskId to filter.",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "deleted",
            "description": "'true'to include deleted task groups. Default is 'false'.",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "Number of task groups to get.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "Gets the task groups after the continuation token provided.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "queryOrder",
            "description": "Gets the results in the defined order. Default is 'CreatedOnDescending'.",
            "required": false,
            "type": "string",
            "enum": [
              "createdOnAscending",
              "createdOnDescending"
            ],
            "x-ms-enum": {
              "name": "TaskGroupQueryOrder",
              "values": [
                {
                  "value": "createdOnAscending",
                  "description": "Order by createdon ascending."
                },
                {
                  "value": "createdOnDescending",
                  "description": "Order by createdon descending."
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskGroup"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.taskgroups_read"
            ]
          }
        ],
        "x-ms-examples": {
          "List all task groups": {
            "$ref": "./httpExamples/taskgroups/LIST__ListAllTaskGroups-onprem.json"
          },
          "List all versions of a task group": {
            "$ref": "./httpExamples/taskgroups/LIST__ListAllVersionsOfTaskGroup-onprem.json"
          }
        }
      },
      "put": {
        "tags": [
          "Taskgroups"
        ],
        "x-ms-docs-override-version": "4.1-preview.1",
        "x-ms-vss-resource": "taskgroups",
        "x-ms-vss-method": "UpdateTaskGroup",
        "x-ms-preview": true,
        "description": "Update a task group.",
        "operationId": "Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Team Foundation Server collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Task group to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskGroupUpdateParameter"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "taskGroupId",
            "description": "Id of the task group to update.",
            "required": true,
            "x-ms-required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TaskGroup"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.taskgroups_manage"
            ]
          }
        ],
        "x-ms-examples": {
          "Update a task group": {
            "$ref": "./httpExamples/taskgroups/PUT__UpdateTaskGroup-onprem.json"
          }
        }
      }
    },
    "/{collection}/{project}/_apis/distributedtask/variablegroups": {
      "post": {
        "tags": [
          "Variablegroups"
        ],
        "x-ms-docs-override-version": "4.1-preview.1",
        "x-ms-vss-resource": "variablegroups",
        "x-ms-vss-method": "AddVariableGroup",
        "x-ms-preview": true,
        "description": "Add a variable group.",
        "operationId": "Add",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Team Foundation Server collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Variable group to add.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VariableGroupParameters"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VariableGroup"
            }
          }
        },
        "x-ms-examples": {
          "Add a variable group": {
            "$ref": "./httpExamples/variablegroups/POST_CreateVariableGroup-onprem.json"
          }
        }
      },
      "get": {
        "tags": [
          "Variablegroups"
        ],
        "x-ms-docs-override-version": "4.1-preview.1",
        "x-ms-vss-resource": "variablegroups",
        "x-ms-vss-method": "GetVariableGroupsById",
        "x-ms-preview": true,
        "description": "Get variable groups by ids.",
        "operationId": "Get Variable Groups By Id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Team Foundation Server collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "groupIds",
            "description": "Comma separated list of Ids of variable groups.",
            "required": true,
            "type": "string",
            "format": "array (int32)"
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableGroup"
              }
            }
          }
        },
        "x-ms-examples": {
          "Get variable groups by ids": {
            "$ref": "./httpExamples/variablegroups/GET_VariableGroupsByIds-onprem.json"
          }
        }
      }
    },
    "/{collection}/{project}/_apis/distributedtask/variablegroups/{groupId}": {
      "delete": {
        "tags": [
          "Variablegroups"
        ],
        "x-ms-docs-override-version": "4.1-preview.1",
        "x-ms-vss-resource": "variablegroups",
        "x-ms-vss-method": "DeleteVariableGroup",
        "x-ms-preview": true,
        "description": "Delete a variable group",
        "operationId": "Delete",
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Team Foundation Server collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "Id of the variable group.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-ms-examples": {
          "Delete a variable group": {
            "$ref": "./httpExamples/variablegroups/DELETE_VariableGroup-onprem.json"
          }
        }
      },
      "get": {
        "tags": [
          "Variablegroups"
        ],
        "x-ms-docs-override-version": "4.1-preview.1",
        "x-ms-vss-resource": "variablegroups",
        "x-ms-vss-method": "GetVariableGroup",
        "x-ms-preview": true,
        "description": "Get a variable group.",
        "operationId": "Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Team Foundation Server collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "Id of the variable group.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VariableGroup"
            }
          }
        },
        "x-ms-examples": {
          "Get a variable group": {
            "$ref": "./httpExamples/variablegroups/GET_VariableGroup-onprem.json"
          }
        }
      },
      "put": {
        "tags": [
          "Variablegroups"
        ],
        "x-ms-docs-override-version": "4.1-preview.1",
        "x-ms-vss-resource": "variablegroups",
        "x-ms-vss-method": "UpdateVariableGroup",
        "x-ms-preview": true,
        "description": "Update a variable group.",
        "operationId": "Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Team Foundation Server collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Variable group to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VariableGroupParameters"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "Id of the variable group to update.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VariableGroup"
            }
          }
        },
        "x-ms-examples": {
          "Update a variable group": {
            "$ref": "./httpExamples/variablegroups/PUT_UpdateVariableGroup-onprem.json"
          }
        }
      }
    }
  },
  "x-ms-paths": {
    "/{collection}/{project}/_apis/distributedtask/variablegroups?": {
      "get": {
        "tags": [
          "Variablegroups"
        ],
        "x-ms-docs-override-version": "4.1-preview.1",
        "x-ms-vss-resource": "variablegroups",
        "x-ms-vss-method": "GetVariableGroups",
        "x-ms-preview": true,
        "description": "Get variable groups.",
        "operationId": "Get Variable Groups",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Team Foundation Server collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "groupName",
            "description": "Name of variable group.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "actionFilter",
            "description": "Action filter for the variable group. It specifies the action which can be performed on the variable groups.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "manage",
              "use"
            ],
            "x-ms-enum": {
              "name": "VariableGroupActionFilter",
              "values": [
                {
                  "value": "none",
                  "description": ""
                },
                {
                  "value": "manage",
                  "description": ""
                },
                {
                  "value": "use",
                  "description": ""
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "$top",
            "description": "Number of variable groups to get.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "Gets the variable groups after the continuation token provided.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "queryOrder",
            "description": "Gets the results in the defined order. Default is 'IdDescending'.",
            "required": false,
            "type": "string",
            "enum": [
              "idAscending",
              "idDescending"
            ],
            "x-ms-enum": {
              "name": "VariableGroupQueryOrder",
              "values": [
                {
                  "value": "idAscending",
                  "description": "Order by id ascending."
                },
                {
                  "value": "idDescending",
                  "description": "Order by id descending."
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableGroup"
              }
            }
          }
        },
        "x-ms-examples": {
          "Get variable groups using group name filter": {
            "$ref": "./httpExamples/variablegroups/GET_VariableGroupsByGroupName-onprem.json"
          },
          "Get variable groups using action filter": {
            "$ref": "./httpExamples/variablegroups/GET_VariableGroupsByActionFilter-onprem.json"
          }
        }
      }
    }
  },
  "definitions": {
    "AadOauthTokenRequest": {
      "description": "",
      "type": "object",
      "properties": {
        "refresh": {
          "type": "boolean"
        },
        "resource": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "AadOauthTokenResult": {
      "description": "",
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "refreshTokenCache": {
          "type": "string"
        }
      }
    },
    "AgentChangeEvent": {
      "description": "",
      "type": "object",
      "properties": {
        "agent": {
          "$ref": "#/definitions/TaskAgent"
        },
        "eventType": {
          "type": "string"
        },
        "pool": {
          "$ref": "#/definitions/TaskAgentPoolReference"
        }
      }
    },
    "AgentJobRequestMessage": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JobRequestMessage"
        }
      ],
      "properties": {
        "lockedUntil": {
          "type": "string",
          "format": "date-time"
        },
        "lockToken": {
          "type": "string",
          "format": "uuid"
        },
        "requestId": {
          "type": "integer",
          "format": "int64"
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskInstance"
          }
        }
      }
    },
    "AgentMigrationMessage": {
      "description": "",
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        }
      }
    },
    "AgentPoolEvent": {
      "description": "",
      "type": "object",
      "properties": {
        "eventType": {
          "type": "string"
        },
        "pool": {
          "$ref": "#/definitions/TaskAgentPool"
        }
      }
    },
    "AgentQueueEvent": {
      "description": "",
      "type": "object",
      "properties": {
        "eventType": {
          "type": "string"
        },
        "queue": {
          "$ref": "#/definitions/TaskAgentQueue"
        }
      }
    },
    "AgentQueuesEvent": {
      "description": "",
      "type": "object",
      "properties": {
        "eventType": {
          "type": "string"
        },
        "queues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskAgentQueue"
          }
        }
      }
    },
    "AgentRefreshMessage": {
      "description": "",
      "type": "object",
      "properties": {
        "agentId": {
          "type": "integer",
          "format": "int32"
        },
        "targetVersion": {
          "type": "string"
        },
        "timeout": {
          "type": "string",
          "format": "TimeSpan"
        }
      }
    },
    "AuthenticationSchemeReference": {
      "description": "",
      "type": "object",
      "properties": {
        "inputs": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "AuthorizationHeader": {
      "description": "",
      "type": "object",
      "properties": {
        "name": {
          "description": "Gets or sets the name of authorization header.",
          "type": "string"
        },
        "value": {
          "description": "Gets or sets the value of authorization header.",
          "type": "string"
        }
      }
    },
    "AzureKeyVaultPermission": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AzureResourcePermission"
        }
      ],
      "properties": {
        "vault": {
          "type": "string"
        }
      }
    },
    "AzureKeyVaultVariableGroupProviderData": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/VariableGroupProviderData"
        }
      ],
      "properties": {
        "lastRefreshedOn": {
          "type": "string",
          "format": "date-time"
        },
        "serviceEndpointId": {
          "type": "string",
          "format": "uuid"
        },
        "vault": {
          "type": "string"
        }
      }
    },
    "AzureKeyVaultVariableValue": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/VariableValue"
        }
      ],
      "properties": {
        "contentType": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "expires": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "AzurePermission": {
      "description": "",
      "type": "object",
      "properties": {
        "provisioned": {
          "type": "boolean"
        },
        "resourceProvider": {
          "type": "string"
        }
      }
    },
    "AzureResourcePermission": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AzurePermission"
        }
      ],
      "properties": {
        "resourceGroup": {
          "type": "string"
        }
      }
    },
    "AzureRoleAssignmentPermission": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AzurePermission"
        }
      ],
      "properties": {
        "roleAssignmentId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "AzureSpnOperationStatus": {
      "description": "",
      "type": "object",
      "properties": {
        "state": {
          "type": "string"
        },
        "statusMessage": {
          "type": "string"
        }
      }
    },
    "AzureSubscription": {
      "description": "",
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string"
        },
        "subscriptionTenantId": {
          "type": "string"
        },
        "subscriptionTenantName": {
          "type": "string"
        }
      }
    },
    "AzureSubscriptionQueryResult": {
      "description": "",
      "type": "object",
      "properties": {
        "errorMessage": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AzureSubscription"
          }
        }
      }
    },
    "ClientCertificate": {
      "description": "",
      "type": "object",
      "properties": {
        "value": {
          "description": "Gets or sets the value of client certificate.",
          "type": "string"
        }
      }
    },
    "DataSource": {
      "description": "",
      "type": "object",
      "properties": {
        "authenticationScheme": {
          "$ref": "#/definitions/AuthenticationSchemeReference"
        },
        "endpointUrl": {
          "type": "string"
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthorizationHeader"
          }
        },
        "name": {
          "type": "string"
        },
        "resourceUrl": {
          "type": "string"
        },
        "resultSelector": {
          "type": "string"
        }
      }
    },
    "DataSourceBinding": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DataSourceBindingBase"
        }
      ],
      "properties": {}
    },
    "DataSourceBindingBase": {
      "description": "Represents binding of data source for the service endpoint request.",
      "type": "object",
      "properties": {
        "dataSourceName": {
          "description": "Gets or sets the name of the data source.",
          "type": "string"
        },
        "endpointId": {
          "description": "Gets or sets the endpoint Id.",
          "type": "string"
        },
        "endpointUrl": {
          "description": "Gets or sets the url of the service endpoint.",
          "type": "string"
        },
        "headers": {
          "description": "Gets or sets the authorization headers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthorizationHeader"
          }
        },
        "parameters": {
          "description": "Gets or sets the parameters for the data source.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "resultSelector": {
          "description": "Gets or sets the result selector.",
          "type": "string"
        },
        "resultTemplate": {
          "description": "Gets or sets the result template.",
          "type": "string"
        },
        "target": {
          "description": "Gets or sets the target of the data source.",
          "type": "string"
        }
      }
    },
    "DataSourceDetails": {
      "description": "",
      "type": "object",
      "properties": {
        "dataSourceName": {
          "type": "string"
        },
        "dataSourceUrl": {
          "type": "string"
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthorizationHeader"
          }
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "resourceUrl": {
          "type": "string"
        },
        "resultSelector": {
          "type": "string"
        }
      }
    },
    "Demand": {
      "description": "",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "DependencyBinding": {
      "description": "",
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "DependencyData": {
      "description": "",
      "type": "object",
      "properties": {
        "input": {
          "type": "string"
        },
        "map": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "DependsOn": {
      "description": "",
      "type": "object",
      "properties": {
        "input": {
          "type": "string"
        },
        "map": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DependencyBinding"
          }
        }
      }
    },
    "DeploymentGroup": {
      "description": "Deployment group.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DeploymentGroupReference"
        }
      ],
      "properties": {
        "description": {
          "description": "Description of the deployment group.",
          "type": "string"
        },
        "machineCount": {
          "description": "Number of deployment targets in the deployment group.",
          "type": "integer",
          "format": "int32"
        },
        "machines": {
          "description": "List of deployment targets in the deployment group.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentMachine"
          }
        },
        "machineTags": {
          "description": "List of unique tags across all deployment targets in the deployment group.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentGroupCreateParameter": {
      "description": "Properties to create Deployment group.",
      "type": "object",
      "properties": {
        "description": {
          "description": "Description of the deployment group.",
          "type": "string"
        },
        "name": {
          "description": "Name of the deployment group.",
          "type": "string"
        },
        "poolId": {
          "description": "Identifier of the deployment pool in which deployment agents are registered.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DeploymentGroupCreateParameterPoolProperty": {
      "description": "Properties of Deployment pool to create Deployment group.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Deployment pool identifier.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DeploymentGroupMetrics": {
      "description": "Deployment group metrics.",
      "type": "object",
      "properties": {
        "columnsHeader": {
          "description": "List of deployment group properties. And types of metrics provided for those properties.",
          "$ref": "#/definitions/MetricsColumnsHeader"
        },
        "deploymentGroup": {
          "description": "Deployment group.",
          "$ref": "#/definitions/DeploymentGroupReference"
        },
        "rows": {
          "description": "Values of properties and the metrics. E.g. 1: total count of deployment targets for which 'TargetState' is 'offline'. E.g. 2: Average time of deployment to the deployment targets for which 'LastJobStatus' is 'passed' and 'TargetState' is 'online'.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricsRow"
          }
        }
      }
    },
    "DeploymentGroupReference": {
      "description": "Deployment group reference. This is useful for referring a deployment group in another object.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Deployment group identifier.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name of the deployment group.",
          "type": "string"
        },
        "pool": {
          "description": "Deployment pool in which deployment agents are registered.",
          "$ref": "#/definitions/TaskAgentPoolReference"
        },
        "project": {
          "description": "Project to which the deployment group belongs.",
          "$ref": "#/definitions/ProjectReference"
        }
      }
    },
    "DeploymentGroupUpdateParameter": {
      "description": "Deployment group update parameter.",
      "type": "object",
      "properties": {
        "description": {
          "description": "Description of the deployment group.",
          "type": "string"
        },
        "name": {
          "description": "Name of the deployment group.",
          "type": "string"
        }
      }
    },
    "DeploymentMachine": {
      "description": "Deployment target.",
      "type": "object",
      "properties": {
        "agent": {
          "description": "Deployment agent.",
          "$ref": "#/definitions/TaskAgent"
        },
        "id": {
          "description": "Deployment target Identifier.",
          "type": "integer",
          "format": "int32"
        },
        "tags": {
          "description": "Tags of the deployment target.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentMachineGroup": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DeploymentMachineGroupReference"
        }
      ],
      "properties": {
        "machines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentMachine"
          }
        },
        "size": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DeploymentMachineGroupReference": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "pool": {
          "$ref": "#/definitions/TaskAgentPoolReference"
        },
        "project": {
          "$ref": "#/definitions/ProjectReference"
        }
      }
    },
    "DeploymentMachinesChangeEvent": {
      "description": "",
      "type": "object",
      "properties": {
        "machineGroupReference": {
          "$ref": "#/definitions/DeploymentGroupReference"
        },
        "machines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentMachine"
          }
        }
      }
    },
    "DeploymentPoolSummary": {
      "description": "Deployment pool summary.",
      "type": "object",
      "properties": {
        "deploymentGroups": {
          "description": "List of deployment groups referring to the deployment pool.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentGroupReference"
          }
        },
        "offlineAgentsCount": {
          "description": "Number of deployment agents that are offline.",
          "type": "integer",
          "format": "int32"
        },
        "onlineAgentsCount": {
          "description": "Number of deployment agents that are online.",
          "type": "integer",
          "format": "int32"
        },
        "pool": {
          "description": "Deployment pool.",
          "$ref": "#/definitions/TaskAgentPoolReference"
        }
      }
    },
    "DeploymentTargetUpdateParameter": {
      "description": "Deployment target update parameter.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Identifier of the deployment target.",
          "type": "integer",
          "format": "int32"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DiagnosticLogMetadata": {
      "description": "",
      "type": "object",
      "properties": {
        "agentId": {
          "type": "integer",
          "format": "int32"
        },
        "agentName": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "phaseName": {
          "type": "string"
        },
        "phaseResult": {
          "type": "string"
        },
        "poolId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "EndpointAuthorization": {
      "description": "",
      "type": "object",
      "properties": {
        "parameters": {
          "description": "Gets or sets the parameters for the selected authorization scheme.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "scheme": {
          "description": "Gets or sets the scheme used for service endpoint authentication.",
          "type": "string"
        }
      }
    },
    "EndpointUrl": {
      "description": "Represents url of the service endpoint.",
      "type": "object",
      "properties": {
        "dependsOn": {
          "description": "Gets or sets the dependency bindings.",
          "$ref": "#/definitions/DependsOn"
        },
        "displayName": {
          "description": "Gets or sets the display name of service endpoint url.",
          "type": "string"
        },
        "helpText": {
          "description": "Gets or sets the help text of service endpoint url.",
          "type": "string"
        },
        "isVisible": {
          "description": "Gets or sets the visibility of service endpoint url.",
          "type": "string"
        },
        "value": {
          "description": "Gets or sets the value of service endpoint url.",
          "type": "string"
        }
      }
    },
    "EventsConfig": {
      "description": "",
      "type": "object",
      "properties": {}
    },
    "ExpressionValidationItem": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ValidationItem"
        }
      ],
      "properties": {}
    },
    "GraphSubjectBase": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "description": "This field contains zero or more interesting links about the graph subject. These links may be invoked to obtain additional relationships or more detailed information about this graph subject.",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "descriptor": {
          "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Collections.",
          "type": "string"
        },
        "displayName": {
          "description": "This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.",
          "type": "string"
        },
        "url": {
          "description": "This url is the full route to the source resource of this graph subject.",
          "type": "string"
        }
      }
    },
    "HelpLink": {
      "description": "",
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "IdentityRef": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GraphSubjectBase"
        }
      ],
      "properties": {
        "directoryAlias": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "inactive": {
          "type": "boolean"
        },
        "isAadIdentity": {
          "type": "boolean"
        },
        "isContainer": {
          "type": "boolean"
        },
        "profileUrl": {
          "type": "string"
        },
        "uniqueName": {
          "type": "string"
        }
      }
    },
    "InputBindingContext": {
      "description": "",
      "type": "object",
      "properties": {
        "value": {
          "description": "Value of the input",
          "type": "string"
        }
      }
    },
    "InputDescriptor": {
      "description": "Describes an input for subscriptions.",
      "type": "object",
      "properties": {
        "dependencyInputIds": {
          "description": "The ids of all inputs that the value of this input is dependent on.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "description": "Description of what this input is used for",
          "type": "string"
        },
        "groupName": {
          "description": "The group localized name to which this input belongs and can be shown as a header for the container that will include all the inputs in the group.",
          "type": "string"
        },
        "hasDynamicValueInformation": {
          "description": "If true, the value information for this input is dynamic and should be fetched when the value of dependency inputs change.",
          "type": "boolean"
        },
        "id": {
          "description": "Identifier for the subscription input",
          "type": "string"
        },
        "inputMode": {
          "description": "Mode in which the value of this input should be entered",
          "enum": [
            "none",
            "textBox",
            "passwordBox",
            "combo",
            "radioButtons",
            "checkBox",
            "textArea"
          ],
          "x-ms-enum": {
            "name": "InputMode",
            "values": [
              {
                "value": "none",
                "description": "This input should not be shown in the UI"
              },
              {
                "value": "textBox",
                "description": "An input text box should be shown"
              },
              {
                "value": "passwordBox",
                "description": "An password input box should be shown"
              },
              {
                "value": "combo",
                "description": "A select/combo control should be shown"
              },
              {
                "value": "radioButtons",
                "description": "Radio buttons should be shown"
              },
              {
                "value": "checkBox",
                "description": "Checkbox should be shown(for true/false values)"
              },
              {
                "value": "textArea",
                "description": "A multi-line text area should be shown"
              }
            ]
          }
        },
        "isConfidential": {
          "description": "Gets whether this input is confidential, such as for a password or application key",
          "type": "boolean"
        },
        "name": {
          "description": "Localized name which can be shown as a label for the subscription input",
          "type": "string"
        },
        "properties": {
          "description": "Custom properties for the input which can be used by the service provider",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "type": {
          "description": "Underlying data type for the input value. When this value is specified, InputMode, Validation and Values are optional.",
          "type": "string"
        },
        "useInDefaultDescription": {
          "description": "Gets whether this input is included in the default generated action description.",
          "type": "boolean"
        },
        "validation": {
          "description": "Information to use to validate this input's value",
          "$ref": "#/definitions/InputValidation"
        },
        "valueHint": {
          "description": "A hint for input value. It can be used in the UI as the input placeholder.",
          "type": "string"
        },
        "values": {
          "description": "Information about possible values for this input",
          "$ref": "#/definitions/InputValues"
        }
      }
    },
    "InputValidation": {
      "description": "Describes what values are valid for a subscription input",
      "type": "object",
      "properties": {
        "dataType": {
          "enum": [
            "none",
            "string",
            "number",
            "boolean",
            "guid",
            "uri"
          ],
          "x-ms-enum": {
            "name": "InputDataType",
            "values": [
              {
                "value": "none",
                "description": "No data type is specified."
              },
              {
                "value": "string",
                "description": "Represents a textual value."
              },
              {
                "value": "number",
                "description": "Represents a numberic value."
              },
              {
                "value": "boolean",
                "description": "Represents a value of true or false."
              },
              {
                "value": "guid",
                "description": "Represents a Guid."
              },
              {
                "value": "uri",
                "description": "Represents a URI."
              }
            ]
          }
        },
        "isRequired": {
          "type": "boolean"
        },
        "maxLength": {
          "type": "integer",
          "format": "int32"
        },
        "maxValue": {
          "type": "string",
          "format": "decimal"
        },
        "minLength": {
          "type": "integer",
          "format": "int32"
        },
        "minValue": {
          "type": "string",
          "format": "decimal"
        },
        "pattern": {
          "type": "string"
        },
        "patternMismatchErrorMessage": {
          "type": "string"
        }
      }
    },
    "InputValidationItem": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ValidationItem"
        }
      ],
      "properties": {
        "context": {
          "description": "Provides binding context for the expression to evaluate",
          "$ref": "#/definitions/InputBindingContext"
        }
      }
    },
    "InputValidationRequest": {
      "description": "",
      "type": "object",
      "properties": {
        "inputs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ValidationItem"
          }
        }
      }
    },
    "InputValue": {
      "description": "Information about a single value for an input",
      "type": "object",
      "properties": {
        "data": {
          "description": "Any other data about this input",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "displayValue": {
          "description": "The text to show for the display of this value",
          "type": "string"
        },
        "value": {
          "description": "The value to store for this input",
          "type": "string"
        }
      }
    },
    "InputValues": {
      "description": "Information about the possible/allowed values for a given subscription input",
      "type": "object",
      "properties": {
        "defaultValue": {
          "description": "The default value to use for this input",
          "type": "string"
        },
        "error": {
          "description": "Errors encountered while computing dynamic values.",
          "$ref": "#/definitions/InputValuesError"
        },
        "inputId": {
          "description": "The id of the input",
          "type": "string"
        },
        "isDisabled": {
          "description": "Should this input be disabled",
          "type": "boolean"
        },
        "isLimitedToPossibleValues": {
          "description": "Should the value be restricted to one of the values in the PossibleValues (True) or are the values in PossibleValues just a suggestion (False)",
          "type": "boolean"
        },
        "isReadOnly": {
          "description": "Should this input be made read-only",
          "type": "boolean"
        },
        "possibleValues": {
          "description": "Possible values that this input can take",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputValue"
          }
        }
      }
    },
    "InputValuesError": {
      "description": "Error information related to a subscription input value.",
      "type": "object",
      "properties": {
        "message": {
          "description": "The error message.",
          "type": "string"
        }
      }
    },
    "Issue": {
      "description": "",
      "type": "object",
      "properties": {
        "category": {
          "type": "string"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "message": {
          "type": "string"
        },
        "type": {
          "enum": [
            "error",
            "warning"
          ],
          "x-ms-enum": {
            "name": "IssueType",
            "values": [
              {
                "value": "error",
                "description": ""
              },
              {
                "value": "warning",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "JobAssignedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JobEvent"
        }
      ],
      "properties": {
        "request": {
          "$ref": "#/definitions/TaskAgentJobRequest"
        }
      }
    },
    "JobCancelMessage": {
      "description": "",
      "type": "object",
      "properties": {
        "jobId": {
          "type": "string",
          "format": "uuid"
        },
        "timeout": {
          "type": "string",
          "format": "TimeSpan"
        }
      }
    },
    "JobCompletedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JobEvent"
        }
      ],
      "properties": {
        "requestId": {
          "type": "integer",
          "format": "int64"
        },
        "result": {
          "enum": [
            "succeeded",
            "succeededWithIssues",
            "failed",
            "canceled",
            "skipped",
            "abandoned"
          ],
          "x-ms-enum": {
            "name": "TaskResult",
            "values": [
              {
                "value": "succeeded",
                "description": ""
              },
              {
                "value": "succeededWithIssues",
                "description": ""
              },
              {
                "value": "failed",
                "description": ""
              },
              {
                "value": "canceled",
                "description": ""
              },
              {
                "value": "skipped",
                "description": ""
              },
              {
                "value": "abandoned",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "JobEnvironment": {
      "description": "Represents the context of variables and vectors for a job request.",
      "type": "object",
      "properties": {
        "endpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceEndpoint"
          }
        },
        "mask": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MaskHint"
          }
        },
        "options": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JobOption"
          }
        },
        "secureFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecureFile"
          }
        },
        "systemConnection": {
          "description": "Gets or sets the endpoint used for communicating back to the calling service.",
          "$ref": "#/definitions/ServiceEndpoint"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "JobEvent": {
      "description": "",
      "type": "object",
      "properties": {
        "jobId": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "JobEventConfig": {
      "description": "",
      "type": "object",
      "properties": {
        "timeout": {
          "type": "string"
        }
      }
    },
    "JobEventsConfig": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EventsConfig"
        }
      ],
      "properties": {
        "jobAssigned": {
          "$ref": "#/definitions/JobEventConfig"
        },
        "jobCompleted": {
          "$ref": "#/definitions/JobEventConfig"
        },
        "jobStarted": {
          "$ref": "#/definitions/JobEventConfig"
        }
      }
    },
    "JObject": {
      "description": "",
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/JToken"
        },
        "type": {
          "type": "string",
          "format": "JTokenType"
        }
      }
    },
    "JobOption": {
      "description": "Represents an option that may affect the way an agent runs the job.",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "id": {
          "description": "Gets the id of the option.",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "JobRequestMessage": {
      "description": "",
      "type": "object",
      "properties": {
        "environment": {
          "$ref": "#/definitions/JobEnvironment"
        },
        "jobId": {
          "type": "string",
          "format": "uuid"
        },
        "jobName": {
          "type": "string"
        },
        "jobRefName": {
          "type": "string"
        },
        "messageType": {
          "type": "string"
        },
        "plan": {
          "$ref": "#/definitions/TaskOrchestrationPlanReference"
        },
        "timeline": {
          "$ref": "#/definitions/TimelineReference"
        }
      }
    },
    "JobStartedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JobEvent"
        }
      ],
      "properties": {}
    },
    "JToken": {
      "description": "",
      "type": "object",
      "properties": {
        "first": {
          "$ref": "#/definitions/JToken"
        },
        "hasValues": {
          "type": "boolean"
        },
        "item": {
          "$ref": "#/definitions/JToken"
        },
        "last": {
          "$ref": "#/definitions/JToken"
        },
        "next": {
          "$ref": "#/definitions/JToken"
        },
        "parent": {
          "type": "string",
          "format": "JContainer"
        },
        "path": {
          "type": "string"
        },
        "previous": {
          "$ref": "#/definitions/JToken"
        },
        "root": {
          "$ref": "#/definitions/JToken"
        },
        "type": {
          "type": "string",
          "format": "JTokenType"
        }
      }
    },
    "MaskHint": {
      "description": "",
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "variable",
            "regex"
          ],
          "x-ms-enum": {
            "name": "MaskType",
            "values": [
              {
                "value": "variable",
                "description": ""
              },
              {
                "value": "regex",
                "description": ""
              }
            ]
          }
        },
        "value": {
          "type": "string"
        }
      }
    },
    "MetricsColumnMetaData": {
      "description": "Meta data for a metrics column.",
      "type": "object",
      "properties": {
        "columnName": {
          "description": "Name.",
          "type": "string"
        },
        "columnValueType": {
          "description": "Data type.",
          "type": "string"
        }
      }
    },
    "MetricsColumnsHeader": {
      "description": "Metrics columns header",
      "type": "object",
      "properties": {
        "dimensions": {
          "description": "Properties of deployment group for which metrics are provided. E.g. 1: LastJobStatus E.g. 2: TargetState",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricsColumnMetaData"
          }
        },
        "metrics": {
          "description": "The types of metrics. E.g. 1: total count of deployment targets. E.g. 2: Average time of deployment to the deployment targets.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricsColumnMetaData"
          }
        }
      }
    },
    "MetricsRow": {
      "description": "Metrics row.",
      "type": "object",
      "properties": {
        "dimensions": {
          "description": "The values of the properties mentioned as 'Dimensions' in column header. E.g. 1: For a property 'LastJobStatus' - metrics will be provided for 'passed', 'failed', etc. E.g. 2: For a property 'TargetState' - metrics will be provided for 'online', 'offline' targets.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metrics": {
          "description": "Metrics in serialized format. Should be deserialized based on the data type provided in header.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "OAuthConfiguration": {
      "description": "",
      "type": "object",
      "properties": {
        "clientId": {
          "description": "Gets or sets the ClientId",
          "type": "string"
        },
        "clientSecret": {
          "description": "Gets or sets the ClientSecret",
          "type": "string"
        },
        "createdBy": {
          "description": "Gets or sets the identity who created the config.",
          "$ref": "#/definitions/IdentityRef"
        },
        "createdOn": {
          "description": "Gets or sets the time when config was created.",
          "type": "string",
          "format": "date-time"
        },
        "endpointType": {
          "description": "Gets or sets the type of the endpoint.",
          "type": "string"
        },
        "id": {
          "description": "Gets or sets the unique identifier of this field",
          "type": "integer",
          "format": "int32"
        },
        "modifiedBy": {
          "description": "Gets or sets the identity who modified the config.",
          "$ref": "#/definitions/IdentityRef"
        },
        "modifiedOn": {
          "description": "Gets or sets the time when variable group was modified",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "Gets or sets the name",
          "type": "string"
        },
        "url": {
          "description": "Gets or sets the Url",
          "type": "string"
        }
      }
    },
    "OAuthConfigurationParams": {
      "description": "",
      "type": "object",
      "properties": {
        "clientId": {
          "description": "Gets or sets the ClientId",
          "type": "string"
        },
        "clientSecret": {
          "description": "Gets or sets the ClientSecret",
          "type": "string"
        },
        "endpointType": {
          "description": "Gets or sets the type of the endpoint.",
          "type": "string"
        },
        "name": {
          "description": "Gets or sets the name",
          "type": "string"
        },
        "url": {
          "description": "Gets or sets the Url",
          "type": "string"
        }
      }
    },
    "PackageMetadata": {
      "description": "Represents a downloadable package.",
      "type": "object",
      "properties": {
        "createdOn": {
          "description": "The date the package was created",
          "type": "string",
          "format": "date-time"
        },
        "downloadUrl": {
          "description": "A direct link to download the package.",
          "type": "string"
        },
        "filename": {
          "description": "The UI uses this to display instructions, i.e. \"unzip MyAgent.zip\"",
          "type": "string"
        },
        "hashValue": {
          "description": "MD5 hash as a base64 string",
          "type": "string"
        },
        "infoUrl": {
          "description": "A link to documentation",
          "type": "string"
        },
        "platform": {
          "description": "The platform (win7, linux, etc.)",
          "type": "string"
        },
        "type": {
          "description": "The type of package (e.g. \"agent\")",
          "type": "string"
        },
        "version": {
          "description": "The package version.",
          "$ref": "#/definitions/PackageVersion"
        }
      }
    },
    "PackageVersion": {
      "description": "",
      "type": "object",
      "properties": {
        "major": {
          "type": "integer",
          "format": "int32"
        },
        "minor": {
          "type": "integer",
          "format": "int32"
        },
        "patch": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PlanEnvironment": {
      "description": "",
      "type": "object",
      "properties": {
        "mask": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MaskHint"
          }
        },
        "options": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JobOption"
          }
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ProjectReference": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "PropertiesCollection": {
      "description": "The class represents a property bag as a collection of key-value pairs. Values of all primitive types (any type with a `TypeCode != TypeCode.Object`) except for `DBNull` are accepted. Values of type Byte[], Int32, Double, DateType and String preserve their type, other primitives are retuned as a String. Byte[] expected as base64 encoded string.",
      "type": "object",
      "properties": {
        "count": {
          "description": "The count of properties in the collection.",
          "type": "integer",
          "format": "int32"
        },
        "item": {
          "type": "object"
        },
        "keys": {
          "description": "The set of keys in the collection.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "values": {
          "description": "The set of values in the collection.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PublishTaskGroupMetadata": {
      "description": "",
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "parentDefinitionRevision": {
          "type": "integer",
          "format": "int32"
        },
        "preview": {
          "type": "boolean"
        },
        "taskGroupId": {
          "type": "string",
          "format": "uuid"
        },
        "taskGroupRevision": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ReferenceLinks": {
      "description": "The class to represent a collection of REST reference links.",
      "type": "object",
      "properties": {
        "links": {
          "description": "The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ResourceUsage": {
      "description": "",
      "type": "object",
      "properties": {
        "runningPlanGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskOrchestrationPlanGroup"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        },
        "usedCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ResultTransformationDetails": {
      "description": "",
      "type": "object",
      "properties": {
        "resultTemplate": {
          "type": "string"
        }
      }
    },
    "SecureFile": {
      "description": "",
      "type": "object",
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/IdentityRef"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "modifiedBy": {
          "$ref": "#/definitions/IdentityRef"
        },
        "modifiedOn": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ticket": {
          "type": "string"
        }
      }
    },
    "SendJobResponse": {
      "description": "",
      "type": "object",
      "properties": {
        "events": {
          "$ref": "#/definitions/JobEventsConfig"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ServerExecutionDefinition": {
      "description": "",
      "type": "object",
      "properties": {
        "events": {
          "$ref": "#/definitions/EventsConfig"
        },
        "handlerName": {
          "type": "string"
        }
      }
    },
    "ServerTaskRequestMessage": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JobRequestMessage"
        }
      ],
      "properties": {
        "taskDefinition": {
          "$ref": "#/definitions/TaskDefinition"
        },
        "taskInstance": {
          "$ref": "#/definitions/TaskInstance"
        }
      }
    },
    "ServiceEndpoint": {
      "description": "Represents an endpoint which may be used by an orchestration job.",
      "type": "object",
      "properties": {
        "administratorsGroup": {
          "description": "Gets or sets the identity reference for the administrators group of the service endpoint.",
          "$ref": "#/definitions/IdentityRef"
        },
        "authorization": {
          "description": "Gets or sets the authorization data for talking to the endpoint.",
          "$ref": "#/definitions/EndpointAuthorization"
        },
        "createdBy": {
          "description": "Gets or sets the identity reference for the user who created the Service endpoint.",
          "$ref": "#/definitions/IdentityRef"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "description": {
          "description": "Gets or sets the description of endpoint.",
          "type": "string"
        },
        "groupScopeId": {
          "type": "string",
          "format": "uuid"
        },
        "id": {
          "description": "Gets or sets the identifier of this endpoint.",
          "type": "string",
          "format": "uuid"
        },
        "isReady": {
          "description": "EndPoint state indictor",
          "type": "boolean"
        },
        "name": {
          "description": "Gets or sets the friendly name of the endpoint.",
          "type": "string"
        },
        "operationStatus": {
          "description": "Error message during creation/deletion of endpoint",
          "$ref": "#/definitions/JObject"
        },
        "readersGroup": {
          "description": "Gets or sets the identity reference for the readers group of the service endpoint.",
          "$ref": "#/definitions/IdentityRef"
        },
        "type": {
          "description": "Gets or sets the type of the endpoint.",
          "type": "string"
        },
        "url": {
          "description": "Gets or sets the url of the endpoint.",
          "type": "string"
        }
      }
    },
    "ServiceEndpointAuthenticationScheme": {
      "description": "",
      "type": "object",
      "properties": {
        "authorizationHeaders": {
          "description": "Gets or sets the authorization headers of service endpoint authentication scheme.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthorizationHeader"
          }
        },
        "clientCertificates": {
          "description": "Gets or sets the certificates of service endpoint authentication scheme.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientCertificate"
          }
        },
        "displayName": {
          "description": "Gets or sets the display name for the service endpoint authentication scheme.",
          "type": "string"
        },
        "inputDescriptors": {
          "description": "Gets or sets the input descriptors for the service endpoint authentication scheme.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputDescriptor"
          }
        },
        "scheme": {
          "description": "Gets or sets the scheme for service endpoint authentication.",
          "type": "string"
        }
      }
    },
    "ServiceEndpointDetails": {
      "description": "",
      "type": "object",
      "properties": {
        "authorization": {
          "$ref": "#/definitions/EndpointAuthorization"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "ServiceEndpointExecutionData": {
      "description": "Represents service endpoint execution data.",
      "type": "object",
      "properties": {
        "definition": {
          "description": "Gets the definition of service endpoint execution owner.",
          "$ref": "#/definitions/TaskOrchestrationOwner"
        },
        "finishTime": {
          "description": "Gets the finish time of service endpoint execution.",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "Gets the Id of service endpoint execution data.",
          "type": "integer",
          "format": "int64"
        },
        "owner": {
          "description": "Gets the owner of service endpoint execution data.",
          "$ref": "#/definitions/TaskOrchestrationOwner"
        },
        "planType": {
          "description": "Gets the plan type of service endpoint execution data.",
          "type": "string"
        },
        "result": {
          "description": "Gets the result of service endpoint execution.",
          "enum": [
            "succeeded",
            "succeededWithIssues",
            "failed",
            "canceled",
            "skipped",
            "abandoned"
          ],
          "x-ms-enum": {
            "name": "TaskResult",
            "values": [
              {
                "value": "succeeded",
                "description": ""
              },
              {
                "value": "succeededWithIssues",
                "description": ""
              },
              {
                "value": "failed",
                "description": ""
              },
              {
                "value": "canceled",
                "description": ""
              },
              {
                "value": "skipped",
                "description": ""
              },
              {
                "value": "abandoned",
                "description": ""
              }
            ]
          }
        },
        "startTime": {
          "description": "Gets the start time of service endpoint execution.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ServiceEndpointExecutionRecord": {
      "description": "",
      "type": "object",
      "properties": {
        "data": {
          "description": "Gets the execution data of service endpoint execution.",
          "$ref": "#/definitions/ServiceEndpointExecutionData"
        },
        "endpointId": {
          "description": "Gets the Id of service endpoint.",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "ServiceEndpointExecutionRecordsInput": {
      "description": "",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ServiceEndpointExecutionData"
        },
        "endpointIds": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    },
    "ServiceEndpointRequest": {
      "description": "",
      "type": "object",
      "properties": {
        "dataSourceDetails": {
          "$ref": "#/definitions/DataSourceDetails"
        },
        "resultTransformationDetails": {
          "$ref": "#/definitions/ResultTransformationDetails"
        },
        "serviceEndpointDetails": {
          "$ref": "#/definitions/ServiceEndpointDetails"
        }
      }
    },
    "ServiceEndpointRequestResult": {
      "description": "",
      "type": "object",
      "properties": {
        "errorMessage": {
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/JToken"
        },
        "statusCode": {
          "enum": [
            "continue",
            "switchingProtocols",
            "oK",
            "created",
            "accepted",
            "nonAuthoritativeInformation",
            "noContent",
            "resetContent",
            "partialContent",
            "multipleChoices",
            "ambiguous",
            "movedPermanently",
            "moved",
            "found",
            "redirect",
            "seeOther",
            "redirectMethod",
            "notModified",
            "useProxy",
            "unused",
            "temporaryRedirect",
            "redirectKeepVerb",
            "badRequest",
            "unauthorized",
            "paymentRequired",
            "forbidden",
            "notFound",
            "methodNotAllowed",
            "notAcceptable",
            "proxyAuthenticationRequired",
            "requestTimeout",
            "conflict",
            "gone",
            "lengthRequired",
            "preconditionFailed",
            "requestEntityTooLarge",
            "requestUriTooLong",
            "unsupportedMediaType",
            "requestedRangeNotSatisfiable",
            "expectationFailed",
            "upgradeRequired",
            "internalServerError",
            "notImplemented",
            "badGateway",
            "serviceUnavailable",
            "gatewayTimeout",
            "httpVersionNotSupported"
          ],
          "x-ms-enum": {
            "name": "HttpStatusCode",
            "values": [
              {
                "value": "continue",
                "description": ""
              },
              {
                "value": "switchingProtocols",
                "description": ""
              },
              {
                "value": "oK",
                "description": ""
              },
              {
                "value": "created",
                "description": ""
              },
              {
                "value": "accepted",
                "description": ""
              },
              {
                "value": "nonAuthoritativeInformation",
                "description": ""
              },
              {
                "value": "noContent",
                "description": ""
              },
              {
                "value": "resetContent",
                "description": ""
              },
              {
                "value": "partialContent",
                "description": ""
              },
              {
                "value": "multipleChoices",
                "description": ""
              },
              {
                "value": "ambiguous",
                "description": ""
              },
              {
                "value": "movedPermanently",
                "description": ""
              },
              {
                "value": "moved",
                "description": ""
              },
              {
                "value": "found",
                "description": ""
              },
              {
                "value": "redirect",
                "description": ""
              },
              {
                "value": "seeOther",
                "description": ""
              },
              {
                "value": "redirectMethod",
                "description": ""
              },
              {
                "value": "notModified",
                "description": ""
              },
              {
                "value": "useProxy",
                "description": ""
              },
              {
                "value": "unused",
                "description": ""
              },
              {
                "value": "temporaryRedirect",
                "description": ""
              },
              {
                "value": "redirectKeepVerb",
                "description": ""
              },
              {
                "value": "badRequest",
                "description": ""
              },
              {
                "value": "unauthorized",
                "description": ""
              },
              {
                "value": "paymentRequired",
                "description": ""
              },
              {
                "value": "forbidden",
                "description": ""
              },
              {
                "value": "notFound",
                "description": ""
              },
              {
                "value": "methodNotAllowed",
                "description": ""
              },
              {
                "value": "notAcceptable",
                "description": ""
              },
              {
                "value": "proxyAuthenticationRequired",
                "description": ""
              },
              {
                "value": "requestTimeout",
                "description": ""
              },
              {
                "value": "conflict",
                "description": ""
              },
              {
                "value": "gone",
                "description": ""
              },
              {
                "value": "lengthRequired",
                "description": ""
              },
              {
                "value": "preconditionFailed",
                "description": ""
              },
              {
                "value": "requestEntityTooLarge",
                "description": ""
              },
              {
                "value": "requestUriTooLong",
                "description": ""
              },
              {
                "value": "unsupportedMediaType",
                "description": ""
              },
              {
                "value": "requestedRangeNotSatisfiable",
                "description": ""
              },
              {
                "value": "expectationFailed",
                "description": ""
              },
              {
                "value": "upgradeRequired",
                "description": ""
              },
              {
                "value": "internalServerError",
                "description": ""
              },
              {
                "value": "notImplemented",
                "description": ""
              },
              {
                "value": "badGateway",
                "description": ""
              },
              {
                "value": "serviceUnavailable",
                "description": ""
              },
              {
                "value": "gatewayTimeout",
                "description": ""
              },
              {
                "value": "httpVersionNotSupported",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "ServiceEndpointType": {
      "description": "Represents type of the service endpoint.",
      "type": "object",
      "properties": {
        "authenticationSchemes": {
          "description": "Authentication scheme of service endpoint type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceEndpointAuthenticationScheme"
          }
        },
        "dataSources": {
          "description": "Data sources of service endpoint type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataSource"
          }
        },
        "dependencyData": {
          "description": "Dependency data of service endpoint type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DependencyData"
          }
        },
        "description": {
          "description": "Gets or sets the description of service endpoint type.",
          "type": "string"
        },
        "displayName": {
          "description": "Gets or sets the display name of service endpoint type.",
          "type": "string"
        },
        "endpointUrl": {
          "description": "Gets or sets the endpoint url of service endpoint type.",
          "$ref": "#/definitions/EndpointUrl"
        },
        "helpLink": {
          "description": "Gets or sets the help link of service endpoint type.",
          "$ref": "#/definitions/HelpLink"
        },
        "helpMarkDown": {
          "type": "string"
        },
        "iconUrl": {
          "description": "Gets or sets the icon url of service endpoint type.",
          "type": "string"
        },
        "inputDescriptors": {
          "description": "Input descriptor of service endpoint type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputDescriptor"
          }
        },
        "name": {
          "description": "Gets or sets the name of service endpoint type.",
          "type": "string"
        },
        "trustedHosts": {
          "description": "Trusted hosts of a service endpoint type.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "uiContributionId": {
          "description": "Gets or sets the ui contribution id of service endpoint type.",
          "type": "string"
        }
      }
    },
    "TaskAgent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskAgentReference"
        }
      ],
      "properties": {
        "assignedRequest": {
          "description": "Gets the request which is currently assigned to this agent.",
          "$ref": "#/definitions/TaskAgentJobRequest"
        },
        "authorization": {
          "description": "Gets or sets the authorization information for this agent.",
          "$ref": "#/definitions/TaskAgentAuthorization"
        },
        "createdOn": {
          "description": "Gets the date on which this agent was created.",
          "type": "string",
          "format": "date-time"
        },
        "lastCompletedRequest": {
          "description": "Gets the last request which was completed by this agent.",
          "$ref": "#/definitions/TaskAgentJobRequest"
        },
        "maxParallelism": {
          "description": "Gets or sets the maximum job parallelism allowed on this host.",
          "type": "integer",
          "format": "int32"
        },
        "pendingUpdate": {
          "description": "Gets the pending update for this agent.",
          "$ref": "#/definitions/TaskAgentUpdate"
        },
        "properties": {
          "$ref": "#/definitions/PropertiesCollection"
        },
        "statusChangedOn": {
          "description": "Gets the date on which the last connectivity status change occurred.",
          "type": "string",
          "format": "date-time"
        },
        "systemCapabilities": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "userCapabilities": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TaskAgentAuthorization": {
      "description": "Provides data necessary for authorizing the agent using OAuth 2.0 authentication flows.",
      "type": "object",
      "properties": {
        "authorizationUrl": {
          "description": "Gets or sets the endpoint used to obtain access tokens from the configured token service.",
          "type": "string"
        },
        "clientId": {
          "description": "Gets or sets the client identifier for this agent.",
          "type": "string",
          "format": "uuid"
        },
        "publicKey": {
          "description": "Gets or sets the public key used to verify the identity of this agent.",
          "$ref": "#/definitions/TaskAgentPublicKey"
        }
      }
    },
    "TaskAgentDelaySource": {
      "description": "",
      "type": "object",
      "properties": {
        "delays": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "TimeSpan"
          }
        },
        "taskAgent": {
          "$ref": "#/definitions/TaskAgentReference"
        }
      }
    },
    "TaskAgentJobRequest": {
      "description": "",
      "type": "object",
      "properties": {
        "agentDelays": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskAgentDelaySource"
          }
        },
        "assignTime": {
          "type": "string",
          "format": "date-time"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "definition": {
          "$ref": "#/definitions/TaskOrchestrationOwner"
        },
        "demands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Demand"
          }
        },
        "expectedDuration": {
          "type": "string",
          "format": "TimeSpan"
        },
        "finishTime": {
          "type": "string",
          "format": "date-time"
        },
        "hostId": {
          "type": "string",
          "format": "uuid"
        },
        "jobId": {
          "type": "string",
          "format": "uuid"
        },
        "jobName": {
          "type": "string"
        },
        "lockedUntil": {
          "type": "string",
          "format": "date-time"
        },
        "matchedAgents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskAgentReference"
          }
        },
        "owner": {
          "$ref": "#/definitions/TaskOrchestrationOwner"
        },
        "planGroup": {
          "type": "string"
        },
        "planId": {
          "type": "string",
          "format": "uuid"
        },
        "planType": {
          "type": "string"
        },
        "poolId": {
          "type": "integer",
          "format": "int32"
        },
        "queueId": {
          "type": "integer",
          "format": "int32"
        },
        "queueTime": {
          "type": "string",
          "format": "date-time"
        },
        "receiveTime": {
          "type": "string",
          "format": "date-time"
        },
        "requestId": {
          "type": "integer",
          "format": "int64"
        },
        "reservedAgent": {
          "$ref": "#/definitions/TaskAgentReference"
        },
        "result": {
          "enum": [
            "succeeded",
            "succeededWithIssues",
            "failed",
            "canceled",
            "skipped",
            "abandoned"
          ],
          "x-ms-enum": {
            "name": "TaskResult",
            "values": [
              {
                "value": "succeeded",
                "description": ""
              },
              {
                "value": "succeededWithIssues",
                "description": ""
              },
              {
                "value": "failed",
                "description": ""
              },
              {
                "value": "canceled",
                "description": ""
              },
              {
                "value": "skipped",
                "description": ""
              },
              {
                "value": "abandoned",
                "description": ""
              }
            ]
          }
        },
        "scopeId": {
          "type": "string",
          "format": "uuid"
        },
        "serviceOwner": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "TaskAgentManualUpdate": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskAgentUpdateReason"
        }
      ],
      "properties": {}
    },
    "TaskAgentMessage": {
      "description": "Provides a contract for receiving messages from the task orchestrator.",
      "type": "object",
      "properties": {
        "body": {
          "description": "Gets or sets the body of the message. If the <c>IV</c> property is provided the body will need to be decrypted using the <c>TaskAgentSession.EncryptionKey</c> value in addition to the <c>IV</c>.",
          "type": "string"
        },
        "iV": {
          "description": "Gets or sets the intialization vector used to encrypt this message.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "messageId": {
          "description": "Gets or sets the message identifier.",
          "type": "integer",
          "format": "int64"
        },
        "messageType": {
          "description": "Gets or sets the message type, describing the data contract found in <c>TaskAgentMessage.Body</c>.",
          "type": "string"
        }
      }
    },
    "TaskAgentMinAgentVersionRequiredUpdate": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskAgentUpdateReason"
        }
      ],
      "properties": {
        "jobDefinition": {
          "$ref": "#/definitions/TaskOrchestrationOwner"
        },
        "jobOwner": {
          "$ref": "#/definitions/TaskOrchestrationOwner"
        },
        "minAgentVersion": {
          "$ref": "#/definitions/Demand"
        }
      }
    },
    "TaskAgentPool": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskAgentPoolReference"
        }
      ],
      "properties": {
        "autoProvision": {
          "description": "Gets or sets a value indicating whether or not a queue should be automatically provisioned for each project collection or not.",
          "type": "boolean"
        },
        "createdBy": {
          "description": "Gets the identity who created this pool. The creator of the pool is automatically added into the administrators group for the pool on creation.",
          "$ref": "#/definitions/IdentityRef"
        },
        "createdOn": {
          "description": "Gets the date/time of the pool creation.",
          "type": "string",
          "format": "date-time"
        },
        "owner": {
          "description": "Gets the identity who owns or administrates this pool.",
          "$ref": "#/definitions/IdentityRef"
        },
        "properties": {
          "$ref": "#/definitions/PropertiesCollection"
        }
      }
    },
    "TaskAgentPoolMaintenanceDefinition": {
      "description": "",
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Enable maintenance",
          "type": "boolean"
        },
        "id": {
          "description": "Id",
          "type": "integer",
          "format": "int32"
        },
        "jobTimeoutInMinutes": {
          "description": "Maintenance job timeout per agent",
          "type": "integer",
          "format": "int32"
        },
        "maxConcurrentAgentsPercentage": {
          "description": "Max percentage of agents within a pool running maintenance job at given time",
          "type": "integer",
          "format": "int32"
        },
        "options": {
          "$ref": "#/definitions/TaskAgentPoolMaintenanceOptions"
        },
        "pool": {
          "description": "Pool reference for the maintenance definition",
          "$ref": "#/definitions/TaskAgentPoolReference"
        },
        "retentionPolicy": {
          "$ref": "#/definitions/TaskAgentPoolMaintenanceRetentionPolicy"
        },
        "scheduleSetting": {
          "$ref": "#/definitions/TaskAgentPoolMaintenanceSchedule"
        }
      }
    },
    "TaskAgentPoolMaintenanceJob": {
      "description": "",
      "type": "object",
      "properties": {
        "definitionId": {
          "description": "The maintenance definition for the maintenance job",
          "type": "integer",
          "format": "int32"
        },
        "errorCount": {
          "description": "The total error counts during the maintenance job",
          "type": "integer",
          "format": "int32"
        },
        "finishTime": {
          "description": "Time that the maintenance job was completed",
          "type": "string",
          "format": "date-time"
        },
        "jobId": {
          "description": "Id of the maintenance job",
          "type": "integer",
          "format": "int32"
        },
        "logsDownloadUrl": {
          "description": "The log download url for the maintenance job",
          "type": "string"
        },
        "orchestrationId": {
          "description": "Orchestration/Plan Id for the maintenance job",
          "type": "string",
          "format": "uuid"
        },
        "pool": {
          "description": "Pool reference for the maintenance job",
          "$ref": "#/definitions/TaskAgentPoolReference"
        },
        "queueTime": {
          "description": "Time that the maintenance job was queued",
          "type": "string",
          "format": "date-time"
        },
        "requestedBy": {
          "description": "The identity that queued the maintenance job",
          "$ref": "#/definitions/IdentityRef"
        },
        "result": {
          "description": "The maintenance job result",
          "enum": [
            "succeeded",
            "failed",
            "canceled"
          ],
          "x-ms-enum": {
            "name": "TaskAgentPoolMaintenanceJobResult",
            "values": [
              {
                "value": "succeeded",
                "description": ""
              },
              {
                "value": "failed",
                "description": ""
              },
              {
                "value": "canceled",
                "description": ""
              }
            ]
          }
        },
        "startTime": {
          "description": "Time that the maintenance job was started",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "Status of the maintenance job",
          "enum": [
            "inProgress",
            "completed",
            "cancelling",
            "queued"
          ],
          "x-ms-enum": {
            "name": "TaskAgentPoolMaintenanceJobStatus",
            "values": [
              {
                "value": "inProgress",
                "description": ""
              },
              {
                "value": "completed",
                "description": ""
              },
              {
                "value": "cancelling",
                "description": ""
              },
              {
                "value": "queued",
                "description": ""
              }
            ]
          }
        },
        "targetAgents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskAgentPoolMaintenanceJobTargetAgent"
          }
        },
        "warningCount": {
          "description": "The total warning counts during the maintenance job",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TaskAgentPoolMaintenanceJobTargetAgent": {
      "description": "",
      "type": "object",
      "properties": {
        "agent": {
          "$ref": "#/definitions/TaskAgentReference"
        },
        "jobId": {
          "type": "integer",
          "format": "int32"
        },
        "result": {
          "enum": [
            "succeeded",
            "failed",
            "canceled"
          ],
          "x-ms-enum": {
            "name": "TaskAgentPoolMaintenanceJobResult",
            "values": [
              {
                "value": "succeeded",
                "description": ""
              },
              {
                "value": "failed",
                "description": ""
              },
              {
                "value": "canceled",
                "description": ""
              }
            ]
          }
        },
        "status": {
          "enum": [
            "inProgress",
            "completed",
            "cancelling",
            "queued"
          ],
          "x-ms-enum": {
            "name": "TaskAgentPoolMaintenanceJobStatus",
            "values": [
              {
                "value": "inProgress",
                "description": ""
              },
              {
                "value": "completed",
                "description": ""
              },
              {
                "value": "cancelling",
                "description": ""
              },
              {
                "value": "queued",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "TaskAgentPoolMaintenanceOptions": {
      "description": "",
      "type": "object",
      "properties": {
        "workingDirectoryExpirationInDays": {
          "description": "time to consider a System.DefaultWorkingDirectory is stale",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TaskAgentPoolMaintenanceRetentionPolicy": {
      "description": "",
      "type": "object",
      "properties": {
        "numberOfHistoryRecordsToKeep": {
          "description": "Number of records to keep for maintenance job executed with this definition.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TaskAgentPoolMaintenanceSchedule": {
      "description": "",
      "type": "object",
      "properties": {
        "daysToBuild": {
          "description": "Days for a build (flags enum for days of the week)",
          "enum": [
            "none",
            "monday",
            "tuesday",
            "wednesday",
            "thursday",
            "friday",
            "saturday",
            "sunday",
            "all"
          ],
          "x-ms-enum": {
            "name": "TaskAgentPoolMaintenanceScheduleDays",
            "values": [
              {
                "value": "none",
                "description": "Do not run."
              },
              {
                "value": "monday",
                "description": "Run on Monday."
              },
              {
                "value": "tuesday",
                "description": "Run on Tuesday."
              },
              {
                "value": "wednesday",
                "description": "Run on Wednesday."
              },
              {
                "value": "thursday",
                "description": "Run on Thursday."
              },
              {
                "value": "friday",
                "description": "Run on Friday."
              },
              {
                "value": "saturday",
                "description": "Run on Saturday."
              },
              {
                "value": "sunday",
                "description": "Run on Sunday."
              },
              {
                "value": "all",
                "description": "Run on all days of the week."
              }
            ]
          }
        },
        "scheduleJobId": {
          "description": "The Job Id of the Scheduled job that will queue the pool maintenance job.",
          "type": "string",
          "format": "uuid"
        },
        "startHours": {
          "description": "Local timezone hour to start",
          "type": "integer",
          "format": "int32"
        },
        "startMinutes": {
          "description": "Local timezone minute to start",
          "type": "integer",
          "format": "int32"
        },
        "timeZoneId": {
          "description": "Time zone of the build schedule (string representation of the time zone id)",
          "type": "string"
        }
      }
    },
    "TaskAgentPoolReference": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isHosted": {
          "description": "Gets or sets a value indicating whether or not this pool is managed by the service.",
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "poolType": {
          "description": "Gets or sets the type of the pool",
          "enum": [
            "automation",
            "deployment"
          ],
          "x-ms-enum": {
            "name": "TaskAgentPoolType",
            "values": [
              {
                "value": "automation",
                "description": ""
              },
              {
                "value": "deployment",
                "description": ""
              }
            ]
          }
        },
        "scope": {
          "type": "string",
          "format": "uuid"
        },
        "size": {
          "description": "Gets the current size of the pool.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TaskAgentPoolSummary": {
      "description": "",
      "type": "object",
      "properties": {
        "columnsHeader": {
          "$ref": "#/definitions/MetricsColumnsHeader"
        },
        "deploymentGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentGroupReference"
          }
        },
        "pool": {
          "$ref": "#/definitions/TaskAgentPoolReference"
        },
        "queues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskAgentQueue"
          }
        },
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricsRow"
          }
        }
      }
    },
    "TaskAgentPublicKey": {
      "description": "Represents the public key portion of an RSA asymmetric key.",
      "type": "object",
      "properties": {
        "exponent": {
          "description": "Gets or sets the exponent for the public key.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "modulus": {
          "description": "Gets or sets the modulus for the public key.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "TaskAgentQueue": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of the queue",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name of the queue",
          "type": "string"
        },
        "pool": {
          "description": "Pool reference for this queue",
          "$ref": "#/definitions/TaskAgentPoolReference"
        },
        "projectId": {
          "description": "Project Id",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "TaskAgentReference": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "enabled": {
          "description": "Gets or sets a value indicating whether or not this agent should be enabled for job execution.",
          "type": "boolean"
        },
        "id": {
          "description": "Gets the identifier of the agent.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Gets the name of the agent.",
          "type": "string"
        },
        "oSDescription": {
          "description": "Gets the OS of the agent.",
          "type": "string"
        },
        "status": {
          "description": "Gets the current connectivity status of the agent.",
          "enum": [
            "offline",
            "online"
          ],
          "x-ms-enum": {
            "name": "TaskAgentStatus",
            "values": [
              {
                "value": "offline",
                "description": ""
              },
              {
                "value": "online",
                "description": ""
              }
            ]
          }
        },
        "version": {
          "description": "Gets the version of the agent.",
          "type": "string"
        }
      }
    },
    "TaskAgentSession": {
      "description": "Represents a session for performing message exchanges from an agent.",
      "type": "object",
      "properties": {
        "agent": {
          "description": "Gets or sets the agent which is the target of the session.",
          "$ref": "#/definitions/TaskAgentReference"
        },
        "encryptionKey": {
          "description": "Gets the key used to encrypt message traffic for this session.",
          "$ref": "#/definitions/TaskAgentSessionKey"
        },
        "ownerName": {
          "description": "Gets or sets the owner name of this session. Generally this will be the machine of origination.",
          "type": "string"
        },
        "sessionId": {
          "description": "Gets the unique identifier for this session.",
          "type": "string",
          "format": "uuid"
        },
        "systemCapabilities": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TaskAgentSessionKey": {
      "description": "Represents a symmetric key used for message-level encryption for communication sent to an agent.",
      "type": "object",
      "properties": {
        "encrypted": {
          "description": "Gets or sets a value indicating whether or not the key value is encrypted. If this value is true, the Value property should be decrypted using the <c>RSA</c> key exchanged with the server during registration.",
          "type": "boolean"
        },
        "value": {
          "description": "Gets or sets the symmetric key value.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "TaskAgentUpdate": {
      "description": "",
      "type": "object",
      "properties": {
        "currentState": {
          "description": "The current state of this agent update",
          "type": "string"
        },
        "reason": {
          "description": "The reason of this agent update",
          "$ref": "#/definitions/TaskAgentUpdateReason"
        },
        "requestedBy": {
          "description": "The identity that request the agent update",
          "$ref": "#/definitions/IdentityRef"
        },
        "requestTime": {
          "description": "Gets the date on which this agent update was requested.",
          "type": "string",
          "format": "date-time"
        },
        "sourceVersion": {
          "description": "Gets or sets the source agent version of the agent update",
          "$ref": "#/definitions/PackageVersion"
        },
        "targetVersion": {
          "description": "Gets or sets the target agent version of the agent update",
          "$ref": "#/definitions/PackageVersion"
        }
      }
    },
    "TaskAgentUpdateReason": {
      "description": "",
      "type": "object",
      "properties": {
        "code": {
          "enum": [
            "manual",
            "minAgentVersionRequired"
          ],
          "x-ms-enum": {
            "name": "TaskAgentUpdateReasonType",
            "values": [
              {
                "value": "manual",
                "description": ""
              },
              {
                "value": "minAgentVersionRequired",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "TaskAssignedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskEvent"
        }
      ],
      "properties": {}
    },
    "TaskAttachment": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "lastChangedBy": {
          "type": "string",
          "format": "uuid"
        },
        "lastChangedOn": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "recordId": {
          "type": "string",
          "format": "uuid"
        },
        "timelineId": {
          "type": "string",
          "format": "uuid"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "TaskCompletedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskEvent"
        }
      ],
      "properties": {
        "result": {
          "enum": [
            "succeeded",
            "succeededWithIssues",
            "failed",
            "canceled",
            "skipped",
            "abandoned"
          ],
          "x-ms-enum": {
            "name": "TaskResult",
            "values": [
              {
                "value": "succeeded",
                "description": ""
              },
              {
                "value": "succeededWithIssues",
                "description": ""
              },
              {
                "value": "failed",
                "description": ""
              },
              {
                "value": "canceled",
                "description": ""
              },
              {
                "value": "skipped",
                "description": ""
              },
              {
                "value": "abandoned",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "TaskDefinition": {
      "description": "",
      "type": "object",
      "properties": {
        "agentExecution": {
          "$ref": "#/definitions/TaskExecution"
        },
        "author": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "contentsUploaded": {
          "type": "boolean"
        },
        "contributionIdentifier": {
          "type": "string"
        },
        "contributionVersion": {
          "type": "string"
        },
        "dataSourceBindings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataSourceBinding"
          }
        },
        "definitionType": {
          "type": "string"
        },
        "demands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Demand"
          }
        },
        "deprecated": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "execution": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JObject"
          }
        },
        "friendlyName": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskGroupDefinition"
          }
        },
        "helpMarkDown": {
          "type": "string"
        },
        "hostType": {
          "type": "string"
        },
        "iconUrl": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskInputDefinition"
          }
        },
        "instanceNameFormat": {
          "type": "string"
        },
        "minimumAgentVersion": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "outputVariables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskOutputVariable"
          }
        },
        "packageLocation": {
          "type": "string"
        },
        "packageType": {
          "type": "string"
        },
        "preview": {
          "type": "boolean"
        },
        "releaseNotes": {
          "type": "string"
        },
        "runsOn": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "satisfies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "serverOwned": {
          "type": "boolean"
        },
        "sourceDefinitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskSourceDefinition"
          }
        },
        "sourceLocation": {
          "type": "string"
        },
        "version": {
          "$ref": "#/definitions/TaskVersion"
        },
        "visibility": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TaskDefinitionEndpoint": {
      "description": "",
      "type": "object",
      "properties": {
        "connectionId": {
          "description": "An ID that identifies a service connection to be used for authenticating endpoint requests.",
          "type": "string"
        },
        "keySelector": {
          "description": "An Json based keyselector to filter response returned by fetching the endpoint <c>Url</c>.A Json based keyselector must be prefixed with \"jsonpath:\". KeySelector can be used to specify the filter to get the keys for the values specified with Selector. <example> The following keyselector defines an Json for extracting nodes named 'ServiceName'. <code> endpoint.KeySelector = \"jsonpath://ServiceName\"; </code></example>",
          "type": "string"
        },
        "scope": {
          "description": "The scope as understood by Connected Services. Essentialy, a project-id for now.",
          "type": "string"
        },
        "selector": {
          "description": "An XPath/Json based selector to filter response returned by fetching the endpoint <c>Url</c>. An XPath based selector must be prefixed with the string \"xpath:\". A Json based selector must be prefixed with \"jsonpath:\". <example> The following selector defines an XPath for extracting nodes named 'ServiceName'. <code> endpoint.Selector = \"xpath://ServiceName\"; </code></example>",
          "type": "string"
        },
        "taskId": {
          "description": "TaskId that this endpoint belongs to.",
          "type": "string"
        },
        "url": {
          "description": "URL to GET.",
          "type": "string"
        }
      }
    },
    "TaskDefinitionReference": {
      "description": "",
      "type": "object",
      "properties": {
        "definitionType": {
          "description": "Gets or sets the definition type. Values can be 'task' or 'metaTask'.",
          "type": "string"
        },
        "id": {
          "description": "Gets or sets the unique identifier of task.",
          "type": "string",
          "format": "uuid"
        },
        "versionSpec": {
          "description": "Gets or sets the version specification of task.",
          "type": "string"
        }
      }
    },
    "TaskEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JobEvent"
        }
      ],
      "properties": {
        "taskId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "TaskExecution": {
      "description": "",
      "type": "object",
      "properties": {
        "execTask": {
          "description": "The utility task to run.  Specifying this means that this task definition is simply a meta task to call another task. This is useful for tasks that call utility tasks like powershell and commandline",
          "$ref": "#/definitions/TaskReference"
        },
        "platformInstructions": {
          "description": "If a task is going to run code, then this provides the type/script etc... information by platform. For example, it might look like. net45: { typeName: \"Microsoft.TeamFoundation.Automation.Tasks.PowerShellTask\", assemblyName: \"Microsoft.TeamFoundation.Automation.Tasks.PowerShell.dll\" } net20: { typeName: \"Microsoft.TeamFoundation.Automation.Tasks.PowerShellTask\", assemblyName: \"Microsoft.TeamFoundation.Automation.Tasks.PowerShell.dll\" } java: { jar: \"powershelltask.tasks.automation.teamfoundation.microsoft.com\", } node: { script: \"powershellhost.js\", }",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      }
    },
    "TaskGroup": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskDefinition"
        }
      ],
      "properties": {
        "comment": {
          "description": "Gets or sets comment.",
          "type": "string"
        },
        "createdBy": {
          "description": "Gets or sets the identity who created.",
          "$ref": "#/definitions/IdentityRef"
        },
        "createdOn": {
          "description": "Gets or sets date on which it got created.",
          "type": "string",
          "format": "date-time"
        },
        "deleted": {
          "description": "Gets or sets as 'true' to indicate as deleted, 'false' otherwise.",
          "type": "boolean"
        },
        "modifiedBy": {
          "description": "Gets or sets the identity who modified.",
          "$ref": "#/definitions/IdentityRef"
        },
        "modifiedOn": {
          "description": "Gets or sets date on which it got modified.",
          "type": "string",
          "format": "date-time"
        },
        "owner": {
          "description": "Gets or sets the owner.",
          "type": "string"
        },
        "parentDefinitionId": {
          "description": "Gets or sets parent task group Id. This is used while creating a draft task group.",
          "type": "string",
          "format": "uuid"
        },
        "revision": {
          "description": "Gets or sets revision.",
          "type": "integer",
          "format": "int32"
        },
        "tasks": {
          "description": "Gets or sets the tasks.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskGroupStep"
          }
        }
      }
    },
    "TaskGroupCreateParameter": {
      "description": "",
      "type": "object",
      "properties": {
        "author": {
          "description": "Sets author name of the task group.",
          "type": "string"
        },
        "category": {
          "description": "Sets category of the task group.",
          "type": "string"
        },
        "description": {
          "description": "Sets description of the task group.",
          "type": "string"
        },
        "friendlyName": {
          "description": "Sets friendly name of the task group.",
          "type": "string"
        },
        "iconUrl": {
          "description": "Sets url icon of the task group.",
          "type": "string"
        },
        "inputs": {
          "description": "Sets input for the task group.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskInputDefinition"
          }
        },
        "instanceNameFormat": {
          "description": "Sets display name of the task group.",
          "type": "string"
        },
        "name": {
          "description": "Sets name of the task group.",
          "type": "string"
        },
        "parentDefinitionId": {
          "description": "Sets parent task group Id. This is used while creating a draft task group.",
          "type": "string",
          "format": "uuid"
        },
        "runsOn": {
          "description": "Sets RunsOn of the task group. Value can be 'Agent', 'Server' or 'DeploymentGroup'.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tasks": {
          "description": "Sets tasks for the task group.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskGroupStep"
          }
        },
        "version": {
          "description": "Sets version of the task group.",
          "$ref": "#/definitions/TaskVersion"
        }
      }
    },
    "TaskGroupDefinition": {
      "description": "",
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "isExpanded": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "visibleRule": {
          "type": "string"
        }
      }
    },
    "TaskGroupRevision": {
      "description": "",
      "type": "object",
      "properties": {
        "changedBy": {
          "$ref": "#/definitions/IdentityRef"
        },
        "changedDate": {
          "type": "string",
          "format": "date-time"
        },
        "changeType": {
          "enum": [
            "add",
            "update",
            "delete",
            "undelete"
          ],
          "x-ms-enum": {
            "name": "AuditAction",
            "values": [
              {
                "value": "add",
                "description": ""
              },
              {
                "value": "update",
                "description": ""
              },
              {
                "value": "delete",
                "description": ""
              },
              {
                "value": "undelete",
                "description": ""
              }
            ]
          }
        },
        "comment": {
          "type": "string"
        },
        "fileId": {
          "type": "integer",
          "format": "int32"
        },
        "revision": {
          "type": "integer",
          "format": "int32"
        },
        "taskGroupId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "TaskGroupStep": {
      "description": "Represents tasks in the task group.",
      "type": "object",
      "properties": {
        "alwaysRun": {
          "description": "Gets or sets as 'true' to run the task always, 'false' otherwise.",
          "type": "boolean"
        },
        "condition": {
          "description": "Gets or sets condition for the task.",
          "type": "string"
        },
        "continueOnError": {
          "description": "Gets or sets as 'true' to continue on error, 'false' otherwise.",
          "type": "boolean"
        },
        "displayName": {
          "description": "Gets or sets the display name.",
          "type": "string"
        },
        "enabled": {
          "description": "Gets or sets as task is enabled or not.",
          "type": "boolean"
        },
        "inputs": {
          "description": "Gets or sets dictionary of inputs.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "task": {
          "description": "Gets or sets the reference of the task.",
          "$ref": "#/definitions/TaskDefinitionReference"
        },
        "timeoutInMinutes": {
          "description": "Gets or sets the maximum time, in minutes, that a task is allowed to execute on agent before being cancelled by server. A zero value indicates an infinite timeout.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TaskGroupUpdateParameter": {
      "description": "",
      "type": "object",
      "properties": {
        "author": {
          "description": "Sets author name of the task group.",
          "type": "string"
        },
        "category": {
          "description": "Sets category of the task group.",
          "type": "string"
        },
        "comment": {
          "description": "Sets comment of the task group.",
          "type": "string"
        },
        "description": {
          "description": "Sets description of the task group.",
          "type": "string"
        },
        "friendlyName": {
          "description": "Sets friendly name of the task group.",
          "type": "string"
        },
        "iconUrl": {
          "description": "Sets url icon of the task group.",
          "type": "string"
        },
        "id": {
          "description": "Sets the unique identifier of this field.",
          "type": "string",
          "format": "uuid"
        },
        "inputs": {
          "description": "Sets input for the task group.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskInputDefinition"
          }
        },
        "instanceNameFormat": {
          "description": "Sets display name of the task group.",
          "type": "string"
        },
        "name": {
          "description": "Sets name of the task group.",
          "type": "string"
        },
        "parentDefinitionId": {
          "description": "Gets or sets parent task group Id. This is used while creating a draft task group.",
          "type": "string",
          "format": "uuid"
        },
        "revision": {
          "description": "Sets revision of the task group.",
          "type": "integer",
          "format": "int32"
        },
        "runsOn": {
          "description": "Sets RunsOn of the task group. Value can be 'Agent', 'Server' or 'DeploymentGroup'.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tasks": {
          "description": "Sets tasks for the task group.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskGroupStep"
          }
        },
        "version": {
          "description": "Sets version of the task group.",
          "$ref": "#/definitions/TaskVersion"
        }
      }
    },
    "TaskHubLicenseDetails": {
      "description": "",
      "type": "object",
      "properties": {
        "enterpriseUsersCount": {
          "type": "integer",
          "format": "int32"
        },
        "freeHostedLicenseCount": {
          "type": "integer",
          "format": "int32"
        },
        "freeLicenseCount": {
          "type": "integer",
          "format": "int32"
        },
        "hasLicenseCountEverUpdated": {
          "type": "boolean"
        },
        "hostedAgentMinutesFreeCount": {
          "type": "integer",
          "format": "int32"
        },
        "hostedAgentMinutesUsedCount": {
          "type": "integer",
          "format": "int32"
        },
        "msdnUsersCount": {
          "type": "integer",
          "format": "int32"
        },
        "purchasedHostedLicenseCount": {
          "type": "integer",
          "format": "int32"
        },
        "purchasedLicenseCount": {
          "type": "integer",
          "format": "int32"
        },
        "totalLicenseCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TaskInputDefinition": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskInputDefinitionBase"
        }
      ],
      "properties": {}
    },
    "TaskInputDefinitionBase": {
      "description": "",
      "type": "object",
      "properties": {
        "aliases": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultValue": {
          "type": "string"
        },
        "groupName": {
          "type": "string"
        },
        "helpMarkDown": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "options": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "required": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        },
        "validation": {
          "$ref": "#/definitions/TaskInputValidation"
        },
        "visibleRule": {
          "type": "string"
        }
      }
    },
    "TaskInputValidation": {
      "description": "",
      "type": "object",
      "properties": {
        "expression": {
          "description": "Conditional expression",
          "type": "string"
        },
        "message": {
          "description": "Message explaining how user can correct if validation fails",
          "type": "string"
        }
      }
    },
    "TaskInstance": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskReference"
        }
      ],
      "properties": {
        "alwaysRun": {
          "type": "boolean"
        },
        "condition": {
          "type": "string"
        },
        "continueOnError": {
          "type": "boolean"
        },
        "displayName": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "environment": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "instanceId": {
          "type": "string",
          "format": "uuid"
        },
        "refName": {
          "type": "string"
        },
        "timeoutInMinutes": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TaskLog": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskLogReference"
        }
      ],
      "properties": {
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "indexLocation": {
          "type": "string"
        },
        "lastChangedOn": {
          "type": "string",
          "format": "date-time"
        },
        "lineCount": {
          "type": "integer",
          "format": "int64"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "TaskLogReference": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "location": {
          "type": "string"
        }
      }
    },
    "TaskOrchestrationContainer": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskOrchestrationItem"
        }
      ],
      "properties": {
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskOrchestrationItem"
          }
        },
        "continueOnError": {
          "type": "boolean"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "maxConcurrency": {
          "type": "integer",
          "format": "int32"
        },
        "parallel": {
          "type": "boolean"
        },
        "rollback": {
          "$ref": "#/definitions/TaskOrchestrationContainer"
        }
      }
    },
    "TaskOrchestrationItem": {
      "description": "",
      "type": "object",
      "properties": {
        "itemType": {
          "enum": [
            "container",
            "job"
          ],
          "x-ms-enum": {
            "name": "TaskOrchestrationItemType",
            "values": [
              {
                "value": "container",
                "description": ""
              },
              {
                "value": "job",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "TaskOrchestrationJob": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskOrchestrationItem"
        }
      ],
      "properties": {
        "demands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Demand"
          }
        },
        "executeAs": {
          "$ref": "#/definitions/IdentityRef"
        },
        "executionMode": {
          "type": "string"
        },
        "executionTimeout": {
          "type": "string",
          "format": "TimeSpan"
        },
        "instanceId": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "refName": {
          "type": "string"
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskInstance"
          }
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TaskOrchestrationOwner": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "TaskOrchestrationPlan": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskOrchestrationPlanReference"
        }
      ],
      "properties": {
        "environment": {
          "$ref": "#/definitions/PlanEnvironment"
        },
        "finishTime": {
          "type": "string",
          "format": "date-time"
        },
        "implementation": {
          "$ref": "#/definitions/TaskOrchestrationContainer"
        },
        "requestedById": {
          "type": "string",
          "format": "uuid"
        },
        "requestedForId": {
          "type": "string",
          "format": "uuid"
        },
        "result": {
          "enum": [
            "succeeded",
            "succeededWithIssues",
            "failed",
            "canceled",
            "skipped",
            "abandoned"
          ],
          "x-ms-enum": {
            "name": "TaskResult",
            "values": [
              {
                "value": "succeeded",
                "description": ""
              },
              {
                "value": "succeededWithIssues",
                "description": ""
              },
              {
                "value": "failed",
                "description": ""
              },
              {
                "value": "canceled",
                "description": ""
              },
              {
                "value": "skipped",
                "description": ""
              },
              {
                "value": "abandoned",
                "description": ""
              }
            ]
          }
        },
        "resultCode": {
          "type": "string"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "state": {
          "enum": [
            "inProgress",
            "queued",
            "completed"
          ],
          "x-ms-enum": {
            "name": "TaskOrchestrationPlanState",
            "values": [
              {
                "value": "inProgress",
                "description": ""
              },
              {
                "value": "queued",
                "description": ""
              },
              {
                "value": "completed",
                "description": ""
              }
            ]
          }
        },
        "timeline": {
          "$ref": "#/definitions/TimelineReference"
        }
      }
    },
    "TaskOrchestrationPlanGroup": {
      "description": "",
      "type": "object",
      "properties": {
        "planGroup": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/ProjectReference"
        },
        "runningRequests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskAgentJobRequest"
          }
        }
      }
    },
    "TaskOrchestrationPlanGroupsQueueMetrics": {
      "description": "",
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "enum": [
            "running",
            "queued",
            "all"
          ],
          "x-ms-enum": {
            "name": "PlanGroupStatus",
            "values": [
              {
                "value": "running",
                "description": ""
              },
              {
                "value": "queued",
                "description": ""
              },
              {
                "value": "all",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "TaskOrchestrationPlanReference": {
      "description": "",
      "type": "object",
      "properties": {
        "artifactLocation": {
          "type": "string"
        },
        "artifactUri": {
          "type": "string"
        },
        "definition": {
          "$ref": "#/definitions/TaskOrchestrationOwner"
        },
        "owner": {
          "$ref": "#/definitions/TaskOrchestrationOwner"
        },
        "planGroup": {
          "type": "string"
        },
        "planId": {
          "type": "string",
          "format": "uuid"
        },
        "planType": {
          "type": "string"
        },
        "scopeIdentifier": {
          "type": "string",
          "format": "uuid"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TaskOrchestrationQueuedPlan": {
      "description": "",
      "type": "object",
      "properties": {
        "assignTime": {
          "type": "string",
          "format": "date-time"
        },
        "definition": {
          "$ref": "#/definitions/TaskOrchestrationOwner"
        },
        "owner": {
          "$ref": "#/definitions/TaskOrchestrationOwner"
        },
        "planGroup": {
          "type": "string"
        },
        "planId": {
          "type": "string",
          "format": "uuid"
        },
        "poolId": {
          "type": "integer",
          "format": "int32"
        },
        "queuePosition": {
          "type": "integer",
          "format": "int32"
        },
        "queueTime": {
          "type": "string",
          "format": "date-time"
        },
        "scopeIdentifier": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "TaskOrchestrationQueuedPlanGroup": {
      "description": "",
      "type": "object",
      "properties": {
        "definition": {
          "$ref": "#/definitions/TaskOrchestrationOwner"
        },
        "owner": {
          "$ref": "#/definitions/TaskOrchestrationOwner"
        },
        "planGroup": {
          "type": "string"
        },
        "plans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskOrchestrationQueuedPlan"
          }
        },
        "project": {
          "$ref": "#/definitions/ProjectReference"
        },
        "queuePosition": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TaskOutputVariable": {
      "description": "",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "TaskPackageMetadata": {
      "description": "",
      "type": "object",
      "properties": {
        "type": {
          "description": "Gets the name of the package.",
          "type": "string"
        },
        "url": {
          "description": "Gets the url of the package.",
          "type": "string"
        },
        "version": {
          "description": "Gets the version of the package.",
          "type": "string"
        }
      }
    },
    "TaskReference": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "inputs": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "TaskSourceDefinition": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskSourceDefinitionBase"
        }
      ],
      "properties": {}
    },
    "TaskSourceDefinitionBase": {
      "description": "",
      "type": "object",
      "properties": {
        "authKey": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "keySelector": {
          "type": "string"
        },
        "selector": {
          "type": "string"
        },
        "target": {
          "type": "string"
        }
      }
    },
    "TaskStartedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskEvent"
        }
      ],
      "properties": {}
    },
    "TaskVersion": {
      "description": "",
      "type": "object",
      "properties": {
        "isTest": {
          "type": "boolean"
        },
        "major": {
          "type": "integer",
          "format": "int32"
        },
        "minor": {
          "type": "integer",
          "format": "int32"
        },
        "patch": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Timeline": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TimelineReference"
        }
      ],
      "properties": {
        "lastChangedBy": {
          "type": "string",
          "format": "uuid"
        },
        "lastChangedOn": {
          "type": "string",
          "format": "date-time"
        },
        "records": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimelineRecord"
          }
        }
      }
    },
    "TimelineRecord": {
      "description": "",
      "type": "object",
      "properties": {
        "changeId": {
          "type": "integer",
          "format": "int32"
        },
        "currentOperation": {
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/TimelineReference"
        },
        "errorCount": {
          "type": "integer",
          "format": "int32"
        },
        "finishTime": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "issues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Issue"
          }
        },
        "lastModified": {
          "type": "string",
          "format": "date-time"
        },
        "location": {
          "type": "string"
        },
        "log": {
          "$ref": "#/definitions/TaskLogReference"
        },
        "name": {
          "type": "string"
        },
        "order": {
          "type": "integer",
          "format": "int32"
        },
        "parentId": {
          "type": "string",
          "format": "uuid"
        },
        "percentComplete": {
          "type": "integer",
          "format": "int32"
        },
        "refName": {
          "type": "string"
        },
        "result": {
          "enum": [
            "succeeded",
            "succeededWithIssues",
            "failed",
            "canceled",
            "skipped",
            "abandoned"
          ],
          "x-ms-enum": {
            "name": "TaskResult",
            "values": [
              {
                "value": "succeeded",
                "description": ""
              },
              {
                "value": "succeededWithIssues",
                "description": ""
              },
              {
                "value": "failed",
                "description": ""
              },
              {
                "value": "canceled",
                "description": ""
              },
              {
                "value": "skipped",
                "description": ""
              },
              {
                "value": "abandoned",
                "description": ""
              }
            ]
          }
        },
        "resultCode": {
          "type": "string"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "state": {
          "enum": [
            "pending",
            "inProgress",
            "completed"
          ],
          "x-ms-enum": {
            "name": "TimelineRecordState",
            "values": [
              {
                "value": "pending",
                "description": ""
              },
              {
                "value": "inProgress",
                "description": ""
              },
              {
                "value": "completed",
                "description": ""
              }
            ]
          }
        },
        "task": {
          "$ref": "#/definitions/TaskReference"
        },
        "type": {
          "type": "string"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/VariableValue"
          }
        },
        "warningCount": {
          "type": "integer",
          "format": "int32"
        },
        "workerName": {
          "type": "string"
        }
      }
    },
    "TimelineReference": {
      "description": "",
      "type": "object",
      "properties": {
        "changeId": {
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "location": {
          "type": "string"
        }
      }
    },
    "ValidationItem": {
      "description": "",
      "type": "object",
      "properties": {
        "isValid": {
          "description": "Tells whether the current input is valid or not",
          "type": "boolean"
        },
        "reason": {
          "description": "Reason for input validation failure",
          "type": "string"
        },
        "type": {
          "description": "Type of validation item",
          "type": "string"
        },
        "value": {
          "description": "Value to validate. The conditional expression to validate for the input for \"expression\" type Eg:eq(variables['Build.SourceBranch'], 'refs/heads/master');eq(value, 'refs/heads/master')",
          "type": "string"
        }
      }
    },
    "VariableGroup": {
      "description": "A variable group is a collection of related variables.",
      "type": "object",
      "properties": {
        "createdBy": {
          "description": "Gets or sets the identity who created the variable group.",
          "$ref": "#/definitions/IdentityRef"
        },
        "createdOn": {
          "description": "Gets or sets the time when variable group was created.",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "Gets or sets description of the variable group.",
          "type": "string"
        },
        "id": {
          "description": "Gets or sets id of the variable group.",
          "type": "integer",
          "format": "int32"
        },
        "modifiedBy": {
          "description": "Gets or sets the identity who modified the variable group.",
          "$ref": "#/definitions/IdentityRef"
        },
        "modifiedOn": {
          "description": "Gets or sets the time when variable group was modified",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "Gets or sets name of the variable group.",
          "type": "string"
        },
        "providerData": {
          "description": "Gets or sets provider data.",
          "$ref": "#/definitions/VariableGroupProviderData"
        },
        "type": {
          "description": "Gets or sets type of the variable group.",
          "type": "string"
        },
        "variables": {
          "description": "Gets or sets variables contained in the variable group.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/VariableValue"
          }
        }
      }
    },
    "VariableGroupParameters": {
      "description": "",
      "type": "object",
      "properties": {
        "description": {
          "description": "Sets description of the variable group.",
          "type": "string"
        },
        "name": {
          "description": "Sets name of the variable group.",
          "type": "string"
        },
        "providerData": {
          "description": "Sets provider data.",
          "$ref": "#/definitions/VariableGroupProviderData"
        },
        "type": {
          "description": "Sets type of the variable group.",
          "type": "string"
        },
        "variables": {
          "description": "Sets variables contained in the variable group.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/VariableValue"
          }
        }
      }
    },
    "VariableGroupProviderData": {
      "description": "Defines provider data of the variable group.",
      "type": "object",
      "properties": {}
    },
    "VariableValue": {
      "description": "",
      "type": "object",
      "properties": {
        "isSecret": {
          "type": "boolean"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "VssJsonCollectionWrapper": {
      "description": "This class is used to serialized collections as a single JSON object on the wire, to avoid serializing JSON arrays directly to the client, which can be a security hole",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/VssJsonCollectionWrapperBase"
        }
      ],
      "properties": {
        "value": {
          "type": "string",
          "format": "T"
        }
      }
    },
    "VssJsonCollectionWrapperBase": {
      "description": "",
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        }
      }
    }
  },
  "parameters": {
    "api-Version": {
      "name": "api-version",
      "in": "query",
      "description": "Version of the API to use.  This should be set to '4.1' to use this version of the api.",
      "required": true,
      "type": "string"
    },
    "api-Version-preview.1": {
      "name": "api-version",
      "in": "query",
      "description": "Version of the API to use.  This should be set to '4.1-preview.1' to use this version of the api.",
      "required": true,
      "type": "string"
    },
    "api-Version-preview.2": {
      "name": "api-version",
      "in": "query",
      "description": "Version of the API to use.  This should be set to '4.1-preview.2' to use this version of the api.",
      "required": true,
      "type": "string"
    }
  },
  "securityDefinitions": {
    "accessToken": {
      "type": "basic",
      "description": "Personal access token. Use any value for the user name and the token as the password."
    },
    "oauth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://app.vssps.visualstudio.com/oauth2/authorize&response_type=Assertion",
      "tokenUrl": "https://app.vssps.visualstudio.com/oauth2/token?client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer&grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer",
      "scopes": {
        "vso.agentpools": "Grants the ability to view tasks, pools, queues, agents, and currently running or recently completed jobs for agents",
        "vso.agentpools_manage": "Grants the ability to manage pools, queues, and agents",
        "vso.serviceendpoint": "Grants the ability to read service endpoints.",
        "vso.serviceendpoint_manage": "Grants the ability to read, query and manage service endpoints.",
        "vso.serviceendpoint_query": "Grants the ability to read and query service endpoints.",
        "vso.machinegroup_manage": "Provides ability to manage deployment group and agent pools",
        "vso.taskgroups_manage": "Grants the ability to read, create and manage taskgroups.",
        "vso.taskgroups_read": "Grants the ability to read task groups",
        "vso.taskgroups_write": "Grants the ability to read and create task groups"
      }
    }
  },
  "security": [
    {
      "accessToken": []
    }
  ],
  "externalDocs": {
    "description": "Team Foundation Server REST APIs",
    "url": "https://aka.ms/azure-devops-rest-apis"
  }
}