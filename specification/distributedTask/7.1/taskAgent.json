{
  "swagger": "2.0",
  "info": {
    "title": "TaskAgent",
    "description": "",
    "termsOfService": "https://go.microsoft.com/fwlink/?LinkId=329770",
    "contact": {
      "name": "nugetvss",
      "email": "nugetvss@microsoft.com"
    },
    "license": {
      "name": "MICROSOFT SOFTWARE LICENSE TERMS",
      "url": "https://go.microsoft.com/fwlink/?LinkId=329770"
    },
    "version": "7.1"
  },
  "host": "dev.azure.com",
  "x-ms-vss-area": "TaskAgent",
  "x-ms-vss-resource-area-id": "a85b8835-c1a1-4aac-ae97-1c3d0ba72dbd",
  "basePath": "/",
  "tags": [
    {
      "name": "Agentclouds"
    },
    {
      "name": "Agentcloudtypes"
    },
    {
      "name": "Agents",
      "description": "Agents run jobs in pipelines."
    },
    {
      "name": "Deploymentgroups"
    },
    {
      "name": "Environmentdeployment Records"
    },
    {
      "name": "Environments"
    },
    {
      "name": "Kubernetes"
    },
    {
      "name": "Pools",
      "description": "Agent pools offer up agents at the organization level."
    },
    {
      "name": "Queues",
      "description": "Queues (called \"pools\" in the UI) connect projects to agent pools."
    },
    {
      "name": "Requests"
    },
    {
      "name": "Targets"
    },
    {
      "name": "Taskgroups"
    },
    {
      "name": "Variablegroups"
    },
    {
      "name": "Yamlschema"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/{organization}/_apis/distributedtask/agentclouds": {
      "post": {
        "tags": [
          "Agentclouds"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "agentclouds",
        "x-ms-vss-method": "AddAgentCloud",
        "description": "",
        "operationId": "Agentclouds_Add",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskAgentCloud"
            }
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TaskAgentCloud"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools_manage"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Agentclouds"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "agentclouds",
        "x-ms-vss-method": "GetAgentClouds",
        "description": "",
        "operationId": "Agentclouds_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskAgentCloud"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools"
            ]
          }
        ]
      }
    },
    "/{organization}/_apis/distributedtask/agentclouds/{agentCloudId}": {
      "delete": {
        "tags": [
          "Agentclouds"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "agentclouds",
        "x-ms-vss-method": "DeleteAgentCloud",
        "description": "",
        "operationId": "Agentclouds_Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "agentCloudId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TaskAgentCloud"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools_manage"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Agentclouds"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "agentclouds",
        "x-ms-vss-method": "GetAgentCloud",
        "description": "",
        "operationId": "Agentclouds_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "agentCloudId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TaskAgentCloud"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Agentclouds"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "agentclouds",
        "x-ms-vss-method": "UpdateAgentCloud",
        "description": "",
        "operationId": "Agentclouds_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskAgentCloud"
            }
          },
          {
            "in": "path",
            "name": "agentCloudId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TaskAgentCloud"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools_manage"
            ]
          }
        ]
      }
    },
    "/{organization}/_apis/distributedtask/agentclouds/{agentCloudId}/requests": {
      "get": {
        "tags": [
          "Requests"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "requests",
        "x-ms-vss-method": "GetAgentCloudRequests",
        "description": "",
        "operationId": "Requests_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "agentCloudId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskAgentCloudRequest"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools"
            ]
          }
        ]
      }
    },
    "/{organization}/_apis/distributedtask/agentcloudtypes": {
      "get": {
        "tags": [
          "Agentcloudtypes"
        ],
        "x-ms-docs-override-version": "7.1-preview.1",
        "x-ms-vss-resource": "agentcloudtypes",
        "x-ms-vss-method": "GetAgentCloudTypes",
        "x-ms-preview": true,
        "description": "Get agent cloud types.",
        "operationId": "Agentcloudtypes_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskAgentCloudType"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools"
            ]
          }
        ]
      }
    },
    "/{organization}/_apis/distributedtask/pools": {
      "post": {
        "tags": [
          "Pools"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pools",
        "x-ms-vss-method": "AddAgentPool",
        "description": "Create an agent pool.",
        "operationId": "Pools_Add",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Details about the new agent pool",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskAgentPool"
            }
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TaskAgentPool"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools_manage"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Pools"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pools",
        "x-ms-vss-method": "GetAgentPoolsByIds",
        "description": "Get a list of agent pools.",
        "operationId": "Pools_Get Agent Pools By Ids",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "poolIds",
            "description": "pool Ids to fetch",
            "required": true,
            "type": "string",
            "format": "array (int32)"
          },
          {
            "in": "query",
            "name": "actionFilter",
            "description": "Filter by whether the calling user has use or manage permissions",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "manage",
              "use"
            ],
            "x-ms-enum": {
              "name": "TaskAgentPoolActionFilter",
              "values": [
                {
                  "value": "none",
                  "description": ""
                },
                {
                  "value": "manage",
                  "description": ""
                },
                {
                  "value": "use",
                  "description": ""
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskAgentPool"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools"
            ]
          }
        ]
      }
    },
    "/{organization}/_apis/distributedtask/pools/{poolId}": {
      "delete": {
        "tags": [
          "Pools"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pools",
        "x-ms-vss-method": "DeleteAgentPool",
        "description": "Delete an agent pool.",
        "operationId": "Pools_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "poolId",
            "description": "ID of the agent pool to delete",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools_manage"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Pools"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pools",
        "x-ms-vss-method": "GetAgentPool",
        "description": "Get information about an agent pool.",
        "operationId": "Pools_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "poolId",
            "description": "An agent pool ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "properties",
            "description": "Agent pool properties (comma-separated)",
            "required": false,
            "type": "string",
            "format": "array (string)"
          },
          {
            "in": "query",
            "name": "actionFilter",
            "description": "Filter by whether the calling user has use or manage permissions",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "manage",
              "use"
            ],
            "x-ms-enum": {
              "name": "TaskAgentPoolActionFilter",
              "values": [
                {
                  "value": "none",
                  "description": ""
                },
                {
                  "value": "manage",
                  "description": ""
                },
                {
                  "value": "use",
                  "description": ""
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TaskAgentPool"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Pools"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pools",
        "x-ms-vss-method": "UpdateAgentPool",
        "description": "Update properties on an agent pool",
        "operationId": "Pools_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated agent pool details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskAgentPool"
            }
          },
          {
            "in": "path",
            "name": "poolId",
            "description": "The agent pool to update",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TaskAgentPool"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools_manage"
            ]
          }
        ]
      }
    },
    "/{organization}/_apis/distributedtask/pools/{poolId}/agents": {
      "post": {
        "tags": [
          "Agents"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "agents",
        "x-ms-vss-method": "AddAgent",
        "description": "Adds an agent to a pool.  You probably don't want to call this endpoint directly. Instead, [configure an agent](https://docs.microsoft.com/azure/devops/pipelines/agents/agents) using the agent download package.",
        "operationId": "Agents_Add",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Details about the agent being added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskAgent"
            }
          },
          {
            "in": "path",
            "name": "poolId",
            "description": "The agent pool in which to add the agent",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TaskAgent"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools_manage"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Agents"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "agents",
        "x-ms-vss-method": "GetAgents",
        "description": "Get a list of agents.",
        "operationId": "Agents_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "poolId",
            "description": "The agent pool containing the agents",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "agentName",
            "description": "Filter on agent name",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "includeCapabilities",
            "description": "Whether to include the agents' capabilities in the response",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "includeAssignedRequest",
            "description": "Whether to include details about the agents' current work",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "includeLastCompletedRequest",
            "description": "Whether to include details about the agents' most recent completed work",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filter which custom properties will be returned",
            "required": false,
            "type": "string",
            "format": "array (string)"
          },
          {
            "in": "query",
            "name": "demands",
            "description": "Filter by demands the agents can satisfy",
            "required": false,
            "type": "string",
            "format": "array (string)"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskAgent"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools"
            ]
          }
        ]
      }
    },
    "/{organization}/_apis/distributedtask/pools/{poolId}/agents/{agentId}": {
      "delete": {
        "tags": [
          "Agents"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "agents",
        "x-ms-vss-method": "DeleteAgent",
        "description": "Delete an agent.  You probably don't want to call this endpoint directly. Instead, [use the agent configuration script](https://docs.microsoft.com/azure/devops/pipelines/agents/agents) to remove an agent from your organization.",
        "operationId": "Agents_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "poolId",
            "description": "The pool ID to remove the agent from",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "agentId",
            "description": "The agent ID to remove",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools_manage"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Agents"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "agents",
        "x-ms-vss-method": "GetPoolPermission",
        "description": "Get Permissions on Pool.",
        "operationId": "Agents_Get Pool Permission",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "poolId",
            "description": "The agent pool to use",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "agentId",
            "description": "The agent id to use",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "isCheckPermissions",
            "description": "To check the permissions",
            "required": true,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Agents"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "agents",
        "x-ms-vss-method": "ReplaceAgent",
        "description": "Replace an agent.  You probably don't want to call this endpoint directly. Instead, [use the agent configuration script](https://docs.microsoft.com/azure/devops/pipelines/agents/agents) to remove and reconfigure an agent from your organization.",
        "operationId": "Agents_Replace Agent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated details about the replacing agent",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskAgent"
            }
          },
          {
            "in": "path",
            "name": "poolId",
            "description": "The agent pool to use",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "agentId",
            "description": "The agent to replace",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TaskAgent"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools_manage"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Agents"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "agents",
        "x-ms-vss-method": "UpdateAgent",
        "description": "Update agent details.",
        "operationId": "Agents_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated details about the agent",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskAgent"
            }
          },
          {
            "in": "path",
            "name": "poolId",
            "description": "The agent pool to use",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "agentId",
            "description": "The agent to update",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TaskAgent"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools_manage"
            ]
          }
        ]
      }
    },
    "/{organization}/_apis/distributedtask/variablegroups": {
      "post": {
        "tags": [
          "Variablegroups"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "variablegroups",
        "x-ms-vss-method": "AddVariableGroup",
        "description": "Add a variable group.",
        "operationId": "Variablegroups_Add",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VariableGroupParameters"
            }
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VariableGroup"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.variablegroups_manage"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Variablegroups"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "variablegroups",
        "x-ms-vss-method": "ShareVariableGroup",
        "description": "Add a variable group.",
        "operationId": "Variablegroups_Share Variable Group",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableGroupProjectReference"
              }
            }
          },
          {
            "in": "query",
            "name": "variableGroupId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.variablegroups_manage"
            ]
          }
        ]
      }
    },
    "/{organization}/_apis/distributedtask/variablegroups/{groupId}": {
      "delete": {
        "tags": [
          "Variablegroups"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "variablegroups",
        "x-ms-vss-method": "DeleteVariableGroup",
        "description": "Delete a variable group",
        "operationId": "Variablegroups_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "Id of the variable group.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "projectIds",
            "description": "",
            "required": true,
            "type": "string",
            "format": "array (string)"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.variablegroups_manage"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Variablegroups"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "variablegroups",
        "x-ms-vss-method": "UpdateVariableGroup",
        "description": "Update a variable group.",
        "operationId": "Variablegroups_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VariableGroupParameters"
            }
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "Id of the variable group to update.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VariableGroup"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.variablegroups_manage"
            ]
          }
        ]
      }
    },
    "/{organization}/_apis/distributedtask/yamlschema": {
      "get": {
        "tags": [
          "Yamlschema"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "yamlschema",
        "x-ms-vss-method": "GetYamlSchema",
        "description": "GET the Yaml schema used for Yaml file validation.",
        "operationId": "Yamlschema_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "x-ms-required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "validateTaskNames",
            "description": "Whether the schema should validate that tasks are actually installed (useful for offline tools where you don't want validation).",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/distributedtask/deploymentgroups": {
      "post": {
        "tags": [
          "Deploymentgroups"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "deploymentgroups",
        "x-ms-vss-method": "AddDeploymentGroup",
        "description": "Create a deployment group.",
        "operationId": "Deploymentgroups_Add",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Deployment group to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeploymentGroupCreateParameter"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DeploymentGroup"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.machinegroup_manage"
            ]
          }
        ],
        "x-ms-examples": {
          "Create a deployment group": {
            "$ref": "./httpExamples/deploymentgroups/POST__distributedtask_DeploymentGroups.json"
          }
        }
      },
      "get": {
        "tags": [
          "Deploymentgroups"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "deploymentgroups",
        "x-ms-vss-method": "GetDeploymentGroups",
        "description": "Get a list of deployment groups by name or IDs.",
        "operationId": "Deploymentgroups_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "description": "Name of the deployment group.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "actionFilter",
            "description": "Get only deployment groups on which this action can be performed.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "manage",
              "use"
            ],
            "x-ms-enum": {
              "name": "DeploymentGroupActionFilter",
              "values": [
                {
                  "value": "none",
                  "description": "All deployment groups."
                },
                {
                  "value": "manage",
                  "description": "Only deployment groups for which caller has **manage** permission."
                },
                {
                  "value": "use",
                  "description": "Only deployment groups for which caller has **use** permission."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "Include these additional details in the returned objects.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "machines",
              "tags"
            ],
            "x-ms-enum": {
              "name": "DeploymentGroupExpands",
              "values": [
                {
                  "value": "none",
                  "description": "No additional properties."
                },
                {
                  "value": "machines",
                  "description": "Deprecated: Include all the deployment targets."
                },
                {
                  "value": "tags",
                  "description": "Include unique list of tags across all deployment targets."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "Get deployment groups with names greater than this continuationToken lexicographically.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "Maximum number of deployment groups to return. Default is **1000**.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "Comma separated list of IDs of the deployment groups.",
            "required": false,
            "type": "string",
            "format": "array (int32)"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeploymentGroup"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.machinegroup_manage"
            ]
          }
        ],
        "x-ms-examples": {
          "Get a deployment group by name": {
            "$ref": "./httpExamples/deploymentgroups/GET__distributedtask_DeploymentGroups__Name_.json"
          },
          "Get deployment groups by IDs": {
            "$ref": "./httpExamples/deploymentgroups/GET__distributedtask_DeploymentGroups__Ids_.json"
          },
          "List all deployment groups": {
            "$ref": "./httpExamples/deploymentgroups/GET__distributedtask_DeploymentGroups.json"
          },
          "Get deployment groups in pages": {
            "$ref": "./httpExamples/deploymentgroups/GET__distributedtask_DeploymentGroups__Page_.json"
          }
        }
      }
    },
    "/{organization}/{project}/_apis/distributedtask/deploymentgroups/{deploymentGroupId}": {
      "delete": {
        "tags": [
          "Deploymentgroups"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "deploymentgroups",
        "x-ms-vss-method": "DeleteDeploymentGroup",
        "description": "Delete a deployment group.",
        "operationId": "Deploymentgroups_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deploymentGroupId",
            "description": "ID of the deployment group to be deleted.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.machinegroup_manage"
            ]
          }
        ],
        "x-ms-examples": {
          "Delete a deployment group": {
            "$ref": "./httpExamples/deploymentgroups/DELETE__distributedtask_DeploymentGroup__Id_.json"
          }
        }
      },
      "get": {
        "tags": [
          "Deploymentgroups"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "deploymentgroups",
        "x-ms-vss-method": "GetDeploymentGroup",
        "description": "Get a deployment group by its ID.",
        "operationId": "Deploymentgroups_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deploymentGroupId",
            "description": "ID of the deployment group.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "actionFilter",
            "description": "Get the deployment group only if this action can be performed on it.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "manage",
              "use"
            ],
            "x-ms-enum": {
              "name": "DeploymentGroupActionFilter",
              "values": [
                {
                  "value": "none",
                  "description": "All deployment groups."
                },
                {
                  "value": "manage",
                  "description": "Only deployment groups for which caller has **manage** permission."
                },
                {
                  "value": "use",
                  "description": "Only deployment groups for which caller has **use** permission."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "Include these additional details in the returned object.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "machines",
              "tags"
            ],
            "x-ms-enum": {
              "name": "DeploymentGroupExpands",
              "values": [
                {
                  "value": "none",
                  "description": "No additional properties."
                },
                {
                  "value": "machines",
                  "description": "Deprecated: Include all the deployment targets."
                },
                {
                  "value": "tags",
                  "description": "Include unique list of tags across all deployment targets."
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DeploymentGroup"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.machinegroup_manage"
            ]
          }
        ],
        "x-ms-examples": {
          "Get a deployment group by its ID": {
            "$ref": "./httpExamples/deploymentgroups/GET__distributedtask_DeploymentGroups__Id_.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Deploymentgroups"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "deploymentgroups",
        "x-ms-vss-method": "UpdateDeploymentGroup",
        "description": "Update a deployment group.",
        "operationId": "Deploymentgroups_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Deployment group to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeploymentGroupUpdateParameter"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deploymentGroupId",
            "description": "ID of the deployment group.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DeploymentGroup"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.machinegroup_manage"
            ]
          }
        ],
        "x-ms-examples": {
          "Update a deployment group": {
            "$ref": "./httpExamples/deploymentgroups/PATCH__distributedtask_DeploymentGroups__Id_.json"
          }
        }
      }
    },
    "/{organization}/{project}/_apis/distributedtask/deploymentgroups/{deploymentGroupId}/targets": {
      "get": {
        "tags": [
          "Targets"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "targets",
        "x-ms-vss-method": "GetDeploymentTargets",
        "description": "Get a list of deployment targets in a deployment group.",
        "operationId": "Targets_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deploymentGroupId",
            "description": "ID of the deployment group.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "tags",
            "description": "Get only the deployment targets that contain all these comma separted list of tags.",
            "required": false,
            "type": "string",
            "format": "array (string)"
          },
          {
            "in": "query",
            "name": "name",
            "description": "Name pattern of the deployment targets to return.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "partialNameMatch",
            "description": "When set to true, treats **name** as pattern. Else treats it as absolute match. Default is **false**.",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "Include these additional details in the returned objects.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "capabilities",
              "assignedRequest",
              "lastCompletedRequest"
            ],
            "x-ms-enum": {
              "name": "DeploymentTargetExpands",
              "values": [
                {
                  "value": "none",
                  "description": "No additional properties."
                },
                {
                  "value": "capabilities",
                  "description": "Include capabilities of the deployment agent."
                },
                {
                  "value": "assignedRequest",
                  "description": "Include the job request assigned to the deployment agent."
                },
                {
                  "value": "lastCompletedRequest",
                  "description": "Include the last completed job request of the deployment agent."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "agentStatus",
            "description": "Get only deployment targets that have this status.",
            "required": false,
            "type": "string",
            "enum": [
              "offline",
              "online",
              "all"
            ],
            "x-ms-enum": {
              "name": "TaskAgentStatusFilter",
              "values": [
                {
                  "value": "offline",
                  "description": "Only deployment targets that are offline."
                },
                {
                  "value": "online",
                  "description": "Only deployment targets that are online."
                },
                {
                  "value": "all",
                  "description": "All deployment targets."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "agentJobResult",
            "description": "Get only deployment targets that have this last job result.",
            "required": false,
            "type": "string",
            "enum": [
              "failed",
              "passed",
              "neverDeployed",
              "all"
            ],
            "x-ms-enum": {
              "name": "TaskAgentJobResultFilter",
              "values": [
                {
                  "value": "failed",
                  "description": "Only those deployment targets on which last job failed (**Abandoned**, **Canceled**, **Failed**, **Skipped**)."
                },
                {
                  "value": "passed",
                  "description": "Only those deployment targets on which last job Passed (**Succeeded**, **Succeeded with issues**)."
                },
                {
                  "value": "neverDeployed",
                  "description": "Only those deployment targets that never executed a job."
                },
                {
                  "value": "all",
                  "description": "All deployment targets."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "Get deployment targets with names greater than this continuationToken lexicographically.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "Maximum number of deployment targets to return. Default is **1000**.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "enabled",
            "description": "Get only deployment targets that are enabled or disabled. Default is 'null' which returns all the targets.",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "",
            "required": false,
            "type": "string",
            "format": "array (string)"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeploymentMachine"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.machinegroup_manage"
            ]
          }
        ],
        "x-ms-examples": {
          "List all deployment targets in a deployment group": {
            "$ref": "./httpExamples/targets/GET__distributedtask_DeploymentTargets.json"
          },
          "Get deployment targets having given tags": {
            "$ref": "./httpExamples/targets/GET__distributedtask_DeploymentTargets__Tags_.json"
          },
          "Get deployment targets by partial name match": {
            "$ref": "./httpExamples/targets/GET__distributedtask_DeploymentTargets__Name_.json"
          },
          "Get deployment targets including their last job requests": {
            "$ref": "./httpExamples/targets/GET__distributedtask_DeploymentTargets__LastRequest_.json"
          },
          "Get deployment targets filtered by agent status": {
            "$ref": "./httpExamples/targets/GET__distributedtask_DeploymentTargets__AgentStatus_.json"
          },
          "Get deployment targets in pages": {
            "$ref": "./httpExamples/targets/GET__distributedtask_DeploymentTargets__Page_.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Targets"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "targets",
        "x-ms-vss-method": "UpdateDeploymentTargets",
        "description": "Update tags of a list of deployment targets in a deployment group.",
        "operationId": "Targets_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Deployment targets with tags to udpdate.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeploymentTargetUpdateParameter"
              }
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deploymentGroupId",
            "description": "ID of the deployment group in which deployment targets are updated.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeploymentMachine"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.machinegroup_manage"
            ]
          }
        ],
        "x-ms-examples": {
          "Update tags of a deployment target": {
            "$ref": "./httpExamples/targets/PATCH__distributedtask_DeploymentTargets.json"
          }
        }
      }
    },
    "/{organization}/{project}/_apis/distributedtask/deploymentgroups/{deploymentGroupId}/targets/{targetId}": {
      "delete": {
        "tags": [
          "Targets"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "targets",
        "x-ms-vss-method": "DeleteDeploymentTarget",
        "description": "Delete a deployment target in a deployment group. This deletes the agent from associated deployment pool too.",
        "operationId": "Targets_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deploymentGroupId",
            "description": "ID of the deployment group in which deployment target is deleted.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "targetId",
            "description": "ID of the deployment target to delete.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.machinegroup_manage"
            ]
          }
        ],
        "x-ms-examples": {
          "Delete a deployment target": {
            "$ref": "./httpExamples/targets/DELETE_distributedtask_DeploymentTargets__Id_.json"
          }
        }
      },
      "get": {
        "tags": [
          "Targets"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "targets",
        "x-ms-vss-method": "GetDeploymentTarget",
        "description": "Get a deployment target by its ID in a deployment group",
        "operationId": "Targets_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "deploymentGroupId",
            "description": "ID of the deployment group to which deployment target belongs.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "targetId",
            "description": "ID of the deployment target to return.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "Include these additional details in the returned objects.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "capabilities",
              "assignedRequest",
              "lastCompletedRequest"
            ],
            "x-ms-enum": {
              "name": "DeploymentTargetExpands",
              "values": [
                {
                  "value": "none",
                  "description": "No additional properties."
                },
                {
                  "value": "capabilities",
                  "description": "Include capabilities of the deployment agent."
                },
                {
                  "value": "assignedRequest",
                  "description": "Include the job request assigned to the deployment agent."
                },
                {
                  "value": "lastCompletedRequest",
                  "description": "Include the last completed job request of the deployment agent."
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DeploymentMachine"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.machinegroup_manage"
            ]
          }
        ],
        "x-ms-examples": {
          "Get a deployment target by its ID": {
            "$ref": "./httpExamples/targets/GET__distributedtask_DeploymentTargets__Id_.json"
          }
        }
      }
    },
    "/{organization}/{project}/_apis/distributedtask/environments": {
      "post": {
        "tags": [
          "Environments"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "environments",
        "x-ms-vss-method": "AddEnvironment",
        "description": "Create an environment.",
        "operationId": "Environments_Add",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Environment to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EnvironmentCreateParameter"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EnvironmentInstance"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.environment_manage"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Environments"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "environments",
        "x-ms-vss-method": "GetEnvironments",
        "description": "Get all environments.",
        "operationId": "Environments_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnvironmentInstance"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.environment_manage"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/distributedtask/environments/{environmentId}": {
      "delete": {
        "tags": [
          "Environments"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "environments",
        "x-ms-vss-method": "DeleteEnvironment",
        "description": "Delete the specified environment.",
        "operationId": "Environments_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "environmentId",
            "description": "ID of the environment.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.environment_manage"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Environments"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "environments",
        "x-ms-vss-method": "GetEnvironmentById",
        "description": "Get an environment by its ID.",
        "operationId": "Environments_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "environmentId",
            "description": "ID of the environment.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "expands",
            "description": "Include these additional details in the returned objects.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "resourceReferences"
            ],
            "x-ms-enum": {
              "name": "EnvironmentExpands",
              "values": [
                {
                  "value": "none",
                  "description": "No additional properties"
                },
                {
                  "value": "resourceReferences",
                  "description": "Include resource references referring to the environment."
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EnvironmentInstance"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.environment_manage"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Environments"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "environments",
        "x-ms-vss-method": "UpdateEnvironment",
        "description": "Update the specified environment.",
        "operationId": "Environments_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Environment data to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EnvironmentUpdateParameter"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "environmentId",
            "description": "ID of the environment.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EnvironmentInstance"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.environment_manage"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/distributedtask/environments/{environmentId}/environmentdeploymentrecords": {
      "get": {
        "tags": [
          "Environmentdeployment Records"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "environmentdeploymentRecords",
        "x-ms-vss-method": "GetEnvironmentDeploymentExecutionRecords",
        "description": "Get environment deployment execution history",
        "operationId": "Environmentdeployment Records_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "environmentId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnvironmentDeploymentExecutionRecord"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.environment_manage"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/distributedtask/environments/{environmentId}/providers/kubernetes": {
      "post": {
        "tags": [
          "Kubernetes"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "kubernetes",
        "x-ms-vss-method": "AddKubernetesResource",
        "description": "",
        "operationId": "Kubernetes_Add",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KubernetesResourceCreateParameters"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "environmentId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KubernetesResource"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.environment_manage"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/distributedtask/environments/{environmentId}/providers/kubernetes/{resourceId}": {
      "delete": {
        "tags": [
          "Kubernetes"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "kubernetes",
        "x-ms-vss-method": "DeleteKubernetesResource",
        "description": "",
        "operationId": "Kubernetes_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "environmentId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "resourceId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.environment_manage"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Kubernetes"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "kubernetes",
        "x-ms-vss-method": "GetKubernetesResource",
        "description": "",
        "operationId": "Kubernetes_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "environmentId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "resourceId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KubernetesResource"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.environment_manage"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/distributedtask/queues": {
      "post": {
        "tags": [
          "Queues"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "queues",
        "x-ms-vss-method": "AddAgentQueue",
        "description": "Create a new agent queue to connect a project to an agent pool.",
        "operationId": "Queues_Add",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Details about the queue to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskAgentQueue"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "authorizePipelines",
            "description": "Automatically authorize this queue when using YAML",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TaskAgentQueue"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools_manage"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Queues"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "queues",
        "x-ms-vss-method": "GetAgentQueuesForPools",
        "description": "Get a list of agent queues by pool ids",
        "operationId": "Queues_Get Agent Queues For Pools",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "poolIds",
            "description": "A comma-separated list of pool ids to get the corresponding queues for",
            "required": true,
            "type": "string",
            "format": "array (int32)"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "actionFilter",
            "description": "Filter by whether the calling user has use or manage permissions",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "manage",
              "use"
            ],
            "x-ms-enum": {
              "name": "TaskAgentQueueActionFilter",
              "values": [
                {
                  "value": "none",
                  "description": ""
                },
                {
                  "value": "manage",
                  "description": ""
                },
                {
                  "value": "use",
                  "description": ""
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskAgentQueue"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/distributedtask/queues/{queueId}": {
      "delete": {
        "tags": [
          "Queues"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "queues",
        "x-ms-vss-method": "DeleteAgentQueue",
        "description": "Removes an agent queue from a project.",
        "operationId": "Queues_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "queueId",
            "description": "The agent queue to remove",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools_manage"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Queues"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "queues",
        "x-ms-vss-method": "GetAgentQueue",
        "description": "Get information about an agent queue.",
        "operationId": "Queues_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "queueId",
            "description": "The agent queue to get information about",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "actionFilter",
            "description": "Filter by whether the calling user has use or manage permissions",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "manage",
              "use"
            ],
            "x-ms-enum": {
              "name": "TaskAgentQueueActionFilter",
              "values": [
                {
                  "value": "none",
                  "description": ""
                },
                {
                  "value": "manage",
                  "description": ""
                },
                {
                  "value": "use",
                  "description": ""
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TaskAgentQueue"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/distributedtask/taskgroups": {
      "post": {
        "tags": [
          "Taskgroups"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "taskgroups",
        "x-ms-vss-method": "AddTaskGroup",
        "description": "Create a task group.",
        "operationId": "Taskgroups_Add",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Task group object to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskGroupCreateParameter"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TaskGroup"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.taskgroups_write"
            ]
          }
        ],
        "x-ms-examples": {
          "Create a task group": {
            "$ref": "./httpExamples/taskgroups/POST__CreateTaskGroup.json"
          }
        }
      }
    },
    "/{organization}/{project}/_apis/distributedtask/taskgroups/{taskGroupId}": {
      "delete": {
        "tags": [
          "Taskgroups"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "taskgroups",
        "x-ms-vss-method": "DeleteTaskGroup",
        "description": "Delete a task group.",
        "operationId": "Taskgroups_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "taskGroupId",
            "description": "Id of the task group to be deleted.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "comment",
            "description": "Comments to delete.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.taskgroups_manage"
            ]
          }
        ],
        "x-ms-examples": {
          "Delete a task group": {
            "$ref": "./httpExamples/taskgroups/DELETE__DeleteATaskGroup.json"
          }
        }
      },
      "get": {
        "tags": [
          "Taskgroups"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "taskgroups",
        "x-ms-vss-method": "GetTaskGroups",
        "description": "List task groups.",
        "operationId": "Taskgroups_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "taskGroupId",
            "description": "Id of the task group.",
            "required": true,
            "x-ms-required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "expanded",
            "description": "'true' to recursively expand task groups. Default is 'false'.",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "taskIdFilter",
            "description": "Guid of the taskId to filter.",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "deleted",
            "description": "'true'to include deleted task groups. Default is 'false'.",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "Number of task groups to get.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "Gets the task groups after the continuation token provided.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "queryOrder",
            "description": "Gets the results in the defined order. Default is 'CreatedOnDescending'.",
            "required": false,
            "type": "string",
            "enum": [
              "createdOnAscending",
              "createdOnDescending"
            ],
            "x-ms-enum": {
              "name": "TaskGroupQueryOrder",
              "values": [
                {
                  "value": "createdOnAscending",
                  "description": "Order by createdon ascending."
                },
                {
                  "value": "createdOnDescending",
                  "description": "Order by createdon descending."
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskGroup"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.taskgroups_read"
            ]
          }
        ],
        "x-ms-examples": {
          "List all task groups": {
            "$ref": "./httpExamples/taskgroups/LIST__ListAllTaskGroups.json"
          },
          "List all versions of a task group": {
            "$ref": "./httpExamples/taskgroups/LIST__ListAllVersionsOfTaskGroup.json"
          }
        }
      },
      "put": {
        "tags": [
          "Taskgroups"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "taskgroups",
        "x-ms-vss-method": "UpdateTaskGroup",
        "description": "Update a task group.",
        "operationId": "Taskgroups_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Task group to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TaskGroupUpdateParameter"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "taskGroupId",
            "description": "Id of the task group to update.",
            "required": true,
            "x-ms-required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TaskGroup"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.taskgroups_manage"
            ]
          }
        ],
        "x-ms-examples": {
          "Update a task group": {
            "$ref": "./httpExamples/taskgroups/PUT__UpdateTaskGroup.json"
          }
        }
      }
    },
    "/{organization}/{project}/_apis/distributedtask/variablegroups": {
      "get": {
        "tags": [
          "Variablegroups"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "variablegroups",
        "x-ms-vss-method": "GetVariableGroupsById",
        "description": "Get variable groups by ids.",
        "operationId": "Variablegroups_Get Variable Groups By Id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "groupIds",
            "description": "Comma separated list of Ids of variable groups.",
            "required": true,
            "type": "string",
            "format": "array (int32)"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableGroup"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.variablegroups_read"
            ]
          }
        ],
        "x-ms-examples": {
          "Get variable groups by ids": {
            "$ref": "./httpExamples/variablegroups/GET_VariableGroupsByIds.json"
          }
        }
      }
    },
    "/{organization}/{project}/_apis/distributedtask/variablegroups/{groupId}": {
      "get": {
        "tags": [
          "Variablegroups"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "variablegroups",
        "x-ms-vss-method": "GetVariableGroup",
        "description": "Get a variable group.",
        "operationId": "Variablegroups_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "groupId",
            "description": "Id of the variable group.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VariableGroup"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.variablegroups_read"
            ]
          }
        ],
        "x-ms-examples": {
          "Get a variable group": {
            "$ref": "./httpExamples/variablegroups/GET_VariableGroup.json"
          }
        }
      }
    }
  },
  "x-ms-paths": {
    "/{organization}/_apis/distributedtask/pools?": {
      "get": {
        "tags": [
          "Pools"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pools",
        "x-ms-vss-method": "GetAgentPools",
        "description": "Get a list of agent pools.",
        "operationId": "Pools_Get Agent Pools",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "poolName",
            "description": "Filter by name",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "properties",
            "description": "Filter by agent pool properties (comma-separated)",
            "required": false,
            "type": "string",
            "format": "array (string)"
          },
          {
            "in": "query",
            "name": "poolType",
            "description": "Filter by pool type",
            "required": false,
            "type": "string",
            "enum": [
              "automation",
              "deployment"
            ],
            "x-ms-enum": {
              "name": "TaskAgentPoolType",
              "values": [
                {
                  "value": "automation",
                  "description": "A typical pool of task agents"
                },
                {
                  "value": "deployment",
                  "description": "A deployment pool"
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "actionFilter",
            "description": "Filter by whether the calling user has use or manage permissions",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "manage",
              "use"
            ],
            "x-ms-enum": {
              "name": "TaskAgentPoolActionFilter",
              "values": [
                {
                  "value": "none",
                  "description": ""
                },
                {
                  "value": "manage",
                  "description": ""
                },
                {
                  "value": "use",
                  "description": ""
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskAgentPool"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools"
            ]
          }
        ]
      }
    },
    "/{organization}/_apis/distributedtask/pools/{poolId}/agents/{agentId}?": {
      "get": {
        "tags": [
          "Agents"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "agents",
        "x-ms-vss-method": "GetAgent",
        "description": "Get information about an agent.",
        "operationId": "Agents_Get Agent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "poolId",
            "description": "The agent pool containing the agent",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "agentId",
            "description": "The agent ID to get information about",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "includeCapabilities",
            "description": "Whether to include the agent's capabilities in the response",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "includeAssignedRequest",
            "description": "Whether to include details about the agent's current work",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "includeLastCompletedRequest",
            "description": "Whether to include details about the agents' most recent completed work",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "Filter which custom properties will be returned",
            "required": false,
            "type": "string",
            "format": "array (string)"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TaskAgent"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/distributedtask/queues?queueNames={queueNames}": {
      "get": {
        "tags": [
          "Queues"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "queues",
        "x-ms-vss-method": "GetAgentQueuesByNames",
        "description": "Get a list of agent queues by their names",
        "operationId": "Queues_Get Agent Queues By Names",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "queueNames",
            "description": "A comma-separated list of agent names to retrieve",
            "required": true,
            "type": "string",
            "format": "array (string)"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "actionFilter",
            "description": "Filter by whether the calling user has use or manage permissions",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "manage",
              "use"
            ],
            "x-ms-enum": {
              "name": "TaskAgentQueueActionFilter",
              "values": [
                {
                  "value": "none",
                  "description": ""
                },
                {
                  "value": "manage",
                  "description": ""
                },
                {
                  "value": "use",
                  "description": ""
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskAgentQueue"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/distributedtask/queues?queueIds={queueIds}": {
      "get": {
        "tags": [
          "Queues"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "queues",
        "x-ms-vss-method": "GetAgentQueuesByIds",
        "description": "Get a list of agent queues by their IDs",
        "operationId": "Queues_Get Agent Queues By Ids",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "queueIds",
            "description": "A comma-separated list of agent queue IDs to retrieve",
            "required": true,
            "type": "string",
            "format": "array (int32)"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "actionFilter",
            "description": "Filter by whether the calling user has use or manage permissions",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "manage",
              "use"
            ],
            "x-ms-enum": {
              "name": "TaskAgentQueueActionFilter",
              "values": [
                {
                  "value": "none",
                  "description": ""
                },
                {
                  "value": "manage",
                  "description": ""
                },
                {
                  "value": "use",
                  "description": ""
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskAgentQueue"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/distributedtask/queues?": {
      "get": {
        "tags": [
          "Queues"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "queues",
        "x-ms-vss-method": "GetAgentQueues",
        "description": "Get a list of agent queues.",
        "operationId": "Queues_Get Agent Queues",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "queueName",
            "description": "Filter on the agent queue name",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "actionFilter",
            "description": "Filter by whether the calling user has use or manage permissions",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "manage",
              "use"
            ],
            "x-ms-enum": {
              "name": "TaskAgentQueueActionFilter",
              "values": [
                {
                  "value": "none",
                  "description": ""
                },
                {
                  "value": "manage",
                  "description": ""
                },
                {
                  "value": "use",
                  "description": ""
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaskAgentQueue"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.agentpools"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/distributedtask/variablegroups?": {
      "get": {
        "tags": [
          "Variablegroups"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "variablegroups",
        "x-ms-vss-method": "GetVariableGroups",
        "description": "Get variable groups.",
        "operationId": "Variablegroups_Get Variable Groups",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "groupName",
            "description": "Name of variable group.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "actionFilter",
            "description": "Action filter for the variable group. It specifies the action which can be performed on the variable groups.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "manage",
              "use"
            ],
            "x-ms-enum": {
              "name": "VariableGroupActionFilter",
              "values": [
                {
                  "value": "none",
                  "description": ""
                },
                {
                  "value": "manage",
                  "description": ""
                },
                {
                  "value": "use",
                  "description": ""
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "$top",
            "description": "Number of variable groups to get.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "Gets the variable groups after the continuation token provided.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "queryOrder",
            "description": "Gets the results in the defined order. Default is 'IdDescending'.",
            "required": false,
            "type": "string",
            "enum": [
              "idAscending",
              "idDescending"
            ],
            "x-ms-enum": {
              "name": "VariableGroupQueryOrder",
              "values": [
                {
                  "value": "idAscending",
                  "description": "Order by id ascending."
                },
                {
                  "value": "idDescending",
                  "description": "Order by id descending."
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariableGroup"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.variablegroups_read"
            ]
          }
        ],
        "x-ms-examples": {
          "Get variable groups using group name filter": {
            "$ref": "./httpExamples/variablegroups/GET_VariableGroupsByGroupName.json"
          },
          "Get variable groups using action filter": {
            "$ref": "./httpExamples/variablegroups/GET_VariableGroupsByActionFilter.json"
          }
        }
      }
    }
  },
  "definitions": {
    "AadOauthTokenRequest": {
      "description": "",
      "type": "object",
      "properties": {
        "refresh": {
          "type": "boolean"
        },
        "resource": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "AadOauthTokenResult": {
      "description": "",
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "refreshTokenCache": {
          "type": "string"
        }
      }
    },
    "AgentChangeEvent": {
      "description": "",
      "type": "object",
      "properties": {
        "agent": {
          "$ref": "#/definitions/TaskAgent"
        },
        "eventType": {
          "type": "string"
        },
        "pool": {
          "$ref": "#/definitions/TaskAgentPoolReference"
        }
      }
    },
    "AgentJobRequestMessage": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JobRequestMessage"
        }
      ],
      "properties": {
        "lockedUntil": {
          "type": "string",
          "format": "date-time"
        },
        "lockToken": {
          "type": "string",
          "format": "uuid"
        },
        "requestId": {
          "type": "integer",
          "format": "int64"
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskInstance"
          }
        }
      }
    },
    "AgentPoolEvent": {
      "description": "",
      "type": "object",
      "properties": {
        "eventType": {
          "type": "string"
        },
        "pool": {
          "$ref": "#/definitions/TaskAgentPool"
        }
      }
    },
    "AgentQueueEvent": {
      "description": "",
      "type": "object",
      "properties": {
        "eventType": {
          "type": "string"
        },
        "queue": {
          "$ref": "#/definitions/TaskAgentQueue"
        }
      }
    },
    "AgentQueuesEvent": {
      "description": "",
      "type": "object",
      "properties": {
        "eventType": {
          "type": "string"
        },
        "queues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskAgentQueue"
          }
        }
      }
    },
    "AgentRefreshMessage": {
      "description": "",
      "type": "object",
      "properties": {
        "agentId": {
          "type": "integer",
          "format": "int32"
        },
        "targetVersion": {
          "type": "string"
        },
        "timeout": {
          "type": "string",
          "format": "TimeSpan"
        }
      }
    },
    "AuthenticationSchemeReference": {
      "description": "",
      "type": "object",
      "properties": {
        "inputs": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "AuthorizationHeader": {
      "description": "",
      "type": "object",
      "properties": {
        "name": {
          "description": "Gets or sets the name of authorization header.",
          "type": "string"
        },
        "value": {
          "description": "Gets or sets the value of authorization header.",
          "type": "string"
        }
      }
    },
    "AzureKeyVaultPermission": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AzureResourcePermission"
        }
      ],
      "properties": {
        "vault": {
          "type": "string"
        }
      }
    },
    "AzureKeyVaultVariableGroupProviderData": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/VariableGroupProviderData"
        }
      ],
      "properties": {
        "lastRefreshedOn": {
          "type": "string",
          "format": "date-time"
        },
        "serviceEndpointId": {
          "type": "string",
          "format": "uuid"
        },
        "vault": {
          "type": "string"
        }
      }
    },
    "AzureKeyVaultVariableValue": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/VariableValue"
        }
      ],
      "properties": {
        "contentType": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "expires": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "AzureManagementGroup": {
      "description": "Azure Management Group",
      "type": "object",
      "properties": {
        "displayName": {
          "description": "Display name of azure management group",
          "type": "string"
        },
        "id": {
          "description": "Id of azure management group",
          "type": "string"
        },
        "name": {
          "description": "Azure management group name",
          "type": "string"
        },
        "tenantId": {
          "description": "Id of tenant from which azure management group belongs",
          "type": "string"
        }
      }
    },
    "AzureManagementGroupQueryResult": {
      "description": "Azure management group query result",
      "type": "object",
      "properties": {
        "errorMessage": {
          "description": "Error message in case of an exception",
          "type": "string"
        },
        "value": {
          "description": "List of azure management groups",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AzureManagementGroup"
          }
        }
      }
    },
    "AzurePermission": {
      "description": "",
      "type": "object",
      "properties": {
        "provisioned": {
          "type": "boolean"
        },
        "resourceProvider": {
          "type": "string"
        }
      }
    },
    "AzureResourcePermission": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AzurePermission"
        }
      ],
      "properties": {
        "resourceGroup": {
          "type": "string"
        }
      }
    },
    "AzureRoleAssignmentPermission": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AzurePermission"
        }
      ],
      "properties": {
        "roleAssignmentId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "AzureSpnOperationStatus": {
      "description": "",
      "type": "object",
      "properties": {
        "state": {
          "type": "string"
        },
        "statusMessage": {
          "type": "string"
        }
      }
    },
    "AzureSubscription": {
      "description": "",
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string"
        },
        "subscriptionTenantId": {
          "type": "string"
        },
        "subscriptionTenantName": {
          "type": "string"
        }
      }
    },
    "AzureSubscriptionQueryResult": {
      "description": "",
      "type": "object",
      "properties": {
        "errorMessage": {
          "type": "string"
        },
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AzureSubscription"
          }
        }
      }
    },
    "ClientCertificate": {
      "description": "",
      "type": "object",
      "properties": {
        "value": {
          "description": "Gets or sets the value of client certificate.",
          "type": "string"
        }
      }
    },
    "CounterVariable": {
      "description": "",
      "type": "object",
      "properties": {
        "prefix": {
          "type": "string"
        },
        "seed": {
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DataSource": {
      "description": "",
      "type": "object",
      "properties": {
        "authenticationScheme": {
          "$ref": "#/definitions/AuthenticationSchemeReference"
        },
        "endpointUrl": {
          "type": "string"
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthorizationHeader"
          }
        },
        "name": {
          "type": "string"
        },
        "resourceUrl": {
          "type": "string"
        },
        "resultSelector": {
          "type": "string"
        }
      }
    },
    "DataSourceBinding": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DataSourceBindingBase"
        }
      ],
      "properties": {}
    },
    "DataSourceBindingBase": {
      "description": "Represents binding of data source for the service endpoint request.",
      "type": "object",
      "properties": {
        "callbackContextTemplate": {
          "description": "Pagination format supported by this data source(ContinuationToken/SkipTop).",
          "type": "string"
        },
        "callbackRequiredTemplate": {
          "description": "Subsequent calls needed?",
          "type": "string"
        },
        "dataSourceName": {
          "description": "Gets or sets the name of the data source.",
          "type": "string"
        },
        "endpointId": {
          "description": "Gets or sets the endpoint Id.",
          "type": "string"
        },
        "endpointUrl": {
          "description": "Gets or sets the url of the service endpoint.",
          "type": "string"
        },
        "headers": {
          "description": "Gets or sets the authorization headers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthorizationHeader"
          }
        },
        "initialContextTemplate": {
          "description": "Defines the initial value of the query params",
          "type": "string"
        },
        "parameters": {
          "description": "Gets or sets the parameters for the data source.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "requestContent": {
          "description": "Gets or sets http request body",
          "type": "string"
        },
        "requestVerb": {
          "description": "Gets or sets http request verb",
          "type": "string"
        },
        "resultSelector": {
          "description": "Gets or sets the result selector.",
          "type": "string"
        },
        "resultTemplate": {
          "description": "Gets or sets the result template.",
          "type": "string"
        },
        "target": {
          "description": "Gets or sets the target of the data source.",
          "type": "string"
        }
      }
    },
    "DataSourceDetails": {
      "description": "",
      "type": "object",
      "properties": {
        "dataSourceName": {
          "type": "string"
        },
        "dataSourceUrl": {
          "type": "string"
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthorizationHeader"
          }
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "resourceUrl": {
          "type": "string"
        },
        "resultSelector": {
          "type": "string"
        }
      }
    },
    "Demand": {
      "description": "",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "DemandEquals": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Demand"
        }
      ],
      "properties": {}
    },
    "DemandExists": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Demand"
        }
      ],
      "properties": {}
    },
    "DemandMinimumVersion": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Demand"
        }
      ],
      "properties": {
        "source": {
          "$ref": "#/definitions/DemandSource"
        }
      }
    },
    "DemandSource": {
      "description": "",
      "type": "object",
      "properties": {
        "sourceName": {
          "type": "string"
        },
        "sourceType": {
          "enum": [
            "task",
            "feature"
          ],
          "x-ms-enum": {
            "name": "DemandSourceType",
            "values": [
              {
                "value": "task",
                "description": ""
              },
              {
                "value": "feature",
                "description": ""
              }
            ]
          }
        },
        "sourceVersion": {
          "type": "string"
        }
      }
    },
    "DependencyBinding": {
      "description": "",
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "DependencyData": {
      "description": "",
      "type": "object",
      "properties": {
        "input": {
          "type": "string"
        },
        "map": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "DependsOn": {
      "description": "",
      "type": "object",
      "properties": {
        "input": {
          "type": "string"
        },
        "map": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DependencyBinding"
          }
        }
      }
    },
    "DeploymentGatesChangeEvent": {
      "description": "",
      "type": "object",
      "properties": {
        "gateNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentGroup": {
      "description": "Deployment group.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DeploymentGroupReference"
        }
      ],
      "properties": {
        "description": {
          "description": "Description of the deployment group.",
          "type": "string"
        },
        "machineCount": {
          "description": "Number of deployment targets in the deployment group.",
          "type": "integer",
          "format": "int32"
        },
        "machines": {
          "description": "List of deployment targets in the deployment group.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentMachine"
          }
        },
        "machineTags": {
          "description": "List of unique tags across all deployment targets in the deployment group.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentGroupCreateParameter": {
      "description": "Properties to create Deployment group.",
      "type": "object",
      "properties": {
        "description": {
          "description": "Description of the deployment group.",
          "type": "string"
        },
        "name": {
          "description": "Name of the deployment group.",
          "type": "string"
        },
        "poolId": {
          "description": "Identifier of the deployment pool in which deployment agents are registered.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DeploymentGroupCreateParameterPoolProperty": {
      "description": "Properties of Deployment pool to create Deployment group.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Deployment pool identifier.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DeploymentGroupMetrics": {
      "description": "Deployment group metrics.",
      "type": "object",
      "properties": {
        "columnsHeader": {
          "description": "List of deployment group properties. And types of metrics provided for those properties.",
          "$ref": "#/definitions/MetricsColumnsHeader"
        },
        "deploymentGroup": {
          "description": "Deployment group.",
          "$ref": "#/definitions/DeploymentGroupReference"
        },
        "rows": {
          "description": "Values of properties and the metrics. E.g. 1: total count of deployment targets for which 'TargetState' is 'offline'. E.g. 2: Average time of deployment to the deployment targets for which 'LastJobStatus' is 'passed' and 'TargetState' is 'online'.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricsRow"
          }
        }
      }
    },
    "DeploymentGroupReference": {
      "description": "Deployment group reference. This is useful for referring a deployment group in another object.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Deployment group identifier.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name of the deployment group.",
          "type": "string"
        },
        "pool": {
          "description": "Deployment pool in which deployment agents are registered.",
          "$ref": "#/definitions/TaskAgentPoolReference"
        },
        "project": {
          "description": "Project to which the deployment group belongs.",
          "$ref": "#/definitions/ProjectReference"
        }
      }
    },
    "DeploymentGroupUpdateParameter": {
      "description": "Deployment group update parameter.",
      "type": "object",
      "properties": {
        "description": {
          "description": "Description of the deployment group.",
          "type": "string"
        },
        "name": {
          "description": "Name of the deployment group.",
          "type": "string"
        }
      }
    },
    "DeploymentMachine": {
      "description": "Deployment target.",
      "type": "object",
      "properties": {
        "agent": {
          "description": "Deployment agent.",
          "$ref": "#/definitions/TaskAgent"
        },
        "id": {
          "description": "Deployment target Identifier.",
          "type": "integer",
          "format": "int32"
        },
        "properties": {
          "description": "Properties of the deployment target.",
          "$ref": "#/definitions/PropertiesCollection"
        },
        "tags": {
          "description": "Tags of the deployment target.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentMachineChangedData": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DeploymentMachine"
        }
      ],
      "properties": {
        "addedTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deletedTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentMachineGroup": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DeploymentMachineGroupReference"
        }
      ],
      "properties": {
        "machines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentMachine"
          }
        },
        "size": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DeploymentMachineGroupReference": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "pool": {
          "$ref": "#/definitions/TaskAgentPoolReference"
        },
        "project": {
          "$ref": "#/definitions/ProjectReference"
        }
      }
    },
    "DeploymentMachinesChangeEvent": {
      "description": "",
      "type": "object",
      "properties": {
        "machineGroupReference": {
          "$ref": "#/definitions/DeploymentGroupReference"
        },
        "machines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentMachineChangedData"
          }
        }
      }
    },
    "DeploymentPoolSummary": {
      "description": "Deployment pool summary.",
      "type": "object",
      "properties": {
        "deploymentGroups": {
          "description": "List of deployment groups referring to the deployment pool.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentGroupReference"
          }
        },
        "offlineAgentsCount": {
          "description": "Number of deployment agents that are offline.",
          "type": "integer",
          "format": "int32"
        },
        "onlineAgentsCount": {
          "description": "Number of deployment agents that are online.",
          "type": "integer",
          "format": "int32"
        },
        "pool": {
          "description": "Deployment pool.",
          "$ref": "#/definitions/TaskAgentPoolReference"
        },
        "resource": {
          "description": "Virtual machine Resource referring in pool.",
          "$ref": "#/definitions/EnvironmentResourceReference"
        }
      }
    },
    "DeploymentTargetUpdateParameter": {
      "description": "Deployment target update parameter.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Identifier of the deployment target.",
          "type": "integer",
          "format": "int32"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DiagnosticLogMetadata": {
      "description": "",
      "type": "object",
      "properties": {
        "agentId": {
          "type": "integer",
          "format": "int32"
        },
        "agentName": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "phaseName": {
          "type": "string"
        },
        "phaseResult": {
          "type": "string"
        },
        "poolId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ElasticAgentPoolResizedEvent": {
      "description": "",
      "type": "object",
      "properties": {
        "newSize": {
          "type": "integer",
          "format": "int32"
        },
        "poolId": {
          "type": "integer",
          "format": "int32"
        },
        "poolName": {
          "type": "string"
        },
        "previousSize": {
          "type": "integer",
          "format": "int32"
        },
        "resourceId": {
          "type": "string"
        }
      }
    },
    "ElasticNode": {
      "description": "Data and settings for an elastic node",
      "type": "object",
      "properties": {
        "agentId": {
          "description": "Distributed Task's Agent Id",
          "type": "integer",
          "format": "int32"
        },
        "agentState": {
          "description": "Summary of the state of the agent",
          "enum": [
            "none",
            "enabled",
            "online",
            "assigned"
          ],
          "x-ms-enum": {
            "name": "ElasticAgentState",
            "values": [
              {
                "value": "none",
                "description": ""
              },
              {
                "value": "enabled",
                "description": ""
              },
              {
                "value": "online",
                "description": ""
              },
              {
                "value": "assigned",
                "description": ""
              }
            ]
          }
        },
        "computeId": {
          "description": "Compute Id.  VMSS's InstanceId",
          "type": "string"
        },
        "computeState": {
          "description": "State of the compute host",
          "enum": [
            "none",
            "healthy",
            "creating",
            "deleting",
            "failed",
            "stopped",
            "reimaging",
            "unhealthyVm",
            "unhealthyVmssVm"
          ],
          "x-ms-enum": {
            "name": "ElasticComputeState",
            "values": [
              {
                "value": "none",
                "description": ""
              },
              {
                "value": "healthy",
                "description": ""
              },
              {
                "value": "creating",
                "description": ""
              },
              {
                "value": "deleting",
                "description": ""
              },
              {
                "value": "failed",
                "description": ""
              },
              {
                "value": "stopped",
                "description": ""
              },
              {
                "value": "reimaging",
                "description": ""
              },
              {
                "value": "unhealthyVm",
                "description": ""
              },
              {
                "value": "unhealthyVmssVm",
                "description": ""
              }
            ]
          }
        },
        "desiredState": {
          "description": "Users can force state changes to specific states (ToReimage, ToDelete, Save)",
          "enum": [
            "none",
            "new",
            "creatingCompute",
            "startingAgent",
            "idle",
            "assigned",
            "offline",
            "pendingReimage",
            "pendingDelete",
            "saved",
            "deletingCompute",
            "deleted",
            "lost",
            "reimagingCompute",
            "restartingAgent",
            "failedToStartPendingDelete",
            "failedToRestartPendingDelete",
            "failedVMPendingDelete",
            "assignedPendingDelete",
            "retryDelete",
            "unhealthyVm",
            "unhealthyVmPendingDelete"
          ],
          "x-ms-enum": {
            "name": "ElasticNodeState",
            "values": [
              {
                "value": "none",
                "description": ""
              },
              {
                "value": "new",
                "description": ""
              },
              {
                "value": "creatingCompute",
                "description": ""
              },
              {
                "value": "startingAgent",
                "description": ""
              },
              {
                "value": "idle",
                "description": ""
              },
              {
                "value": "assigned",
                "description": ""
              },
              {
                "value": "offline",
                "description": ""
              },
              {
                "value": "pendingReimage",
                "description": ""
              },
              {
                "value": "pendingDelete",
                "description": ""
              },
              {
                "value": "saved",
                "description": ""
              },
              {
                "value": "deletingCompute",
                "description": ""
              },
              {
                "value": "deleted",
                "description": ""
              },
              {
                "value": "lost",
                "description": ""
              },
              {
                "value": "reimagingCompute",
                "description": ""
              },
              {
                "value": "restartingAgent",
                "description": ""
              },
              {
                "value": "failedToStartPendingDelete",
                "description": ""
              },
              {
                "value": "failedToRestartPendingDelete",
                "description": ""
              },
              {
                "value": "failedVMPendingDelete",
                "description": ""
              },
              {
                "value": "assignedPendingDelete",
                "description": ""
              },
              {
                "value": "retryDelete",
                "description": ""
              },
              {
                "value": "unhealthyVm",
                "description": ""
              },
              {
                "value": "unhealthyVmPendingDelete",
                "description": ""
              }
            ]
          }
        },
        "id": {
          "description": "Unique identifier since the agent and/or VM may be null",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Computer name. Used to match a scaleset VM with an agent",
          "type": "string"
        },
        "poolId": {
          "description": "Pool Id that this node belongs to",
          "type": "integer",
          "format": "int32"
        },
        "requestId": {
          "description": "Last job RequestId assigned to this agent",
          "type": "integer",
          "format": "int64"
        },
        "state": {
          "description": "State of the ElasticNode",
          "enum": [
            "none",
            "new",
            "creatingCompute",
            "startingAgent",
            "idle",
            "assigned",
            "offline",
            "pendingReimage",
            "pendingDelete",
            "saved",
            "deletingCompute",
            "deleted",
            "lost",
            "reimagingCompute",
            "restartingAgent",
            "failedToStartPendingDelete",
            "failedToRestartPendingDelete",
            "failedVMPendingDelete",
            "assignedPendingDelete",
            "retryDelete",
            "unhealthyVm",
            "unhealthyVmPendingDelete"
          ],
          "x-ms-enum": {
            "name": "ElasticNodeState",
            "values": [
              {
                "value": "none",
                "description": ""
              },
              {
                "value": "new",
                "description": ""
              },
              {
                "value": "creatingCompute",
                "description": ""
              },
              {
                "value": "startingAgent",
                "description": ""
              },
              {
                "value": "idle",
                "description": ""
              },
              {
                "value": "assigned",
                "description": ""
              },
              {
                "value": "offline",
                "description": ""
              },
              {
                "value": "pendingReimage",
                "description": ""
              },
              {
                "value": "pendingDelete",
                "description": ""
              },
              {
                "value": "saved",
                "description": ""
              },
              {
                "value": "deletingCompute",
                "description": ""
              },
              {
                "value": "deleted",
                "description": ""
              },
              {
                "value": "lost",
                "description": ""
              },
              {
                "value": "reimagingCompute",
                "description": ""
              },
              {
                "value": "restartingAgent",
                "description": ""
              },
              {
                "value": "failedToStartPendingDelete",
                "description": ""
              },
              {
                "value": "failedToRestartPendingDelete",
                "description": ""
              },
              {
                "value": "failedVMPendingDelete",
                "description": ""
              },
              {
                "value": "assignedPendingDelete",
                "description": ""
              },
              {
                "value": "retryDelete",
                "description": ""
              },
              {
                "value": "unhealthyVm",
                "description": ""
              },
              {
                "value": "unhealthyVmPendingDelete",
                "description": ""
              }
            ]
          }
        },
        "stateChangedOn": {
          "description": "Last state change. Only updated by SQL.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ElasticNodeSettings": {
      "description": "Class used for updating an elastic node where only certain members are populated",
      "type": "object",
      "properties": {
        "state": {
          "description": "State of the ElasticNode",
          "enum": [
            "none",
            "new",
            "creatingCompute",
            "startingAgent",
            "idle",
            "assigned",
            "offline",
            "pendingReimage",
            "pendingDelete",
            "saved",
            "deletingCompute",
            "deleted",
            "lost",
            "reimagingCompute",
            "restartingAgent",
            "failedToStartPendingDelete",
            "failedToRestartPendingDelete",
            "failedVMPendingDelete",
            "assignedPendingDelete",
            "retryDelete",
            "unhealthyVm",
            "unhealthyVmPendingDelete"
          ],
          "x-ms-enum": {
            "name": "ElasticNodeState",
            "values": [
              {
                "value": "none",
                "description": ""
              },
              {
                "value": "new",
                "description": ""
              },
              {
                "value": "creatingCompute",
                "description": ""
              },
              {
                "value": "startingAgent",
                "description": ""
              },
              {
                "value": "idle",
                "description": ""
              },
              {
                "value": "assigned",
                "description": ""
              },
              {
                "value": "offline",
                "description": ""
              },
              {
                "value": "pendingReimage",
                "description": ""
              },
              {
                "value": "pendingDelete",
                "description": ""
              },
              {
                "value": "saved",
                "description": ""
              },
              {
                "value": "deletingCompute",
                "description": ""
              },
              {
                "value": "deleted",
                "description": ""
              },
              {
                "value": "lost",
                "description": ""
              },
              {
                "value": "reimagingCompute",
                "description": ""
              },
              {
                "value": "restartingAgent",
                "description": ""
              },
              {
                "value": "failedToStartPendingDelete",
                "description": ""
              },
              {
                "value": "failedToRestartPendingDelete",
                "description": ""
              },
              {
                "value": "failedVMPendingDelete",
                "description": ""
              },
              {
                "value": "assignedPendingDelete",
                "description": ""
              },
              {
                "value": "retryDelete",
                "description": ""
              },
              {
                "value": "unhealthyVm",
                "description": ""
              },
              {
                "value": "unhealthyVmPendingDelete",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "ElasticPool": {
      "description": "Data and settings for an elastic pool",
      "type": "object",
      "properties": {
        "agentInteractiveUI": {
          "description": "Set whether agents should be configured to run with interactive UI",
          "type": "boolean"
        },
        "azureId": {
          "description": "Azure string representing to location of the resource",
          "type": "string"
        },
        "desiredIdle": {
          "description": "Number of agents to have ready waiting for jobs",
          "type": "integer",
          "format": "int32"
        },
        "desiredSize": {
          "description": "The desired size of the pool",
          "type": "integer",
          "format": "int32"
        },
        "maxCapacity": {
          "description": "Maximum number of nodes that will exist in the elastic pool",
          "type": "integer",
          "format": "int32"
        },
        "maxSavedNodeCount": {
          "description": "Keep nodes in the pool on failure for investigation",
          "type": "integer",
          "format": "int32"
        },
        "offlineSince": {
          "description": "Timestamp the pool was first detected to be offline",
          "type": "string",
          "format": "date-time"
        },
        "orchestrationType": {
          "description": "Operating system type of the nodes in the pool",
          "enum": [
            "uniform",
            "flexible"
          ],
          "x-ms-enum": {
            "name": "OrchestrationType",
            "values": [
              {
                "value": "uniform",
                "description": ""
              },
              {
                "value": "flexible",
                "description": ""
              }
            ]
          }
        },
        "osType": {
          "description": "Operating system type of the nodes in the pool",
          "enum": [
            "windows",
            "linux"
          ],
          "x-ms-enum": {
            "name": "OperatingSystemType",
            "values": [
              {
                "value": "windows",
                "description": ""
              },
              {
                "value": "linux",
                "description": ""
              }
            ]
          }
        },
        "poolId": {
          "description": "Id of the associated TaskAgentPool",
          "type": "integer",
          "format": "int32"
        },
        "recycleAfterEachUse": {
          "description": "Discard node after each job completes",
          "type": "boolean"
        },
        "serviceEndpointId": {
          "description": "Id of the Service Endpoint used to connect to Azure",
          "type": "string",
          "format": "uuid"
        },
        "serviceEndpointScope": {
          "description": "Scope the Service Endpoint belongs to",
          "type": "string",
          "format": "uuid"
        },
        "sizingAttempts": {
          "description": "The number of sizing attempts executed while trying to achieve a desired size",
          "type": "integer",
          "format": "int32"
        },
        "state": {
          "description": "State of the pool",
          "enum": [
            "online",
            "offline",
            "unhealthy",
            "new"
          ],
          "x-ms-enum": {
            "name": "ElasticPoolState",
            "values": [
              {
                "value": "online",
                "description": "Online and healthy"
              },
              {
                "value": "offline",
                "description": ""
              },
              {
                "value": "unhealthy",
                "description": ""
              },
              {
                "value": "new",
                "description": ""
              }
            ]
          }
        },
        "timeToLiveMinutes": {
          "description": "The minimum time in minutes to keep idle agents alive",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ElasticPoolCreationResult": {
      "description": "Returned result from creating a new elastic pool",
      "type": "object",
      "properties": {
        "agentPool": {
          "description": "Created agent pool",
          "$ref": "#/definitions/TaskAgentPool"
        },
        "agentQueue": {
          "description": "Created agent queue",
          "$ref": "#/definitions/TaskAgentQueue"
        },
        "elasticPool": {
          "description": "Created elastic pool",
          "$ref": "#/definitions/ElasticPool"
        }
      }
    },
    "ElasticPoolLog": {
      "description": "Log data for an Elastic Pool",
      "type": "object",
      "properties": {
        "id": {
          "description": "Log Id",
          "type": "integer",
          "format": "int64"
        },
        "level": {
          "description": "E.g. error, warning, info",
          "enum": [
            "error",
            "warning",
            "info"
          ],
          "x-ms-enum": {
            "name": "LogLevel",
            "values": [
              {
                "value": "error",
                "description": ""
              },
              {
                "value": "warning",
                "description": ""
              },
              {
                "value": "info",
                "description": ""
              }
            ]
          }
        },
        "message": {
          "description": "Log contents",
          "type": "string"
        },
        "operation": {
          "description": "Operation that triggered the message being logged",
          "enum": [
            "configurationJob",
            "sizingJob",
            "increaseCapacity",
            "reimage",
            "deleteVMs"
          ],
          "x-ms-enum": {
            "name": "OperationType",
            "values": [
              {
                "value": "configurationJob",
                "description": ""
              },
              {
                "value": "sizingJob",
                "description": ""
              },
              {
                "value": "increaseCapacity",
                "description": ""
              },
              {
                "value": "reimage",
                "description": ""
              },
              {
                "value": "deleteVMs",
                "description": ""
              }
            ]
          }
        },
        "poolId": {
          "description": "Id of the associated TaskAgentPool",
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "description": "Datetime that the log occurred",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ElasticPoolSettings": {
      "description": "Class used for updating an elastic pool where only certain members are populated",
      "type": "object",
      "properties": {
        "agentInteractiveUI": {
          "description": "Set whether agents should be configured to run with interactive UI",
          "type": "boolean"
        },
        "azureId": {
          "description": "Azure string representing to location of the resource",
          "type": "string"
        },
        "desiredIdle": {
          "description": "Number of machines to have ready waiting for jobs",
          "type": "integer",
          "format": "int32"
        },
        "maxCapacity": {
          "description": "Maximum number of machines that will exist in the elastic pool",
          "type": "integer",
          "format": "int32"
        },
        "maxSavedNodeCount": {
          "description": "Keep machines in the pool on failure for investigation",
          "type": "integer",
          "format": "int32"
        },
        "orchestrationType": {
          "description": "Operating system type of the machines in the pool",
          "enum": [
            "uniform",
            "flexible"
          ],
          "x-ms-enum": {
            "name": "OrchestrationType",
            "values": [
              {
                "value": "uniform",
                "description": ""
              },
              {
                "value": "flexible",
                "description": ""
              }
            ]
          }
        },
        "osType": {
          "description": "Operating system type of the machines in the pool",
          "enum": [
            "windows",
            "linux"
          ],
          "x-ms-enum": {
            "name": "OperatingSystemType",
            "values": [
              {
                "value": "windows",
                "description": ""
              },
              {
                "value": "linux",
                "description": ""
              }
            ]
          }
        },
        "recycleAfterEachUse": {
          "description": "Discard machines after each job completes",
          "type": "boolean"
        },
        "serviceEndpointId": {
          "description": "Id of the Service Endpoint used to connect to Azure",
          "type": "string",
          "format": "uuid"
        },
        "serviceEndpointScope": {
          "description": "Scope the Service Endpoint belongs to",
          "type": "string",
          "format": "uuid"
        },
        "timeToLiveMinutes": {
          "description": "The minimum time in minutes to keep idle agents alive",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "EndpointAuthorization": {
      "description": "",
      "type": "object",
      "properties": {
        "parameters": {
          "description": "Gets or sets the parameters for the selected authorization scheme.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "scheme": {
          "description": "Gets or sets the scheme used for service endpoint authentication.",
          "type": "string"
        }
      }
    },
    "EndpointUrl": {
      "description": "Represents url of the service endpoint.",
      "type": "object",
      "properties": {
        "dependsOn": {
          "description": "Gets or sets the dependency bindings.",
          "$ref": "#/definitions/DependsOn"
        },
        "displayName": {
          "description": "Gets or sets the display name of service endpoint url.",
          "type": "string"
        },
        "helpText": {
          "description": "Gets or sets the help text of service endpoint url.",
          "type": "string"
        },
        "isVisible": {
          "description": "Gets or sets the visibility of service endpoint url.",
          "type": "string"
        },
        "value": {
          "description": "Gets or sets the value of service endpoint url.",
          "type": "string"
        }
      }
    },
    "EnvironmentCreateParameter": {
      "description": "Properties to create Environment.",
      "type": "object",
      "properties": {
        "description": {
          "description": "Description of the environment.",
          "type": "string"
        },
        "name": {
          "description": "Name of the environment.",
          "type": "string"
        }
      }
    },
    "EnvironmentDeploymentExecutionRecord": {
      "description": "EnvironmentDeploymentExecutionRecord.",
      "type": "object",
      "properties": {
        "definition": {
          "description": "Definition of the environment deployment execution owner",
          "$ref": "#/definitions/TaskOrchestrationOwner"
        },
        "environmentId": {
          "description": "Id of the Environment",
          "type": "integer",
          "format": "int32"
        },
        "finishTime": {
          "description": "Finish time of the environment deployment execution",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "Id of the Environment deployment execution history record",
          "type": "integer",
          "format": "int64"
        },
        "jobAttempt": {
          "description": "Job Attempt",
          "type": "integer",
          "format": "int32"
        },
        "jobName": {
          "description": "Job name",
          "type": "string"
        },
        "owner": {
          "description": "Owner of the environment deployment execution record",
          "$ref": "#/definitions/TaskOrchestrationOwner"
        },
        "planId": {
          "description": "Plan Id",
          "type": "string",
          "format": "uuid"
        },
        "planType": {
          "description": "Plan type of the environment deployment execution record",
          "type": "string"
        },
        "queueTime": {
          "description": "Queue time of the environment deployment execution",
          "type": "string",
          "format": "date-time"
        },
        "requestIdentifier": {
          "description": "Request identifier of the Environment deployment execution history record",
          "type": "string"
        },
        "resourceId": {
          "description": "Resource Id",
          "type": "integer",
          "format": "int32"
        },
        "result": {
          "description": "Result of the environment deployment execution",
          "enum": [
            "succeeded",
            "succeededWithIssues",
            "failed",
            "canceled",
            "skipped",
            "abandoned"
          ],
          "x-ms-enum": {
            "name": "TaskResult",
            "values": [
              {
                "value": "succeeded",
                "description": ""
              },
              {
                "value": "succeededWithIssues",
                "description": ""
              },
              {
                "value": "failed",
                "description": ""
              },
              {
                "value": "canceled",
                "description": ""
              },
              {
                "value": "skipped",
                "description": ""
              },
              {
                "value": "abandoned",
                "description": ""
              }
            ]
          }
        },
        "scopeId": {
          "description": "Project Id",
          "type": "string",
          "format": "uuid"
        },
        "serviceOwner": {
          "description": "Service owner Id",
          "type": "string",
          "format": "uuid"
        },
        "stageAttempt": {
          "description": "Stage Attempt",
          "type": "integer",
          "format": "int32"
        },
        "stageName": {
          "description": "Stage name",
          "type": "string"
        },
        "startTime": {
          "description": "Start time of the environment deployment execution",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "EnvironmentInstance": {
      "description": "Environment.",
      "type": "object",
      "properties": {
        "createdBy": {
          "description": "Identity reference of the user who created the Environment.",
          "$ref": "#/definitions/IdentityRef"
        },
        "createdOn": {
          "description": "Creation time of the Environment",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "Description of the Environment.",
          "type": "string"
        },
        "id": {
          "description": "Id of the Environment",
          "type": "integer",
          "format": "int32"
        },
        "lastModifiedBy": {
          "description": "Identity reference of the user who last modified the Environment.",
          "$ref": "#/definitions/IdentityRef"
        },
        "lastModifiedOn": {
          "description": "Last modified time of the Environment",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "Name of the Environment.",
          "type": "string"
        },
        "project": {
          "description": "Project information for environment.",
          "$ref": "#/definitions/ProjectReference"
        },
        "resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvironmentResourceReference"
          }
        }
      }
    },
    "EnvironmentLinkedResourceReference": {
      "description": "EnvironmentLinkedResourceReference.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of the resource.",
          "type": "string"
        },
        "typeName": {
          "description": "Type of resource.",
          "type": "string"
        }
      }
    },
    "EnvironmentReference": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "EnvironmentResource": {
      "description": "",
      "type": "object",
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/IdentityRef"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "environmentReference": {
          "$ref": "#/definitions/EnvironmentReference"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "lastModifiedBy": {
          "$ref": "#/definitions/IdentityRef"
        },
        "lastModifiedOn": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "tags": {
          "description": "Tags of the Environment Resource.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "description": "Environment resource type",
          "enum": [
            "undefined",
            "generic",
            "virtualMachine",
            "kubernetes"
          ],
          "x-ms-enum": {
            "name": "EnvironmentResourceType",
            "values": [
              {
                "value": "undefined",
                "description": ""
              },
              {
                "value": "generic",
                "description": "Unknown resource type"
              },
              {
                "value": "virtualMachine",
                "description": "Virtual machine resource type"
              },
              {
                "value": "kubernetes",
                "description": "Kubernetes resource type"
              }
            ]
          }
        }
      }
    },
    "EnvironmentResourceDeploymentExecutionRecord": {
      "description": "EnvironmentResourceDeploymentExecutionRecord.",
      "type": "object",
      "properties": {
        "environmentId": {
          "description": "Id of the Environment",
          "type": "integer",
          "format": "int32"
        },
        "finishTime": {
          "description": "Finish time of the environment resource deployment execution",
          "type": "string",
          "format": "date-time"
        },
        "requestId": {
          "description": "Id of the Environment deployment execution history record",
          "type": "integer",
          "format": "int64"
        },
        "resourceId": {
          "description": "Resource Id",
          "type": "integer",
          "format": "int32"
        },
        "result": {
          "description": "Result of the environment deployment execution",
          "enum": [
            "succeeded",
            "succeededWithIssues",
            "failed",
            "canceled",
            "skipped",
            "abandoned"
          ],
          "x-ms-enum": {
            "name": "TaskResult",
            "values": [
              {
                "value": "succeeded",
                "description": ""
              },
              {
                "value": "succeededWithIssues",
                "description": ""
              },
              {
                "value": "failed",
                "description": ""
              },
              {
                "value": "canceled",
                "description": ""
              },
              {
                "value": "skipped",
                "description": ""
              },
              {
                "value": "abandoned",
                "description": ""
              }
            ]
          }
        },
        "startTime": {
          "description": "Start time of the environment resource deployment execution",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "EnvironmentResourceReference": {
      "description": "EnvironmentResourceReference.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of the resource.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name of the resource.",
          "type": "string"
        },
        "tags": {
          "description": "Tags of the Environment Resource Reference.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "description": "Type of the resource.",
          "enum": [
            "undefined",
            "generic",
            "virtualMachine",
            "kubernetes"
          ],
          "x-ms-enum": {
            "name": "EnvironmentResourceType",
            "values": [
              {
                "value": "undefined",
                "description": ""
              },
              {
                "value": "generic",
                "description": "Unknown resource type"
              },
              {
                "value": "virtualMachine",
                "description": "Virtual machine resource type"
              },
              {
                "value": "kubernetes",
                "description": "Kubernetes resource type"
              }
            ]
          }
        }
      }
    },
    "EnvironmentUpdateParameter": {
      "description": "Properties to update Environment.",
      "type": "object",
      "properties": {
        "description": {
          "description": "Description of the environment.",
          "type": "string"
        },
        "name": {
          "description": "Name of the environment.",
          "type": "string"
        }
      }
    },
    "EventsConfig": {
      "description": "",
      "type": "object",
      "properties": {}
    },
    "ExpressionValidationItem": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ValidationItem"
        }
      ],
      "properties": {}
    },
    "GraphSubjectBase": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "description": "This field contains zero or more interesting links about the graph subject. These links may be invoked to obtain additional relationships or more detailed information about this graph subject.",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "descriptor": {
          "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.",
          "type": "string"
        },
        "displayName": {
          "description": "This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.",
          "type": "string"
        },
        "url": {
          "description": "This url is the full route to the source resource of this graph subject.",
          "type": "string"
        }
      }
    },
    "HelpLink": {
      "description": "",
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "IdentityRef": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GraphSubjectBase"
        }
      ],
      "properties": {
        "directoryAlias": {
          "description": "Deprecated - Can be retrieved by querying the Graph user referenced in the \"self\" entry of the IdentityRef \"_links\" dictionary",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "imageUrl": {
          "description": "Deprecated - Available in the \"avatar\" entry of the IdentityRef \"_links\" dictionary",
          "type": "string"
        },
        "inactive": {
          "description": "Deprecated - Can be retrieved by querying the Graph membership state referenced in the \"membershipState\" entry of the GraphUser \"_links\" dictionary",
          "type": "boolean"
        },
        "isAadIdentity": {
          "description": "Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsAadUserType/Descriptor.IsAadGroupType)",
          "type": "boolean"
        },
        "isContainer": {
          "description": "Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsGroupType)",
          "type": "boolean"
        },
        "isDeletedInOrigin": {
          "type": "boolean"
        },
        "profileUrl": {
          "description": "Deprecated - not in use in most preexisting implementations of ToIdentityRef",
          "type": "string"
        },
        "uniqueName": {
          "description": "Deprecated - use Domain+PrincipalName instead",
          "type": "string"
        }
      }
    },
    "InputBindingContext": {
      "description": "",
      "type": "object",
      "properties": {
        "value": {
          "description": "Value of the input",
          "type": "string"
        }
      }
    },
    "InputDescriptor": {
      "description": "Describes an input for subscriptions.",
      "type": "object",
      "properties": {
        "dependencyInputIds": {
          "description": "The ids of all inputs that the value of this input is dependent on.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "description": "Description of what this input is used for",
          "type": "string"
        },
        "groupName": {
          "description": "The group localized name to which this input belongs and can be shown as a header for the container that will include all the inputs in the group.",
          "type": "string"
        },
        "hasDynamicValueInformation": {
          "description": "If true, the value information for this input is dynamic and should be fetched when the value of dependency inputs change.",
          "type": "boolean"
        },
        "id": {
          "description": "Identifier for the subscription input",
          "type": "string"
        },
        "inputMode": {
          "description": "Mode in which the value of this input should be entered",
          "enum": [
            "none",
            "textBox",
            "passwordBox",
            "combo",
            "radioButtons",
            "checkBox",
            "textArea"
          ],
          "x-ms-enum": {
            "name": "InputMode",
            "values": [
              {
                "value": "none",
                "description": "This input should not be shown in the UI"
              },
              {
                "value": "textBox",
                "description": "An input text box should be shown"
              },
              {
                "value": "passwordBox",
                "description": "An password input box should be shown"
              },
              {
                "value": "combo",
                "description": "A select/combo control should be shown"
              },
              {
                "value": "radioButtons",
                "description": "Radio buttons should be shown"
              },
              {
                "value": "checkBox",
                "description": "Checkbox should be shown(for true/false values)"
              },
              {
                "value": "textArea",
                "description": "A multi-line text area should be shown"
              }
            ]
          }
        },
        "isConfidential": {
          "description": "Gets whether this input is confidential, such as for a password or application key",
          "type": "boolean"
        },
        "name": {
          "description": "Localized name which can be shown as a label for the subscription input",
          "type": "string"
        },
        "properties": {
          "description": "Custom properties for the input which can be used by the service provider",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "type": {
          "description": "Underlying data type for the input value. When this value is specified, InputMode, Validation and Values are optional.",
          "type": "string"
        },
        "useInDefaultDescription": {
          "description": "Gets whether this input is included in the default generated action description.",
          "type": "boolean"
        },
        "validation": {
          "description": "Information to use to validate this input's value",
          "$ref": "#/definitions/InputValidation"
        },
        "valueHint": {
          "description": "A hint for input value. It can be used in the UI as the input placeholder.",
          "type": "string"
        },
        "values": {
          "description": "Information about possible values for this input",
          "$ref": "#/definitions/InputValues"
        }
      }
    },
    "InputValidation": {
      "description": "Describes what values are valid for a subscription input",
      "type": "object",
      "properties": {
        "dataType": {
          "description": "Gets or sets the data type to validate.",
          "enum": [
            "none",
            "string",
            "number",
            "boolean",
            "guid",
            "uri"
          ],
          "x-ms-enum": {
            "name": "InputDataType",
            "values": [
              {
                "value": "none",
                "description": "No data type is specified."
              },
              {
                "value": "string",
                "description": "Represents a textual value."
              },
              {
                "value": "number",
                "description": "Represents a numeric value."
              },
              {
                "value": "boolean",
                "description": "Represents a value of true or false."
              },
              {
                "value": "guid",
                "description": "Represents a Guid."
              },
              {
                "value": "uri",
                "description": "Represents a URI."
              }
            ]
          }
        },
        "isRequired": {
          "description": "Gets or sets if this is a required field.",
          "type": "boolean"
        },
        "maxLength": {
          "description": "Gets or sets the maximum length of this descriptor.",
          "type": "integer",
          "format": "int32"
        },
        "maxValue": {
          "description": "Gets or sets the minimum value for this descriptor.",
          "type": "string",
          "format": "decimal"
        },
        "minLength": {
          "description": "Gets or sets the minimum length of this descriptor.",
          "type": "integer",
          "format": "int32"
        },
        "minValue": {
          "description": "Gets or sets the minimum value for this descriptor.",
          "type": "string",
          "format": "decimal"
        },
        "pattern": {
          "description": "Gets or sets the pattern to validate.",
          "type": "string"
        },
        "patternMismatchErrorMessage": {
          "description": "Gets or sets the error on pattern mismatch.",
          "type": "string"
        }
      }
    },
    "InputValidationItem": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ValidationItem"
        }
      ],
      "properties": {
        "context": {
          "description": "Provides binding context for the expression to evaluate",
          "$ref": "#/definitions/InputBindingContext"
        }
      }
    },
    "InputValidationRequest": {
      "description": "",
      "type": "object",
      "properties": {
        "inputs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ValidationItem"
          }
        }
      }
    },
    "InputValue": {
      "description": "Information about a single value for an input",
      "type": "object",
      "properties": {
        "data": {
          "description": "Any other data about this input",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "displayValue": {
          "description": "The text to show for the display of this value",
          "type": "string"
        },
        "value": {
          "description": "The value to store for this input",
          "type": "string"
        }
      }
    },
    "InputValues": {
      "description": "Information about the possible/allowed values for a given subscription input",
      "type": "object",
      "properties": {
        "defaultValue": {
          "description": "The default value to use for this input",
          "type": "string"
        },
        "error": {
          "description": "Errors encountered while computing dynamic values.",
          "$ref": "#/definitions/InputValuesError"
        },
        "inputId": {
          "description": "The id of the input",
          "type": "string"
        },
        "isDisabled": {
          "description": "Should this input be disabled",
          "type": "boolean"
        },
        "isLimitedToPossibleValues": {
          "description": "Should the value be restricted to one of the values in the PossibleValues (True) or are the values in PossibleValues just a suggestion (False)",
          "type": "boolean"
        },
        "isReadOnly": {
          "description": "Should this input be made read-only",
          "type": "boolean"
        },
        "possibleValues": {
          "description": "Possible values that this input can take",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputValue"
          }
        }
      }
    },
    "InputValuesError": {
      "description": "Error information related to a subscription input value.",
      "type": "object",
      "properties": {
        "message": {
          "description": "The error message.",
          "type": "string"
        }
      }
    },
    "Issue": {
      "description": "An issue (error, warning) associated with a pipeline run.",
      "type": "object",
      "properties": {
        "category": {
          "description": "The category of the issue. <br />Example: Code - refers to compilation errors <br />Example: General - refers to generic errors",
          "type": "string"
        },
        "data": {
          "description": "A dictionary containing details about the issue.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "message": {
          "description": "A description of issue.",
          "type": "string"
        },
        "type": {
          "description": "The type (error, warning) of the issue.",
          "enum": [
            "error",
            "warning"
          ],
          "x-ms-enum": {
            "name": "IssueType",
            "values": [
              {
                "value": "error",
                "description": ""
              },
              {
                "value": "warning",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "JobAssignedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JobEvent"
        }
      ],
      "properties": {
        "request": {
          "description": "A pipeline job request for an agent.",
          "$ref": "#/definitions/TaskAgentJobRequest"
        }
      }
    },
    "JobCanceledEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JobEvent"
        }
      ],
      "properties": {
        "reason": {
          "description": "The reason for job cancellation.",
          "type": "string"
        },
        "timeout": {
          "description": "The job's timeout interval.",
          "type": "string",
          "format": "TimeSpan"
        }
      }
    },
    "JobCancelMessage": {
      "description": "",
      "type": "object",
      "properties": {
        "jobId": {
          "type": "string",
          "format": "uuid"
        },
        "timeout": {
          "type": "string",
          "format": "TimeSpan"
        }
      }
    },
    "JobCompletedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JobEvent"
        }
      ],
      "properties": {
        "agentShuttingDown": {
          "description": "Indicates whether the agent is in the process of shutting down.",
          "type": "boolean"
        },
        "requestId": {
          "description": "The ID of the request.",
          "type": "integer",
          "format": "int64"
        },
        "result": {
          "description": "The result of the request.",
          "enum": [
            "succeeded",
            "succeededWithIssues",
            "failed",
            "canceled",
            "skipped",
            "abandoned"
          ],
          "x-ms-enum": {
            "name": "TaskResult",
            "values": [
              {
                "value": "succeeded",
                "description": ""
              },
              {
                "value": "succeededWithIssues",
                "description": ""
              },
              {
                "value": "failed",
                "description": ""
              },
              {
                "value": "canceled",
                "description": ""
              },
              {
                "value": "skipped",
                "description": ""
              },
              {
                "value": "abandoned",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "JobEnvironment": {
      "description": "Represents the context of variables and vectors for a job request.",
      "type": "object",
      "properties": {
        "endpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceEndpoint"
          }
        },
        "mask": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MaskHint"
          }
        },
        "options": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JobOption"
          }
        },
        "secureFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecureFile"
          }
        },
        "systemConnection": {
          "description": "Gets or sets the endpoint used for communicating back to the calling service.",
          "$ref": "#/definitions/ServiceEndpoint"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "JobEvent": {
      "description": "A pipeline job event to be processed by the execution plan.",
      "type": "object",
      "properties": {
        "jobId": {
          "description": "The ID of the pipeline job affected by the event.",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "The name of the pipeline job event.",
          "type": "string"
        }
      }
    },
    "JobEventConfig": {
      "description": "",
      "type": "object",
      "properties": {
        "timeout": {
          "type": "string"
        }
      }
    },
    "JobEventsConfig": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EventsConfig"
        }
      ],
      "properties": {
        "jobAssigned": {
          "$ref": "#/definitions/JobEventConfig"
        },
        "jobCompleted": {
          "$ref": "#/definitions/JobEventConfig"
        },
        "jobStarted": {
          "$ref": "#/definitions/JobEventConfig"
        }
      }
    },
    "JObject": {
      "description": "Represents a JSON object.",
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/JToken"
        },
        "type": {
          "description": "Gets the node type for this JToken.",
          "type": "string",
          "format": "JTokenType"
        }
      }
    },
    "JobMetadataEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JobEvent"
        }
      ],
      "properties": {
        "message": {
          "description": "A message to be sent to an agent currently running the job.",
          "$ref": "#/definitions/JobMetadataMessage"
        }
      }
    },
    "JobMetadataMessage": {
      "description": "A message to be sent to an agent currently running the job.",
      "type": "object",
      "properties": {
        "jobId": {
          "description": "The id of the job.",
          "type": "string",
          "format": "uuid"
        },
        "postLinesFrequencyMillis": {
          "description": "The agent's frequency of posting lines to the logs console expressed in milliseconds. There are 2 modes: Slow (10 seconds) and Fast (half a second).",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "JobOption": {
      "description": "Represents an option that may affect the way an agent runs the job.",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "id": {
          "description": "Gets the id of the option.",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "JobRequestMessage": {
      "description": "",
      "type": "object",
      "properties": {
        "environment": {
          "$ref": "#/definitions/JobEnvironment"
        },
        "jobId": {
          "type": "string",
          "format": "uuid"
        },
        "jobName": {
          "type": "string"
        },
        "jobRefName": {
          "type": "string"
        },
        "messageType": {
          "type": "string"
        },
        "plan": {
          "$ref": "#/definitions/TaskOrchestrationPlanReference"
        },
        "timeline": {
          "$ref": "#/definitions/TimelineReference"
        }
      }
    },
    "JobStartedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JobEvent"
        }
      ],
      "properties": {}
    },
    "JToken": {
      "description": "Represents an abstract JSON token.",
      "type": "object",
      "properties": {
        "first": {
          "description": "Get the first child token of this token.",
          "$ref": "#/definitions/JToken"
        },
        "hasValues": {
          "description": "Gets a value indicating whether this token has child tokens.",
          "type": "boolean"
        },
        "item": {
          "$ref": "#/definitions/JToken"
        },
        "last": {
          "description": "Get the last child token of this token.",
          "$ref": "#/definitions/JToken"
        },
        "next": {
          "description": "Gets the next sibling token of this node.",
          "$ref": "#/definitions/JToken"
        },
        "parent": {
          "description": "Gets or sets the parent.",
          "type": "string",
          "format": "JContainer"
        },
        "path": {
          "description": "Gets the path of the JSON token.",
          "type": "string"
        },
        "previous": {
          "description": "Gets the previous sibling token of this node.",
          "$ref": "#/definitions/JToken"
        },
        "root": {
          "description": "Gets the root JToken of this JToken.",
          "$ref": "#/definitions/JToken"
        },
        "type": {
          "description": "Gets the node type for this JToken.",
          "type": "string",
          "format": "JTokenType"
        }
      }
    },
    "KubernetesResource": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EnvironmentResource"
        }
      ],
      "properties": {
        "clusterName": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "serviceEndpointId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "KubernetesResourceCreateParameters": {
      "description": "",
      "type": "object",
      "properties": {
        "clusterName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "tags": {
          "description": "Tags of the kubernetes resource.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "KubernetesResourceCreateParametersExistingEndpoint": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/KubernetesResourceCreateParameters"
        }
      ],
      "properties": {
        "serviceEndpointId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "KubernetesResourceCreateParametersNewEndpoint": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/KubernetesResourceCreateParameters"
        }
      ],
      "properties": {
        "endpoint": {
          "$ref": "#/definitions/ServiceEndpoint"
        }
      }
    },
    "KubernetesResourcePatchParameters": {
      "description": "",
      "type": "object",
      "properties": {
        "authorizationParameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "providerType": {
          "description": "Provider type (CustomProvider or AzureKubernetesServiceProvider) of the resource to be updated",
          "type": "string"
        },
        "resourceId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "MarketplacePurchasedLicense": {
      "description": "Represents a purchase of resource units in a secondary marketplace.",
      "type": "object",
      "properties": {
        "marketplaceName": {
          "description": "The Marketplace display name.",
          "type": "string"
        },
        "purchaserName": {
          "description": "The name of the identity making the purchase as seen by the marketplace",
          "type": "string"
        },
        "purchaseUnitCount": {
          "description": "The quantity purchased.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "MaskHint": {
      "description": "",
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "variable",
            "regex"
          ],
          "x-ms-enum": {
            "name": "MaskType",
            "values": [
              {
                "value": "variable",
                "description": ""
              },
              {
                "value": "regex",
                "description": ""
              }
            ]
          }
        },
        "value": {
          "type": "string"
        }
      }
    },
    "MetricsColumnMetaData": {
      "description": "Meta data for a metrics column.",
      "type": "object",
      "properties": {
        "columnName": {
          "description": "Name.",
          "type": "string"
        },
        "columnValueType": {
          "description": "Data type.",
          "type": "string"
        }
      }
    },
    "MetricsColumnsHeader": {
      "description": "Metrics columns header",
      "type": "object",
      "properties": {
        "dimensions": {
          "description": "Properties of deployment group for which metrics are provided. E.g. 1: LastJobStatus E.g. 2: TargetState",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricsColumnMetaData"
          }
        },
        "metrics": {
          "description": "The types of metrics. E.g. 1: total count of deployment targets. E.g. 2: Average time of deployment to the deployment targets.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricsColumnMetaData"
          }
        }
      }
    },
    "MetricsRow": {
      "description": "Metrics row.",
      "type": "object",
      "properties": {
        "dimensions": {
          "description": "The values of the properties mentioned as 'Dimensions' in column header. E.g. 1: For a property 'LastJobStatus' - metrics will be provided for 'passed', 'failed', etc. E.g. 2: For a property 'TargetState' - metrics will be provided for 'online', 'offline' targets.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metrics": {
          "description": "Metrics in serialized format. Should be deserialized based on the data type provided in header.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PackageMetadata": {
      "description": "Represents a downloadable package.",
      "type": "object",
      "properties": {
        "createdOn": {
          "description": "The date the package was created",
          "type": "string",
          "format": "date-time"
        },
        "downloadUrl": {
          "description": "A direct link to download the package.",
          "type": "string"
        },
        "filename": {
          "description": "The UI uses this to display instructions, i.e. \"unzip MyAgent.zip\"",
          "type": "string"
        },
        "hashValue": {
          "description": "MD5 hash as a base64 string",
          "type": "string"
        },
        "infoUrl": {
          "description": "A link to documentation",
          "type": "string"
        },
        "platform": {
          "description": "The platform (win7, linux, etc.)",
          "type": "string"
        },
        "type": {
          "description": "The type of package (e.g. \"agent\")",
          "type": "string"
        },
        "version": {
          "description": "The package version.",
          "$ref": "#/definitions/PackageVersion"
        }
      }
    },
    "PackageVersion": {
      "description": "",
      "type": "object",
      "properties": {
        "major": {
          "type": "integer",
          "format": "int32"
        },
        "minor": {
          "type": "integer",
          "format": "int32"
        },
        "patch": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PlanEnvironment": {
      "description": "",
      "type": "object",
      "properties": {
        "mask": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MaskHint"
          }
        },
        "options": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JobOption"
          }
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ProjectReference": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "PropertiesCollection": {
      "description": "The class represents a property bag as a collection of key-value pairs. Values of all primitive types (any type with a `TypeCode != TypeCode.Object`) except for `DBNull` are accepted. Values of type Byte[], Int32, Double, DateType and String preserve their type, other primitives are retuned as a String. Byte[] expected as base64 encoded string.",
      "type": "object",
      "properties": {
        "count": {
          "description": "The count of properties in the collection.",
          "type": "integer",
          "format": "int32"
        },
        "item": {
          "type": "object"
        },
        "keys": {
          "description": "The set of keys in the collection.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "values": {
          "description": "The set of values in the collection.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PublishTaskGroupMetadata": {
      "description": "",
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "parentDefinitionRevision": {
          "type": "integer",
          "format": "int32"
        },
        "preview": {
          "type": "boolean"
        },
        "taskGroupId": {
          "type": "string",
          "format": "uuid"
        },
        "taskGroupRevision": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ReferenceLinks": {
      "description": "The class to represent a collection of REST reference links.",
      "type": "object",
      "properties": {
        "links": {
          "description": "The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ResourceFilterOptions": {
      "description": "",
      "type": "object",
      "properties": {
        "identities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IdentityRef"
          }
        },
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResourceFilters": {
      "description": "",
      "type": "object",
      "properties": {
        "createdBy": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "resourceType": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "searchText": {
          "type": "string"
        }
      }
    },
    "ResourceItem": {
      "description": "Resources include Service Connections, Variable Groups and Secure Files.",
      "type": "object",
      "properties": {
        "createdBy": {
          "description": "Gets or sets the identity who created the resource.",
          "$ref": "#/definitions/IdentityRef"
        },
        "description": {
          "description": "Gets or sets description of the resource.",
          "type": "string"
        },
        "iconUrl": {
          "description": "Gets or sets icon url of the resource.",
          "type": "string"
        },
        "id": {
          "description": "Gets or sets Id of the resource.",
          "type": "string"
        },
        "isShared": {
          "description": "Indicates whether resource is shared with other projects or not.",
          "type": "boolean"
        },
        "name": {
          "description": "Gets or sets name of the resource.",
          "type": "string"
        },
        "properties": {
          "description": "Gets or sets internal properties of the resource.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "resourceType": {
          "description": "Gets or sets resource type.",
          "type": "string"
        }
      }
    },
    "ResourceLimit": {
      "description": "",
      "type": "object",
      "properties": {
        "failedToReachAllProviders": {
          "type": "boolean"
        },
        "hostId": {
          "type": "string",
          "format": "uuid"
        },
        "isHosted": {
          "type": "boolean"
        },
        "isPremium": {
          "type": "boolean"
        },
        "parallelismTag": {
          "type": "string"
        },
        "resourceLimitsData": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        },
        "totalMinutes": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ResourceLockRequest": {
      "description": "A request for a resource's exclusive lock",
      "type": "object",
      "properties": {
        "assignTime": {
          "description": "The date/time this request was assigned.",
          "type": "string",
          "format": "date-time"
        },
        "checkRunId": {
          "description": "The ID of the check run waiting on this request",
          "type": "string",
          "format": "uuid"
        },
        "definitionId": {
          "description": "The ID of the pipeline that requested this resource",
          "type": "integer",
          "format": "int32"
        },
        "finishTime": {
          "description": "The date/time this request was finished.",
          "type": "string",
          "format": "date-time"
        },
        "lockType": {
          "description": "The behavior this request should exhibit in relation to other lock requests",
          "enum": [
            "runLatest",
            "sequential"
          ],
          "x-ms-enum": {
            "name": "ExclusiveLockType",
            "values": [
              {
                "value": "runLatest",
                "description": ""
              },
              {
                "value": "sequential",
                "description": ""
              }
            ]
          }
        },
        "nodeAttempt": {
          "description": "Attempt of the graph node",
          "type": "integer",
          "format": "int32"
        },
        "nodeName": {
          "description": "Name of the graph node (currently stage) requesting this resource",
          "type": "string"
        },
        "planId": {
          "description": "Internal ID for the orchestration plan connected with this request.",
          "type": "string",
          "format": "uuid"
        },
        "projectId": {
          "description": "The ID of the project of the check run and definition exist in",
          "type": "string",
          "format": "uuid"
        },
        "queueTime": {
          "description": "The date/time this request was queued.",
          "type": "string",
          "format": "date-time"
        },
        "requestId": {
          "description": "ID of the request.",
          "type": "integer",
          "format": "int64"
        },
        "resourceId": {
          "description": "The id of the resource",
          "type": "string"
        },
        "resourceType": {
          "description": "The type of the resource",
          "type": "string"
        },
        "status": {
          "description": "The result of this request.",
          "enum": [
            "queued",
            "inUse",
            "finished",
            "timedOut",
            "canceled",
            "abandoned",
            "waitingOnChecks"
          ],
          "x-ms-enum": {
            "name": "ResourceLockStatus",
            "values": [
              {
                "value": "queued",
                "description": ""
              },
              {
                "value": "inUse",
                "description": ""
              },
              {
                "value": "finished",
                "description": ""
              },
              {
                "value": "timedOut",
                "description": ""
              },
              {
                "value": "canceled",
                "description": ""
              },
              {
                "value": "abandoned",
                "description": ""
              },
              {
                "value": "waitingOnChecks",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "ResourcesHubData": {
      "description": "",
      "type": "object",
      "properties": {
        "continuationToken": {
          "type": "string"
        },
        "hasProjectLevelManagePermission": {
          "type": "boolean"
        },
        "resourceFilterOptions": {
          "$ref": "#/definitions/ResourceFilterOptions"
        },
        "resourceFilters": {
          "$ref": "#/definitions/ResourceFilters"
        },
        "resourceItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceItem"
          }
        }
      }
    },
    "ResourceUsage": {
      "description": "",
      "type": "object",
      "properties": {
        "resourceLimit": {
          "$ref": "#/definitions/ResourceLimit"
        },
        "runningRequests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskAgentJobRequest"
          }
        },
        "usedCount": {
          "type": "integer",
          "format": "int32"
        },
        "usedMinutes": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ResultTransformationDetails": {
      "description": "",
      "type": "object",
      "properties": {
        "resultTemplate": {
          "type": "string"
        }
      }
    },
    "SecureFile": {
      "description": "",
      "type": "object",
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/IdentityRef"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "modifiedBy": {
          "$ref": "#/definitions/IdentityRef"
        },
        "modifiedOn": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ticket": {
          "type": "string"
        }
      }
    },
    "SecureFileEvent": {
      "description": "",
      "type": "object",
      "properties": {
        "eventType": {
          "type": "string"
        },
        "projectId": {
          "type": "string",
          "format": "uuid"
        },
        "secureFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecureFile"
          }
        }
      }
    },
    "SendJobResponse": {
      "description": "",
      "type": "object",
      "properties": {
        "events": {
          "$ref": "#/definitions/JobEventsConfig"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ServerExecutionDefinition": {
      "description": "",
      "type": "object",
      "properties": {
        "events": {
          "$ref": "#/definitions/EventsConfig"
        },
        "handlerName": {
          "type": "string"
        }
      }
    },
    "ServerTaskRequestMessage": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JobRequestMessage"
        }
      ],
      "properties": {
        "taskDefinition": {
          "$ref": "#/definitions/TaskDefinition"
        },
        "taskInstance": {
          "$ref": "#/definitions/TaskInstance"
        }
      }
    },
    "ServiceEndpoint": {
      "description": "Represents an endpoint which may be used by an orchestration job.",
      "type": "object",
      "properties": {
        "administratorsGroup": {
          "description": "Gets or sets the identity reference for the administrators group of the service endpoint.",
          "$ref": "#/definitions/IdentityRef"
        },
        "authorization": {
          "description": "Gets or sets the authorization data for talking to the endpoint.",
          "$ref": "#/definitions/EndpointAuthorization"
        },
        "createdBy": {
          "description": "Gets or sets the identity reference for the user who created the Service endpoint.",
          "$ref": "#/definitions/IdentityRef"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "description": {
          "description": "Gets or sets the description of endpoint.",
          "type": "string"
        },
        "groupScopeId": {
          "type": "string",
          "format": "uuid"
        },
        "id": {
          "description": "Gets or sets the identifier of this endpoint.",
          "type": "string",
          "format": "uuid"
        },
        "isReady": {
          "description": "EndPoint state indicator",
          "type": "boolean"
        },
        "isShared": {
          "description": "Indicates whether service endpoint is shared with other projects or not.",
          "type": "boolean"
        },
        "name": {
          "description": "Gets or sets the friendly name of the endpoint.",
          "type": "string"
        },
        "operationStatus": {
          "description": "Error message during creation/deletion of endpoint",
          "$ref": "#/definitions/JObject"
        },
        "owner": {
          "description": "Gets or sets the owner of the endpoint.",
          "type": "string"
        },
        "readersGroup": {
          "description": "Gets or sets the identity reference for the readers group of the service endpoint.",
          "$ref": "#/definitions/IdentityRef"
        },
        "type": {
          "description": "Gets or sets the type of the endpoint.",
          "type": "string"
        },
        "url": {
          "description": "Gets or sets the url of the endpoint.",
          "type": "string"
        }
      }
    },
    "ServiceEndpointAuthenticationScheme": {
      "description": "",
      "type": "object",
      "properties": {
        "authorizationHeaders": {
          "description": "Gets or sets the authorization headers of service endpoint authentication scheme.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthorizationHeader"
          }
        },
        "clientCertificates": {
          "description": "Gets or sets the certificates of service endpoint authentication scheme.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClientCertificate"
          }
        },
        "displayName": {
          "description": "Gets or sets the display name for the service endpoint authentication scheme.",
          "type": "string"
        },
        "inputDescriptors": {
          "description": "Gets or sets the input descriptors for the service endpoint authentication scheme.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputDescriptor"
          }
        },
        "scheme": {
          "description": "Gets or sets the scheme for service endpoint authentication.",
          "type": "string"
        }
      }
    },
    "ServiceEndpointDetails": {
      "description": "",
      "type": "object",
      "properties": {
        "authorization": {
          "$ref": "#/definitions/EndpointAuthorization"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "ServiceEndpointExecutionData": {
      "description": "Represents service endpoint execution data.",
      "type": "object",
      "properties": {
        "definition": {
          "description": "Gets the definition of service endpoint execution owner.",
          "$ref": "#/definitions/TaskOrchestrationOwner"
        },
        "finishTime": {
          "description": "Gets the finish time of service endpoint execution.",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "Gets the Id of service endpoint execution data.",
          "type": "integer",
          "format": "int64"
        },
        "owner": {
          "description": "Gets the owner of service endpoint execution data.",
          "$ref": "#/definitions/TaskOrchestrationOwner"
        },
        "planType": {
          "description": "Gets the plan type of service endpoint execution data.",
          "type": "string"
        },
        "result": {
          "description": "Gets the result of service endpoint execution.",
          "enum": [
            "succeeded",
            "succeededWithIssues",
            "failed",
            "canceled",
            "skipped",
            "abandoned"
          ],
          "x-ms-enum": {
            "name": "TaskResult",
            "values": [
              {
                "value": "succeeded",
                "description": ""
              },
              {
                "value": "succeededWithIssues",
                "description": ""
              },
              {
                "value": "failed",
                "description": ""
              },
              {
                "value": "canceled",
                "description": ""
              },
              {
                "value": "skipped",
                "description": ""
              },
              {
                "value": "abandoned",
                "description": ""
              }
            ]
          }
        },
        "startTime": {
          "description": "Gets the start time of service endpoint execution.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ServiceEndpointExecutionRecord": {
      "description": "",
      "type": "object",
      "properties": {
        "data": {
          "description": "Gets the execution data of service endpoint execution.",
          "$ref": "#/definitions/ServiceEndpointExecutionData"
        },
        "endpointId": {
          "description": "Gets the Id of service endpoint.",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "ServiceEndpointExecutionRecordsInput": {
      "description": "",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ServiceEndpointExecutionData"
        },
        "endpointIds": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    },
    "ServiceEndpointRequest": {
      "description": "",
      "type": "object",
      "properties": {
        "dataSourceDetails": {
          "$ref": "#/definitions/DataSourceDetails"
        },
        "resultTransformationDetails": {
          "$ref": "#/definitions/ResultTransformationDetails"
        },
        "serviceEndpointDetails": {
          "$ref": "#/definitions/ServiceEndpointDetails"
        }
      }
    },
    "ServiceEndpointRequestResult": {
      "description": "",
      "type": "object",
      "properties": {
        "errorMessage": {
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/JToken"
        },
        "statusCode": {
          "enum": [
            "continue",
            "switchingProtocols",
            "ok",
            "created",
            "accepted",
            "nonAuthoritativeInformation",
            "noContent",
            "resetContent",
            "partialContent",
            "multipleChoices",
            "ambiguous",
            "movedPermanently",
            "moved",
            "found",
            "redirect",
            "seeOther",
            "redirectMethod",
            "notModified",
            "useProxy",
            "unused",
            "temporaryRedirect",
            "redirectKeepVerb",
            "badRequest",
            "unauthorized",
            "paymentRequired",
            "forbidden",
            "notFound",
            "methodNotAllowed",
            "notAcceptable",
            "proxyAuthenticationRequired",
            "requestTimeout",
            "conflict",
            "gone",
            "lengthRequired",
            "preconditionFailed",
            "requestEntityTooLarge",
            "requestUriTooLong",
            "unsupportedMediaType",
            "requestedRangeNotSatisfiable",
            "expectationFailed",
            "upgradeRequired",
            "internalServerError",
            "notImplemented",
            "badGateway",
            "serviceUnavailable",
            "gatewayTimeout",
            "httpVersionNotSupported"
          ],
          "x-ms-enum": {
            "name": "HttpStatusCode",
            "values": [
              {
                "value": "continue",
                "description": ""
              },
              {
                "value": "switchingProtocols",
                "description": ""
              },
              {
                "value": "ok",
                "description": ""
              },
              {
                "value": "created",
                "description": ""
              },
              {
                "value": "accepted",
                "description": ""
              },
              {
                "value": "nonAuthoritativeInformation",
                "description": ""
              },
              {
                "value": "noContent",
                "description": ""
              },
              {
                "value": "resetContent",
                "description": ""
              },
              {
                "value": "partialContent",
                "description": ""
              },
              {
                "value": "multipleChoices",
                "description": ""
              },
              {
                "value": "ambiguous",
                "description": ""
              },
              {
                "value": "movedPermanently",
                "description": ""
              },
              {
                "value": "moved",
                "description": ""
              },
              {
                "value": "found",
                "description": ""
              },
              {
                "value": "redirect",
                "description": ""
              },
              {
                "value": "seeOther",
                "description": ""
              },
              {
                "value": "redirectMethod",
                "description": ""
              },
              {
                "value": "notModified",
                "description": ""
              },
              {
                "value": "useProxy",
                "description": ""
              },
              {
                "value": "unused",
                "description": ""
              },
              {
                "value": "temporaryRedirect",
                "description": ""
              },
              {
                "value": "redirectKeepVerb",
                "description": ""
              },
              {
                "value": "badRequest",
                "description": ""
              },
              {
                "value": "unauthorized",
                "description": ""
              },
              {
                "value": "paymentRequired",
                "description": ""
              },
              {
                "value": "forbidden",
                "description": ""
              },
              {
                "value": "notFound",
                "description": ""
              },
              {
                "value": "methodNotAllowed",
                "description": ""
              },
              {
                "value": "notAcceptable",
                "description": ""
              },
              {
                "value": "proxyAuthenticationRequired",
                "description": ""
              },
              {
                "value": "requestTimeout",
                "description": ""
              },
              {
                "value": "conflict",
                "description": ""
              },
              {
                "value": "gone",
                "description": ""
              },
              {
                "value": "lengthRequired",
                "description": ""
              },
              {
                "value": "preconditionFailed",
                "description": ""
              },
              {
                "value": "requestEntityTooLarge",
                "description": ""
              },
              {
                "value": "requestUriTooLong",
                "description": ""
              },
              {
                "value": "unsupportedMediaType",
                "description": ""
              },
              {
                "value": "requestedRangeNotSatisfiable",
                "description": ""
              },
              {
                "value": "expectationFailed",
                "description": ""
              },
              {
                "value": "upgradeRequired",
                "description": ""
              },
              {
                "value": "internalServerError",
                "description": ""
              },
              {
                "value": "notImplemented",
                "description": ""
              },
              {
                "value": "badGateway",
                "description": ""
              },
              {
                "value": "serviceUnavailable",
                "description": ""
              },
              {
                "value": "gatewayTimeout",
                "description": ""
              },
              {
                "value": "httpVersionNotSupported",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "ServiceEndpointType": {
      "description": "Represents type of the service endpoint.",
      "type": "object",
      "properties": {
        "authenticationSchemes": {
          "description": "Authentication scheme of service endpoint type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceEndpointAuthenticationScheme"
          }
        },
        "dataSources": {
          "description": "Data sources of service endpoint type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataSource"
          }
        },
        "dependencyData": {
          "description": "Dependency data of service endpoint type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DependencyData"
          }
        },
        "description": {
          "description": "Gets or sets the description of service endpoint type.",
          "type": "string"
        },
        "displayName": {
          "description": "Gets or sets the display name of service endpoint type.",
          "type": "string"
        },
        "endpointUrl": {
          "description": "Gets or sets the endpoint url of service endpoint type.",
          "$ref": "#/definitions/EndpointUrl"
        },
        "helpLink": {
          "description": "Gets or sets the help link of service endpoint type.",
          "$ref": "#/definitions/HelpLink"
        },
        "helpMarkDown": {
          "type": "string"
        },
        "iconUrl": {
          "description": "Gets or sets the icon url of service endpoint type.",
          "type": "string"
        },
        "inputDescriptors": {
          "description": "Input descriptor of service endpoint type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputDescriptor"
          }
        },
        "name": {
          "description": "Gets or sets the name of service endpoint type.",
          "type": "string"
        },
        "trustedHosts": {
          "description": "Trusted hosts of a service endpoint type.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "uiContributionId": {
          "description": "Gets or sets the ui contribution id of service endpoint type.",
          "type": "string"
        }
      }
    },
    "TaskAgent": {
      "description": "A task agent.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskAgentReference"
        }
      ],
      "properties": {
        "assignedAgentCloudRequest": {
          "description": "The agent cloud request that's currently associated with this agent.",
          "$ref": "#/definitions/TaskAgentCloudRequest"
        },
        "assignedRequest": {
          "description": "The request which is currently assigned to this agent.",
          "$ref": "#/definitions/TaskAgentJobRequest"
        },
        "authorization": {
          "description": "Authorization information for this agent.",
          "$ref": "#/definitions/TaskAgentAuthorization"
        },
        "createdOn": {
          "description": "Date on which this agent was created.",
          "type": "string",
          "format": "date-time"
        },
        "lastCompletedRequest": {
          "description": "The last request which was completed by this agent.",
          "$ref": "#/definitions/TaskAgentJobRequest"
        },
        "maxParallelism": {
          "description": "Maximum job parallelism allowed for this agent.",
          "type": "integer",
          "format": "int32"
        },
        "pendingUpdate": {
          "description": "Pending update for this agent.",
          "$ref": "#/definitions/TaskAgentUpdate"
        },
        "properties": {
          "$ref": "#/definitions/PropertiesCollection"
        },
        "statusChangedOn": {
          "description": "Date on which the last connectivity status change occurred.",
          "type": "string",
          "format": "date-time"
        },
        "systemCapabilities": {
          "description": "System-defined capabilities supported by this agent's host. Warning: To set capabilities use the PUT method, PUT will completely overwrite existing capabilities.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "userCapabilities": {
          "description": "User-defined capabilities supported by this agent's host. Warning: To set capabilities use the PUT method, PUT will completely overwrite existing capabilities.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TaskAgentAuthorization": {
      "description": "Provides data necessary for authorizing the agent using OAuth 2.0 authentication flows.",
      "type": "object",
      "properties": {
        "authorizationUrl": {
          "description": "Endpoint used to obtain access tokens from the configured token service.",
          "type": "string"
        },
        "clientId": {
          "description": "Client identifier for this agent.",
          "type": "string",
          "format": "uuid"
        },
        "publicKey": {
          "description": "Public key used to verify the identity of this agent.",
          "$ref": "#/definitions/TaskAgentPublicKey"
        }
      }
    },
    "TaskAgentCloud": {
      "description": "",
      "type": "object",
      "properties": {
        "acquireAgentEndpoint": {
          "description": "Gets or sets a AcquireAgentEndpoint using which a request can be made to acquire new agent",
          "type": "string"
        },
        "acquisitionTimeout": {
          "type": "integer",
          "format": "int32"
        },
        "agentCloudId": {
          "type": "integer",
          "format": "int32"
        },
        "getAccountParallelismEndpoint": {
          "type": "string"
        },
        "getAgentDefinitionEndpoint": {
          "type": "string"
        },
        "getAgentRequestStatusEndpoint": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "internal": {
          "description": "Signifies that this Agent Cloud is internal and should not be user-manageable",
          "type": "boolean"
        },
        "maxParallelism": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "releaseAgentEndpoint": {
          "type": "string"
        },
        "sharedSecret": {
          "type": "string"
        },
        "type": {
          "description": "Gets or sets the type of the endpoint.",
          "type": "string"
        }
      }
    },
    "TaskAgentCloudRequest": {
      "description": "",
      "type": "object",
      "properties": {
        "agent": {
          "$ref": "#/definitions/TaskAgentReference"
        },
        "agentCloudId": {
          "type": "integer",
          "format": "int32"
        },
        "agentConnectedTime": {
          "type": "string",
          "format": "date-time"
        },
        "agentData": {
          "$ref": "#/definitions/JObject"
        },
        "agentSpecification": {
          "$ref": "#/definitions/JObject"
        },
        "pool": {
          "$ref": "#/definitions/TaskAgentPoolReference"
        },
        "provisionedTime": {
          "type": "string",
          "format": "date-time"
        },
        "provisionRequestTime": {
          "type": "string",
          "format": "date-time"
        },
        "releaseRequestTime": {
          "type": "string",
          "format": "date-time"
        },
        "requestId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "TaskAgentCloudType": {
      "description": "",
      "type": "object",
      "properties": {
        "displayName": {
          "description": "Gets or sets the display name of agent cloud type.",
          "type": "string"
        },
        "inputDescriptors": {
          "description": "Gets or sets the input descriptors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputDescriptor"
          }
        },
        "name": {
          "description": "Gets or sets the name of agent cloud type.",
          "type": "string"
        }
      }
    },
    "TaskAgentDowngrade": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskAgentUpdateReason"
        }
      ],
      "properties": {}
    },
    "TaskAgentJob": {
      "description": "",
      "type": "object",
      "properties": {
        "container": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "sidecarContainers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskAgentJobStep"
          }
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskAgentJobVariable"
          }
        }
      }
    },
    "TaskAgentJobRequest": {
      "description": "A job request for an agent.",
      "type": "object",
      "properties": {
        "agentSpecification": {
          "$ref": "#/definitions/JObject"
        },
        "assignTime": {
          "description": "The date/time this request was assigned.",
          "type": "string",
          "format": "date-time"
        },
        "data": {
          "description": "Additional data about the request.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "definition": {
          "description": "The pipeline definition associated with this request",
          "$ref": "#/definitions/TaskOrchestrationOwner"
        },
        "demands": {
          "description": "A list of demands required to fulfill this request.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Demand"
          }
        },
        "finishTime": {
          "description": "The date/time this request was finished.",
          "type": "string",
          "format": "date-time"
        },
        "hostId": {
          "description": "The host which triggered this request.",
          "type": "string",
          "format": "uuid"
        },
        "jobId": {
          "description": "ID of the job resulting from this request.",
          "type": "string",
          "format": "uuid"
        },
        "jobName": {
          "description": "Name of the job resulting from this request.",
          "type": "string"
        },
        "lockedUntil": {
          "description": "The deadline for the agent to renew the lock.",
          "type": "string",
          "format": "date-time"
        },
        "matchedAgents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskAgentReference"
          }
        },
        "matchesAllAgentsInPool": {
          "type": "boolean"
        },
        "orchestrationId": {
          "type": "string"
        },
        "owner": {
          "description": "The pipeline associated with this request",
          "$ref": "#/definitions/TaskOrchestrationOwner"
        },
        "planGroup": {
          "type": "string"
        },
        "planId": {
          "description": "Internal ID for the orchestration plan connected with this request.",
          "type": "string",
          "format": "uuid"
        },
        "planType": {
          "description": "Internal detail representing the type of orchestration plan.",
          "type": "string"
        },
        "poolId": {
          "description": "The ID of the pool this request targets",
          "type": "integer",
          "format": "int32"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "queueId": {
          "description": "The ID of the queue this request targets",
          "type": "integer",
          "format": "int32"
        },
        "queueTime": {
          "description": "The date/time this request was queued.",
          "type": "string",
          "format": "date-time"
        },
        "receiveTime": {
          "description": "The date/time this request was receieved by an agent.",
          "type": "string",
          "format": "date-time"
        },
        "requestId": {
          "description": "ID of the request.",
          "type": "integer",
          "format": "int64"
        },
        "reservedAgent": {
          "description": "The agent allocated for this request.",
          "$ref": "#/definitions/TaskAgentReference"
        },
        "result": {
          "description": "The result of this request.",
          "enum": [
            "succeeded",
            "succeededWithIssues",
            "failed",
            "canceled",
            "skipped",
            "abandoned"
          ],
          "x-ms-enum": {
            "name": "TaskResult",
            "values": [
              {
                "value": "succeeded",
                "description": ""
              },
              {
                "value": "succeededWithIssues",
                "description": ""
              },
              {
                "value": "failed",
                "description": ""
              },
              {
                "value": "canceled",
                "description": ""
              },
              {
                "value": "skipped",
                "description": ""
              },
              {
                "value": "abandoned",
                "description": ""
              }
            ]
          }
        },
        "scopeId": {
          "description": "Scope of the pipeline; matches the project ID.",
          "type": "string",
          "format": "uuid"
        },
        "serviceOwner": {
          "description": "The service which owns this request.",
          "type": "string",
          "format": "uuid"
        },
        "statusMessage": {
          "type": "string"
        },
        "userDelayed": {
          "type": "boolean"
        }
      }
    },
    "TaskAgentJobStep": {
      "description": "",
      "type": "object",
      "properties": {
        "condition": {
          "type": "string"
        },
        "continueOnError": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "inputs": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "retryCountOnTaskFailure": {
          "type": "integer",
          "format": "int32"
        },
        "task": {
          "$ref": "#/definitions/TaskAgentJobTask"
        },
        "timeoutInMinutes": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "enum": [
            "task",
            "action"
          ],
          "x-ms-enum": {
            "name": "TaskAgentJobStepType",
            "values": [
              {
                "value": "task",
                "description": ""
              },
              {
                "value": "action",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "TaskAgentJobTask": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "TaskAgentJobVariable": {
      "description": "",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "secret": {
          "type": "boolean"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "TaskAgentManualUpdate": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskAgentUpdateReason"
        }
      ],
      "properties": {}
    },
    "TaskAgentMessage": {
      "description": "Provides a contract for receiving messages from the task orchestrator.",
      "type": "object",
      "properties": {
        "body": {
          "description": "Gets or sets the body of the message. If the <c>IV</c> property is provided the body will need to be decrypted using the <c>TaskAgentSession.EncryptionKey</c> value in addition to the <c>IV</c>.",
          "type": "string"
        },
        "iv": {
          "description": "Gets or sets the initialization vector used to encrypt this message.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "messageId": {
          "description": "Gets or sets the message identifier.",
          "type": "integer",
          "format": "int64"
        },
        "messageType": {
          "description": "Gets or sets the message type, describing the data contract found in <c>TaskAgentMessage.Body</c>.",
          "type": "string"
        }
      }
    },
    "TaskAgentMinAgentVersionRequiredUpdate": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskAgentUpdateReason"
        }
      ],
      "properties": {
        "jobDefinition": {
          "$ref": "#/definitions/TaskOrchestrationOwner"
        },
        "jobOwner": {
          "$ref": "#/definitions/TaskOrchestrationOwner"
        },
        "minAgentVersion": {
          "$ref": "#/definitions/Demand"
        }
      }
    },
    "TaskAgentPool": {
      "description": "An organization-level grouping of agents.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskAgentPoolReference"
        }
      ],
      "properties": {
        "agentCloudId": {
          "description": "The ID of the associated agent cloud.",
          "type": "integer",
          "format": "int32"
        },
        "autoProvision": {
          "description": "Whether or not a queue should be automatically provisioned for each project collection.",
          "type": "boolean"
        },
        "autoSize": {
          "description": "Whether or not the pool should autosize itself based on the Agent Cloud Provider settings.",
          "type": "boolean"
        },
        "autoUpdate": {
          "description": "Whether or not agents in this pool are allowed to automatically update",
          "type": "boolean"
        },
        "createdBy": {
          "description": "Creator of the pool. The creator of the pool is automatically added into the administrators group for the pool on creation.",
          "$ref": "#/definitions/IdentityRef"
        },
        "createdOn": {
          "description": "The date/time of the pool creation.",
          "type": "string",
          "format": "date-time"
        },
        "owner": {
          "description": "Owner or administrator of the pool.",
          "$ref": "#/definitions/IdentityRef"
        },
        "properties": {
          "$ref": "#/definitions/PropertiesCollection"
        },
        "targetSize": {
          "description": "Target parallelism - Only applies to agent pools that are backed by pool providers. It will be null for regular pools.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TaskAgentPoolMaintenanceDefinition": {
      "description": "",
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Enable maintenance",
          "type": "boolean"
        },
        "id": {
          "description": "Id",
          "type": "integer",
          "format": "int32"
        },
        "jobTimeoutInMinutes": {
          "description": "Maintenance job timeout per agent",
          "type": "integer",
          "format": "int32"
        },
        "maxConcurrentAgentsPercentage": {
          "description": "Max percentage of agents within a pool running maintenance job at given time",
          "type": "integer",
          "format": "int32"
        },
        "options": {
          "$ref": "#/definitions/TaskAgentPoolMaintenanceOptions"
        },
        "pool": {
          "description": "Pool reference for the maintenance definition",
          "$ref": "#/definitions/TaskAgentPoolReference"
        },
        "retentionPolicy": {
          "$ref": "#/definitions/TaskAgentPoolMaintenanceRetentionPolicy"
        },
        "scheduleSetting": {
          "$ref": "#/definitions/TaskAgentPoolMaintenanceSchedule"
        }
      }
    },
    "TaskAgentPoolMaintenanceJob": {
      "description": "",
      "type": "object",
      "properties": {
        "definitionId": {
          "description": "The maintenance definition for the maintenance job",
          "type": "integer",
          "format": "int32"
        },
        "errorCount": {
          "description": "The total error counts during the maintenance job",
          "type": "integer",
          "format": "int32"
        },
        "finishTime": {
          "description": "Time that the maintenance job was completed",
          "type": "string",
          "format": "date-time"
        },
        "jobId": {
          "description": "Id of the maintenance job",
          "type": "integer",
          "format": "int32"
        },
        "logsDownloadUrl": {
          "description": "The log download url for the maintenance job",
          "type": "string"
        },
        "orchestrationId": {
          "description": "Orchestration/Plan Id for the maintenance job",
          "type": "string",
          "format": "uuid"
        },
        "pool": {
          "description": "Pool reference for the maintenance job",
          "$ref": "#/definitions/TaskAgentPoolReference"
        },
        "queueTime": {
          "description": "Time that the maintenance job was queued",
          "type": "string",
          "format": "date-time"
        },
        "requestedBy": {
          "description": "The identity that queued the maintenance job",
          "$ref": "#/definitions/IdentityRef"
        },
        "result": {
          "description": "The maintenance job result",
          "enum": [
            "succeeded",
            "failed",
            "canceled"
          ],
          "x-ms-enum": {
            "name": "TaskAgentPoolMaintenanceJobResult",
            "values": [
              {
                "value": "succeeded",
                "description": ""
              },
              {
                "value": "failed",
                "description": ""
              },
              {
                "value": "canceled",
                "description": ""
              }
            ]
          }
        },
        "startTime": {
          "description": "Time that the maintenance job was started",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "Status of the maintenance job",
          "enum": [
            "inProgress",
            "completed",
            "cancelling",
            "queued"
          ],
          "x-ms-enum": {
            "name": "TaskAgentPoolMaintenanceJobStatus",
            "values": [
              {
                "value": "inProgress",
                "description": ""
              },
              {
                "value": "completed",
                "description": ""
              },
              {
                "value": "cancelling",
                "description": ""
              },
              {
                "value": "queued",
                "description": ""
              }
            ]
          }
        },
        "targetAgents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskAgentPoolMaintenanceJobTargetAgent"
          }
        },
        "warningCount": {
          "description": "The total warning counts during the maintenance job",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TaskAgentPoolMaintenanceJobTargetAgent": {
      "description": "",
      "type": "object",
      "properties": {
        "agent": {
          "$ref": "#/definitions/TaskAgentReference"
        },
        "jobId": {
          "type": "integer",
          "format": "int32"
        },
        "result": {
          "enum": [
            "succeeded",
            "failed",
            "canceled"
          ],
          "x-ms-enum": {
            "name": "TaskAgentPoolMaintenanceJobResult",
            "values": [
              {
                "value": "succeeded",
                "description": ""
              },
              {
                "value": "failed",
                "description": ""
              },
              {
                "value": "canceled",
                "description": ""
              }
            ]
          }
        },
        "status": {
          "enum": [
            "inProgress",
            "completed",
            "cancelling",
            "queued"
          ],
          "x-ms-enum": {
            "name": "TaskAgentPoolMaintenanceJobStatus",
            "values": [
              {
                "value": "inProgress",
                "description": ""
              },
              {
                "value": "completed",
                "description": ""
              },
              {
                "value": "cancelling",
                "description": ""
              },
              {
                "value": "queued",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "TaskAgentPoolMaintenanceOptions": {
      "description": "",
      "type": "object",
      "properties": {
        "workingDirectoryExpirationInDays": {
          "description": "time to consider a System.DefaultWorkingDirectory is stale",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TaskAgentPoolMaintenanceRetentionPolicy": {
      "description": "",
      "type": "object",
      "properties": {
        "numberOfHistoryRecordsToKeep": {
          "description": "Number of records to keep for maintenance job executed with this definition.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TaskAgentPoolMaintenanceSchedule": {
      "description": "",
      "type": "object",
      "properties": {
        "daysToBuild": {
          "description": "Days for a build (flags enum for days of the week)",
          "enum": [
            "none",
            "monday",
            "tuesday",
            "wednesday",
            "thursday",
            "friday",
            "saturday",
            "sunday",
            "all"
          ],
          "x-ms-enum": {
            "name": "TaskAgentPoolMaintenanceScheduleDays",
            "values": [
              {
                "value": "none",
                "description": "Do not run."
              },
              {
                "value": "monday",
                "description": "Run on Monday."
              },
              {
                "value": "tuesday",
                "description": "Run on Tuesday."
              },
              {
                "value": "wednesday",
                "description": "Run on Wednesday."
              },
              {
                "value": "thursday",
                "description": "Run on Thursday."
              },
              {
                "value": "friday",
                "description": "Run on Friday."
              },
              {
                "value": "saturday",
                "description": "Run on Saturday."
              },
              {
                "value": "sunday",
                "description": "Run on Sunday."
              },
              {
                "value": "all",
                "description": "Run on all days of the week."
              }
            ]
          }
        },
        "scheduleJobId": {
          "description": "The Job Id of the Scheduled job that will queue the pool maintenance job.",
          "type": "string",
          "format": "uuid"
        },
        "startHours": {
          "description": "Local timezone hour to start",
          "type": "integer",
          "format": "int32"
        },
        "startMinutes": {
          "description": "Local timezone minute to start",
          "type": "integer",
          "format": "int32"
        },
        "timeZoneId": {
          "description": "Time zone of the build schedule (string representation of the time zone id)",
          "type": "string"
        }
      }
    },
    "TaskAgentPoolReference": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isHosted": {
          "description": "Gets or sets a value indicating whether or not this pool is managed by the service.",
          "type": "boolean"
        },
        "isLegacy": {
          "description": "Determines whether the pool is legacy.",
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "options": {
          "description": "Additional pool settings and details",
          "enum": [
            "none",
            "elasticPool",
            "singleUseAgents",
            "preserveAgentOnJobFailure"
          ],
          "x-ms-enum": {
            "name": "TaskAgentPoolOptions",
            "values": [
              {
                "value": "none",
                "description": ""
              },
              {
                "value": "elasticPool",
                "description": "TaskAgentPool backed by the Elastic pool service"
              },
              {
                "value": "singleUseAgents",
                "description": "Set to true if agents are re-imaged after each TaskAgentJobRequest"
              },
              {
                "value": "preserveAgentOnJobFailure",
                "description": "Set to true if agents are held for investigation after a TaskAgentJobRequest failure"
              }
            ]
          }
        },
        "poolType": {
          "description": "Gets or sets the type of the pool",
          "enum": [
            "automation",
            "deployment"
          ],
          "x-ms-enum": {
            "name": "TaskAgentPoolType",
            "values": [
              {
                "value": "automation",
                "description": "A typical pool of task agents"
              },
              {
                "value": "deployment",
                "description": "A deployment pool"
              }
            ]
          }
        },
        "scope": {
          "type": "string",
          "format": "uuid"
        },
        "size": {
          "description": "Gets the current size of the pool.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TaskAgentPoolStatus": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskAgentPoolReference"
        }
      ],
      "properties": {
        "assignedRequestCount": {
          "description": "Number of requests queued and assigned to an agent. Not running yet.",
          "type": "integer",
          "format": "int32"
        },
        "queuedRequestCount": {
          "description": "Number of queued requests which are not assigned to any agents",
          "type": "integer",
          "format": "int32"
        },
        "runningRequestCount": {
          "description": "Number of currently running requests",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TaskAgentPoolSummary": {
      "description": "",
      "type": "object",
      "properties": {
        "columnsHeader": {
          "$ref": "#/definitions/MetricsColumnsHeader"
        },
        "deploymentGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentGroupReference"
          }
        },
        "pool": {
          "$ref": "#/definitions/TaskAgentPoolReference"
        },
        "queues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskAgentQueue"
          }
        },
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricsRow"
          }
        }
      }
    },
    "TaskAgentPublicKey": {
      "description": "Represents the public key portion of an RSA asymmetric key.",
      "type": "object",
      "properties": {
        "exponent": {
          "description": "Gets or sets the exponent for the public key.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "modulus": {
          "description": "Gets or sets the modulus for the public key.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "TaskAgentQueue": {
      "description": "An agent queue.",
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the queue",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name of the queue",
          "type": "string"
        },
        "pool": {
          "description": "Pool reference for this queue",
          "$ref": "#/definitions/TaskAgentPoolReference"
        },
        "projectId": {
          "description": "Project ID",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "TaskAgentReference": {
      "description": "A reference to an agent.",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "accessPoint": {
          "description": "This agent's access point.",
          "type": "string"
        },
        "enabled": {
          "description": "Whether or not this agent should run jobs.",
          "type": "boolean"
        },
        "id": {
          "description": "Identifier of the agent.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name of the agent.",
          "type": "string"
        },
        "osDescription": {
          "description": "Agent OS.",
          "type": "string"
        },
        "provisioningState": {
          "description": "Provisioning state of this agent.",
          "type": "string"
        },
        "status": {
          "description": "Whether or not the agent is online.",
          "enum": [
            "offline",
            "online"
          ],
          "x-ms-enum": {
            "name": "TaskAgentStatus",
            "values": [
              {
                "value": "offline",
                "description": ""
              },
              {
                "value": "online",
                "description": ""
              }
            ]
          }
        },
        "version": {
          "description": "Agent version.",
          "type": "string"
        }
      }
    },
    "TaskAgentSession": {
      "description": "Represents a session for performing message exchanges from an agent.",
      "type": "object",
      "properties": {
        "agent": {
          "description": "Gets or sets the agent which is the target of the session.",
          "$ref": "#/definitions/TaskAgentReference"
        },
        "encryptionKey": {
          "description": "Gets the key used to encrypt message traffic for this session.",
          "$ref": "#/definitions/TaskAgentSessionKey"
        },
        "ownerName": {
          "description": "Gets or sets the owner name of this session. Generally this will be the machine of origination.",
          "type": "string"
        },
        "sessionId": {
          "description": "Gets the unique identifier for this session.",
          "type": "string",
          "format": "uuid"
        },
        "systemCapabilities": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TaskAgentSessionKey": {
      "description": "Represents a symmetric key used for message-level encryption for communication sent to an agent.",
      "type": "object",
      "properties": {
        "encrypted": {
          "description": "Gets or sets a value indicating whether or not the key value is encrypted. If this value is true, the Value property should be decrypted using the <c>RSA</c> key exchanged with the server during registration.",
          "type": "boolean"
        },
        "value": {
          "description": "Gets or sets the symmetric key value.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "TaskAgentUpdate": {
      "description": "Details about an agent update.",
      "type": "object",
      "properties": {
        "currentState": {
          "description": "Current state of this agent update.",
          "type": "string"
        },
        "reason": {
          "description": "Reason for this update.",
          "$ref": "#/definitions/TaskAgentUpdateReason"
        },
        "requestedBy": {
          "description": "Identity which requested this update.",
          "$ref": "#/definitions/IdentityRef"
        },
        "requestTime": {
          "description": "Date on which this update was requested.",
          "type": "string",
          "format": "date-time"
        },
        "sourceVersion": {
          "description": "Source agent version of the update.",
          "$ref": "#/definitions/PackageVersion"
        },
        "targetVersion": {
          "description": "Target agent version of the update.",
          "$ref": "#/definitions/PackageVersion"
        }
      }
    },
    "TaskAgentUpdateReason": {
      "description": "",
      "type": "object",
      "properties": {
        "code": {
          "enum": [
            "manual",
            "minAgentVersionRequired",
            "downgrade"
          ],
          "x-ms-enum": {
            "name": "TaskAgentUpdateReasonType",
            "values": [
              {
                "value": "manual",
                "description": ""
              },
              {
                "value": "minAgentVersionRequired",
                "description": ""
              },
              {
                "value": "downgrade",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "TaskAssignedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskEvent"
        }
      ],
      "properties": {}
    },
    "TaskAttachment": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "lastChangedBy": {
          "type": "string",
          "format": "uuid"
        },
        "lastChangedOn": {
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "type": "string"
        },
        "recordId": {
          "type": "string",
          "format": "uuid"
        },
        "timelineId": {
          "type": "string",
          "format": "uuid"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "TaskCommandRestrictions": {
      "description": "",
      "type": "object",
      "properties": {
        "mode": {
          "enum": [
            "any",
            "restricted"
          ],
          "x-ms-enum": {
            "name": "TaskCommandMode",
            "values": [
              {
                "value": "any",
                "description": ""
              },
              {
                "value": "restricted",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "TaskCompletedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskEvent"
        }
      ],
      "properties": {
        "deliveryFailed": {
          "description": "The api request was no delivered successfully",
          "type": "boolean"
        },
        "result": {
          "description": "The result of the task.",
          "enum": [
            "succeeded",
            "succeededWithIssues",
            "failed",
            "canceled",
            "skipped",
            "abandoned"
          ],
          "x-ms-enum": {
            "name": "TaskResult",
            "values": [
              {
                "value": "succeeded",
                "description": ""
              },
              {
                "value": "succeededWithIssues",
                "description": ""
              },
              {
                "value": "failed",
                "description": ""
              },
              {
                "value": "canceled",
                "description": ""
              },
              {
                "value": "skipped",
                "description": ""
              },
              {
                "value": "abandoned",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "TaskDefinition": {
      "description": "",
      "type": "object",
      "properties": {
        "agentExecution": {
          "$ref": "#/definitions/TaskExecution"
        },
        "author": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "contentsUploaded": {
          "type": "boolean"
        },
        "contributionIdentifier": {
          "type": "string"
        },
        "contributionVersion": {
          "type": "string"
        },
        "dataSourceBindings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataSourceBinding"
          }
        },
        "definitionType": {
          "type": "string"
        },
        "demands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Demand"
          }
        },
        "deprecated": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "execution": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JObject"
          }
        },
        "friendlyName": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskGroupDefinition"
          }
        },
        "helpMarkDown": {
          "type": "string"
        },
        "helpUrl": {
          "type": "string"
        },
        "hostType": {
          "type": "string"
        },
        "iconUrl": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskInputDefinition"
          }
        },
        "instanceNameFormat": {
          "type": "string"
        },
        "minimumAgentVersion": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "outputVariables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskOutputVariable"
          }
        },
        "packageLocation": {
          "type": "string"
        },
        "packageType": {
          "type": "string"
        },
        "postJobExecution": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JObject"
          }
        },
        "preJobExecution": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JObject"
          }
        },
        "preview": {
          "type": "boolean"
        },
        "releaseNotes": {
          "type": "string"
        },
        "restrictions": {
          "$ref": "#/definitions/TaskRestrictions"
        },
        "runsOn": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "satisfies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "serverOwned": {
          "type": "boolean"
        },
        "showEnvironmentVariables": {
          "type": "boolean"
        },
        "sourceDefinitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskSourceDefinition"
          }
        },
        "sourceLocation": {
          "type": "string"
        },
        "version": {
          "$ref": "#/definitions/TaskVersion"
        },
        "visibility": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TaskDefinitionEndpoint": {
      "description": "",
      "type": "object",
      "properties": {
        "connectionId": {
          "description": "An ID that identifies a service connection to be used for authenticating endpoint requests.",
          "type": "string"
        },
        "keySelector": {
          "description": "An Json based keyselector to filter response returned by fetching the endpoint <c>Url</c>.A Json based keyselector must be prefixed with \"jsonpath:\". KeySelector can be used to specify the filter to get the keys for the values specified with Selector. <example> The following keyselector defines an Json for extracting nodes named 'ServiceName'. <code> endpoint.KeySelector = \"jsonpath://ServiceName\"; </code></example>",
          "type": "string"
        },
        "scope": {
          "description": "The scope as understood by Connected Services. Essentially, a project-id for now.",
          "type": "string"
        },
        "selector": {
          "description": "An XPath/Json based selector to filter response returned by fetching the endpoint <c>Url</c>. An XPath based selector must be prefixed with the string \"xpath:\". A Json based selector must be prefixed with \"jsonpath:\". <example> The following selector defines an XPath for extracting nodes named 'ServiceName'. <code> endpoint.Selector = \"xpath://ServiceName\"; </code></example>",
          "type": "string"
        },
        "taskId": {
          "description": "TaskId that this endpoint belongs to.",
          "type": "string"
        },
        "url": {
          "description": "URL to GET.",
          "type": "string"
        }
      }
    },
    "TaskDefinitionReference": {
      "description": "",
      "type": "object",
      "properties": {
        "definitionType": {
          "description": "Gets or sets the definition type. Values can be 'task' or 'metaTask'.",
          "type": "string"
        },
        "id": {
          "description": "Gets or sets the unique identifier of task.",
          "type": "string",
          "format": "uuid"
        },
        "versionSpec": {
          "description": "Gets or sets the version specification of task.",
          "type": "string"
        }
      }
    },
    "TaskEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/JobEvent"
        }
      ],
      "properties": {
        "taskId": {
          "description": "The ID of the task definition.",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "TaskExecution": {
      "description": "",
      "type": "object",
      "properties": {
        "execTask": {
          "description": "The utility task to run.  Specifying this means that this task definition is simply a meta task to call another task. This is useful for tasks that call utility tasks like powershell and commandline",
          "$ref": "#/definitions/TaskReference"
        },
        "platformInstructions": {
          "description": "If a task is going to run code, then this provides the type/script etc... information by platform. For example, it might look like. net45: { typeName: \"Microsoft.TeamFoundation.Automation.Tasks.PowerShellTask\", assemblyName: \"Microsoft.TeamFoundation.Automation.Tasks.PowerShell.dll\" } net20: { typeName: \"Microsoft.TeamFoundation.Automation.Tasks.PowerShellTask\", assemblyName: \"Microsoft.TeamFoundation.Automation.Tasks.PowerShell.dll\" } java: { jar: \"powershelltask.tasks.automation.teamfoundation.microsoft.com\", } node: { script: \"powershellhost.js\", }",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      }
    },
    "TaskGroup": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskDefinition"
        }
      ],
      "properties": {
        "comment": {
          "description": "Gets or sets comment.",
          "type": "string"
        },
        "createdBy": {
          "description": "Gets or sets the identity who created.",
          "$ref": "#/definitions/IdentityRef"
        },
        "createdOn": {
          "description": "Gets or sets date on which it got created.",
          "type": "string",
          "format": "date-time"
        },
        "deleted": {
          "description": "Gets or sets as 'true' to indicate as deleted, 'false' otherwise.",
          "type": "boolean"
        },
        "modifiedBy": {
          "description": "Gets or sets the identity who modified.",
          "$ref": "#/definitions/IdentityRef"
        },
        "modifiedOn": {
          "description": "Gets or sets date on which it got modified.",
          "type": "string",
          "format": "date-time"
        },
        "owner": {
          "description": "Gets or sets the owner.",
          "type": "string"
        },
        "parentDefinitionId": {
          "description": "Gets or sets parent task group Id. This is used while creating a draft task group.",
          "type": "string",
          "format": "uuid"
        },
        "revision": {
          "description": "Gets or sets revision.",
          "type": "integer",
          "format": "int32"
        },
        "tasks": {
          "description": "Gets or sets the tasks.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskGroupStep"
          }
        }
      }
    },
    "TaskGroupCreateParameter": {
      "description": "",
      "type": "object",
      "properties": {
        "author": {
          "description": "Sets author name of the task group.",
          "type": "string"
        },
        "category": {
          "description": "Sets category of the task group.",
          "type": "string"
        },
        "description": {
          "description": "Sets description of the task group.",
          "type": "string"
        },
        "friendlyName": {
          "description": "Sets friendly name of the task group.",
          "type": "string"
        },
        "iconUrl": {
          "description": "Sets url icon of the task group.",
          "type": "string"
        },
        "inputs": {
          "description": "Sets input for the task group.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskInputDefinition"
          }
        },
        "instanceNameFormat": {
          "description": "Sets display name of the task group.",
          "type": "string"
        },
        "name": {
          "description": "Sets name of the task group.",
          "type": "string"
        },
        "parentDefinitionId": {
          "description": "Sets parent task group Id. This is used while creating a draft task group.",
          "type": "string",
          "format": "uuid"
        },
        "runsOn": {
          "description": "Sets RunsOn of the task group. Value can be 'Agent', 'Server' or 'DeploymentGroup'.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tasks": {
          "description": "Sets tasks for the task group.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskGroupStep"
          }
        },
        "version": {
          "description": "Sets version of the task group.",
          "$ref": "#/definitions/TaskVersion"
        }
      }
    },
    "TaskGroupDefinition": {
      "description": "",
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "isExpanded": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "visibleRule": {
          "type": "string"
        }
      }
    },
    "TaskGroupPublishPreviewParameter": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskGroupUpdatePropertiesBase"
        }
      ],
      "properties": {
        "disablePriorVersions": {
          "description": "This is to disable previous versions of task group upon publish",
          "type": "boolean"
        },
        "preview": {
          "description": "Denotes if task group is in preview",
          "type": "boolean"
        },
        "revision": {
          "description": "This is the revision of task group that is getting published",
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "description": "This is the version of task group that is getting published",
          "$ref": "#/definitions/TaskVersion"
        }
      }
    },
    "TaskGroupRestoreParameter": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskGroupUpdatePropertiesBase"
        }
      ],
      "properties": {
        "restore": {
          "description": "This is to restore deleted Task Group",
          "type": "boolean"
        }
      }
    },
    "TaskGroupRevision": {
      "description": "",
      "type": "object",
      "properties": {
        "changedBy": {
          "$ref": "#/definitions/IdentityRef"
        },
        "changedDate": {
          "type": "string",
          "format": "date-time"
        },
        "changeType": {
          "enum": [
            "add",
            "update",
            "delete",
            "undelete"
          ],
          "x-ms-enum": {
            "name": "AuditAction",
            "values": [
              {
                "value": "add",
                "description": ""
              },
              {
                "value": "update",
                "description": ""
              },
              {
                "value": "delete",
                "description": ""
              },
              {
                "value": "undelete",
                "description": ""
              }
            ]
          }
        },
        "comment": {
          "type": "string"
        },
        "fileId": {
          "type": "integer",
          "format": "int32"
        },
        "majorVersion": {
          "type": "integer",
          "format": "int32"
        },
        "revision": {
          "type": "integer",
          "format": "int32"
        },
        "taskGroupId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "TaskGroupStep": {
      "description": "Represents tasks in the task group.",
      "type": "object",
      "properties": {
        "alwaysRun": {
          "description": "Gets or sets as 'true' to run the task always, 'false' otherwise.",
          "type": "boolean"
        },
        "condition": {
          "description": "Gets or sets condition for the task.",
          "type": "string"
        },
        "continueOnError": {
          "description": "Gets or sets as 'true' to continue on error, 'false' otherwise.",
          "type": "boolean"
        },
        "displayName": {
          "description": "Gets or sets the display name.",
          "type": "string"
        },
        "enabled": {
          "description": "Gets or sets as task is enabled or not.",
          "type": "boolean"
        },
        "environment": {
          "description": "Gets dictionary of environment variables.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "inputs": {
          "description": "Gets or sets dictionary of inputs.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "retryCountOnTaskFailure": {
          "description": "Gets or sets the maximum number of retries",
          "type": "integer",
          "format": "int32"
        },
        "task": {
          "description": "Gets or sets the reference of the task.",
          "$ref": "#/definitions/TaskDefinitionReference"
        },
        "timeoutInMinutes": {
          "description": "Gets or sets the maximum time, in minutes, that a task is allowed to execute on agent before being cancelled by server. A zero value indicates an infinite timeout.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TaskGroupUpdateParameter": {
      "description": "",
      "type": "object",
      "properties": {
        "author": {
          "description": "Sets author name of the task group.",
          "type": "string"
        },
        "category": {
          "description": "Sets category of the task group.",
          "type": "string"
        },
        "comment": {
          "description": "Sets comment of the task group.",
          "type": "string"
        },
        "description": {
          "description": "Sets description of the task group.",
          "type": "string"
        },
        "friendlyName": {
          "description": "Sets friendly name of the task group.",
          "type": "string"
        },
        "iconUrl": {
          "description": "Sets url icon of the task group.",
          "type": "string"
        },
        "id": {
          "description": "Sets the unique identifier of this field.",
          "type": "string",
          "format": "uuid"
        },
        "inputs": {
          "description": "Sets input for the task group.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskInputDefinition"
          }
        },
        "instanceNameFormat": {
          "description": "Sets display name of the task group.",
          "type": "string"
        },
        "name": {
          "description": "Sets name of the task group.",
          "type": "string"
        },
        "parentDefinitionId": {
          "description": "Gets or sets parent task group Id. This is used while creating a draft task group.",
          "type": "string",
          "format": "uuid"
        },
        "revision": {
          "description": "Sets revision of the task group.",
          "type": "integer",
          "format": "int32"
        },
        "runsOn": {
          "description": "Sets RunsOn of the task group. Value can be 'Agent', 'Server' or 'DeploymentGroup'.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tasks": {
          "description": "Sets tasks for the task group.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskGroupStep"
          }
        },
        "version": {
          "description": "Sets version of the task group.",
          "$ref": "#/definitions/TaskVersion"
        }
      }
    },
    "TaskGroupUpdatePropertiesBase": {
      "description": "",
      "type": "object",
      "properties": {
        "comment": {
          "description": "Comment for this update request",
          "type": "string"
        }
      }
    },
    "TaskHubLicenseDetails": {
      "description": "",
      "type": "object",
      "properties": {
        "enterpriseUsersCount": {
          "type": "integer",
          "format": "int32"
        },
        "failedToReachAllProviders": {
          "type": "boolean"
        },
        "freeHostedLicenseCount": {
          "type": "integer",
          "format": "int32"
        },
        "freeLicenseCount": {
          "type": "integer",
          "format": "int32"
        },
        "hasLicenseCountEverUpdated": {
          "type": "boolean"
        },
        "hostedAgentMinutesFreeCount": {
          "type": "integer",
          "format": "int32"
        },
        "hostedAgentMinutesUsedCount": {
          "type": "integer",
          "format": "int32"
        },
        "hostedLicensesArePremium": {
          "type": "boolean"
        },
        "msdnUsersCount": {
          "type": "integer",
          "format": "int32"
        },
        "purchasedHostedLicenseCount": {
          "description": "Microsoft-hosted licenses purchased from VSTS directly.",
          "type": "integer",
          "format": "int32"
        },
        "purchasedLicenseCount": {
          "description": "Self-hosted licenses purchased from VSTS directly.",
          "type": "integer",
          "format": "int32"
        },
        "totalHostedLicenseCount": {
          "type": "integer",
          "format": "int32"
        },
        "totalLicenseCount": {
          "type": "integer",
          "format": "int32"
        },
        "totalPrivateLicenseCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TaskHubOidcToken": {
      "description": "",
      "type": "object",
      "properties": {
        "oidcToken": {
          "type": "string"
        }
      }
    },
    "TaskInputDefinition": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskInputDefinitionBase"
        }
      ],
      "properties": {}
    },
    "TaskInputDefinitionBase": {
      "description": "",
      "type": "object",
      "properties": {
        "aliases": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultValue": {
          "type": "string"
        },
        "groupName": {
          "type": "string"
        },
        "helpMarkDown": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "options": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "required": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        },
        "validation": {
          "$ref": "#/definitions/TaskInputValidation"
        },
        "visibleRule": {
          "type": "string"
        }
      }
    },
    "TaskInputValidation": {
      "description": "",
      "type": "object",
      "properties": {
        "expression": {
          "description": "Conditional expression",
          "type": "string"
        },
        "message": {
          "description": "Message explaining how user can correct if validation fails",
          "type": "string"
        }
      }
    },
    "TaskInstance": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskReference"
        }
      ],
      "properties": {
        "alwaysRun": {
          "type": "boolean"
        },
        "condition": {
          "type": "string"
        },
        "continueOnError": {
          "type": "boolean"
        },
        "displayName": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "environment": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "instanceId": {
          "type": "string",
          "format": "uuid"
        },
        "refName": {
          "type": "string"
        },
        "retryCountOnTaskFailure": {
          "type": "integer",
          "format": "int32"
        },
        "timeoutInMinutes": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TaskLog": {
      "description": "A task log connected to a timeline record.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskLogReference"
        }
      ],
      "properties": {
        "createdOn": {
          "description": "The time of the task log creation.",
          "type": "string",
          "format": "date-time"
        },
        "indexLocation": {
          "description": "The REST URL of the task log when indexed.",
          "type": "string"
        },
        "lastChangedOn": {
          "description": "The time of the last modification of the task log.",
          "type": "string",
          "format": "date-time"
        },
        "lineCount": {
          "description": "The number of the task log lines.",
          "type": "integer",
          "format": "int64"
        },
        "path": {
          "description": "The path of the task log.",
          "type": "string"
        }
      }
    },
    "TaskLogReference": {
      "description": "A reference to a task log. This class contains information about the output printed to the timeline record's logs console during pipeline run.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the task log.",
          "type": "integer",
          "format": "int32"
        },
        "location": {
          "description": "The REST URL of the task log.",
          "type": "string"
        }
      }
    },
    "TaskOrchestrationContainer": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskOrchestrationItem"
        }
      ],
      "properties": {
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskOrchestrationItem"
          }
        },
        "continueOnError": {
          "type": "boolean"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "maxConcurrency": {
          "type": "integer",
          "format": "int32"
        },
        "parallel": {
          "type": "boolean"
        },
        "rollback": {
          "$ref": "#/definitions/TaskOrchestrationContainer"
        }
      }
    },
    "TaskOrchestrationItem": {
      "description": "",
      "type": "object",
      "properties": {
        "itemType": {
          "enum": [
            "container",
            "job"
          ],
          "x-ms-enum": {
            "name": "TaskOrchestrationItemType",
            "values": [
              {
                "value": "container",
                "description": ""
              },
              {
                "value": "job",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "TaskOrchestrationJob": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskOrchestrationItem"
        }
      ],
      "properties": {
        "demands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Demand"
          }
        },
        "executeAs": {
          "$ref": "#/definitions/IdentityRef"
        },
        "executionMode": {
          "type": "string"
        },
        "executionTimeout": {
          "type": "string",
          "format": "TimeSpan"
        },
        "instanceId": {
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "type": "string"
        },
        "refName": {
          "type": "string"
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskInstance"
          }
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TaskOrchestrationOwner": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "TaskOrchestrationPlan": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskOrchestrationPlanReference"
        }
      ],
      "properties": {
        "environment": {
          "$ref": "#/definitions/PlanEnvironment"
        },
        "expandedYaml": {
          "$ref": "#/definitions/TaskLogReference"
        },
        "finishTime": {
          "type": "string",
          "format": "date-time"
        },
        "implementation": {
          "$ref": "#/definitions/TaskOrchestrationContainer"
        },
        "initializationLog": {
          "$ref": "#/definitions/TaskLogReference"
        },
        "requestedById": {
          "type": "string",
          "format": "uuid"
        },
        "requestedForId": {
          "type": "string",
          "format": "uuid"
        },
        "result": {
          "enum": [
            "succeeded",
            "succeededWithIssues",
            "failed",
            "canceled",
            "skipped",
            "abandoned"
          ],
          "x-ms-enum": {
            "name": "TaskResult",
            "values": [
              {
                "value": "succeeded",
                "description": ""
              },
              {
                "value": "succeededWithIssues",
                "description": ""
              },
              {
                "value": "failed",
                "description": ""
              },
              {
                "value": "canceled",
                "description": ""
              },
              {
                "value": "skipped",
                "description": ""
              },
              {
                "value": "abandoned",
                "description": ""
              }
            ]
          }
        },
        "resultCode": {
          "type": "string"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "state": {
          "enum": [
            "inProgress",
            "queued",
            "completed",
            "throttled"
          ],
          "x-ms-enum": {
            "name": "TaskOrchestrationPlanState",
            "values": [
              {
                "value": "inProgress",
                "description": ""
              },
              {
                "value": "queued",
                "description": ""
              },
              {
                "value": "completed",
                "description": ""
              },
              {
                "value": "throttled",
                "description": ""
              }
            ]
          }
        },
        "timeline": {
          "$ref": "#/definitions/TimelineReference"
        }
      }
    },
    "TaskOrchestrationPlanGroup": {
      "description": "",
      "type": "object",
      "properties": {
        "planGroup": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/ProjectReference"
        },
        "runningRequests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskAgentJobRequest"
          }
        }
      }
    },
    "TaskOrchestrationPlanGroupsQueueMetrics": {
      "description": "",
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "enum": [
            "running",
            "queued",
            "all"
          ],
          "x-ms-enum": {
            "name": "PlanGroupStatus",
            "values": [
              {
                "value": "running",
                "description": ""
              },
              {
                "value": "queued",
                "description": ""
              },
              {
                "value": "all",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "TaskOrchestrationPlanReference": {
      "description": "",
      "type": "object",
      "properties": {
        "artifactLocation": {
          "type": "string"
        },
        "artifactUri": {
          "type": "string"
        },
        "definition": {
          "$ref": "#/definitions/TaskOrchestrationOwner"
        },
        "owner": {
          "$ref": "#/definitions/TaskOrchestrationOwner"
        },
        "planGroup": {
          "type": "string"
        },
        "planId": {
          "type": "string",
          "format": "uuid"
        },
        "planType": {
          "type": "string"
        },
        "scopeIdentifier": {
          "type": "string",
          "format": "uuid"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TaskOrchestrationQueuedPlan": {
      "description": "",
      "type": "object",
      "properties": {
        "assignTime": {
          "type": "string",
          "format": "date-time"
        },
        "definition": {
          "$ref": "#/definitions/TaskOrchestrationOwner"
        },
        "owner": {
          "$ref": "#/definitions/TaskOrchestrationOwner"
        },
        "planGroup": {
          "type": "string"
        },
        "planId": {
          "type": "string",
          "format": "uuid"
        },
        "poolId": {
          "type": "integer",
          "format": "int32"
        },
        "queuePosition": {
          "type": "integer",
          "format": "int32"
        },
        "queueTime": {
          "type": "string",
          "format": "date-time"
        },
        "scopeIdentifier": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "TaskOrchestrationQueuedPlanGroup": {
      "description": "",
      "type": "object",
      "properties": {
        "definition": {
          "$ref": "#/definitions/TaskOrchestrationOwner"
        },
        "owner": {
          "$ref": "#/definitions/TaskOrchestrationOwner"
        },
        "planGroup": {
          "type": "string"
        },
        "plans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskOrchestrationQueuedPlan"
          }
        },
        "project": {
          "$ref": "#/definitions/ProjectReference"
        },
        "queuePosition": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TaskOutputVariable": {
      "description": "",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "TaskPackageMetadata": {
      "description": "",
      "type": "object",
      "properties": {
        "type": {
          "description": "Gets the name of the package.",
          "type": "string"
        },
        "url": {
          "description": "Gets the url of the package.",
          "type": "string"
        },
        "version": {
          "description": "Gets the version of the package.",
          "type": "string"
        }
      }
    },
    "TaskReference": {
      "description": "A reference to a task.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the task definition. Corresponds to the id value of task.json file. <br />Example: CmdLineV2 { \"id\": \"D9BAFED4-0B18-4F58-968D-86655B4D2CE9\" }",
          "type": "string",
          "format": "uuid"
        },
        "inputs": {
          "description": "A dictionary of inputs specific to a task definition. Corresponds to inputs value of task.json file.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "The name of the task definition. Corresponds to the name value of task.json file. <br />Example: CmdLineV2 { \"name\": \"CmdLine\" }",
          "type": "string"
        },
        "version": {
          "description": "The version of the task definition. Corresponds to the version value of task.json file. <br />Example: CmdLineV2 { \"version\": { \"Major\": 2, \"Minor\": 212, \"Patch\": 0 } }",
          "type": "string"
        }
      }
    },
    "TaskRestrictions": {
      "description": "",
      "type": "object",
      "properties": {
        "commands": {
          "$ref": "#/definitions/TaskCommandRestrictions"
        },
        "settableVariables": {
          "$ref": "#/definitions/TaskVariableRestrictions"
        }
      }
    },
    "TaskSourceDefinition": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskSourceDefinitionBase"
        }
      ],
      "properties": {}
    },
    "TaskSourceDefinitionBase": {
      "description": "",
      "type": "object",
      "properties": {
        "authKey": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "keySelector": {
          "type": "string"
        },
        "selector": {
          "type": "string"
        },
        "target": {
          "type": "string"
        }
      }
    },
    "TaskStartedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TaskEvent"
        }
      ],
      "properties": {}
    },
    "TaskVariableRestrictions": {
      "description": "",
      "type": "object",
      "properties": {
        "allowed": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TaskVersion": {
      "description": "",
      "type": "object",
      "properties": {
        "isTest": {
          "type": "boolean"
        },
        "major": {
          "type": "integer",
          "format": "int32"
        },
        "minor": {
          "type": "integer",
          "format": "int32"
        },
        "patch": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Timeline": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TimelineReference"
        }
      ],
      "properties": {
        "lastChangedBy": {
          "type": "string",
          "format": "uuid"
        },
        "lastChangedOn": {
          "type": "string",
          "format": "date-time"
        },
        "records": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimelineRecord"
          }
        }
      }
    },
    "TimelineAttempt": {
      "description": "An attempt to update a TimelineRecord.",
      "type": "object",
      "properties": {
        "attempt": {
          "description": "The attempt of the record.",
          "type": "integer",
          "format": "int32"
        },
        "identifier": {
          "description": "The unique identifier for the record.",
          "type": "string"
        },
        "recordId": {
          "description": "The record identifier located within the specified timeline.",
          "type": "string",
          "format": "uuid"
        },
        "timelineId": {
          "description": "The timeline identifier which owns the record representing this attempt.",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "TimelineRecord": {
      "description": "Detailed information about the execution of different operations during pipeline run.",
      "type": "object",
      "properties": {
        "agentSpecification": {
          "description": "The specification of an agent running a pipeline job, in binary format. Applicable when record is of type Job. <br />Example: { \"VMImage\" : \"windows-2019\" }",
          "$ref": "#/definitions/JObject"
        },
        "attempt": {
          "description": "The number of record attempts.",
          "type": "integer",
          "format": "int32"
        },
        "changeId": {
          "description": "The ID connecting all records updated at the same time. This value is taken from timeline's ChangeId.",
          "type": "integer",
          "format": "int32"
        },
        "currentOperation": {
          "description": "A string that indicates the current operation.",
          "type": "string"
        },
        "details": {
          "description": "A reference to a sub-timeline.",
          "$ref": "#/definitions/TimelineReference"
        },
        "errorCount": {
          "description": "The number of errors produced by this operation.",
          "type": "integer",
          "format": "int32"
        },
        "finishTime": {
          "description": "The finish time of the record.",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "The ID of the record.",
          "type": "string",
          "format": "uuid"
        },
        "identifier": {
          "description": "String identifier that is consistent across attempts.",
          "type": "string"
        },
        "issues": {
          "description": "The list of issues produced by this operation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Issue"
          }
        },
        "lastModified": {
          "description": "The time the record was last modified.",
          "type": "string",
          "format": "date-time"
        },
        "location": {
          "description": "The REST URL of the record.",
          "type": "string"
        },
        "log": {
          "description": "A reference to the log produced by this operation.",
          "$ref": "#/definitions/TaskLogReference"
        },
        "name": {
          "description": "The name of the record.",
          "type": "string"
        },
        "order": {
          "description": "An ordinal value relative to other records within the timeline.",
          "type": "integer",
          "format": "int32"
        },
        "parentId": {
          "description": "The ID of the record's parent. <br />Example: Stage is a parent of a Phase, Phase is a parent of a Job, Job is a parent of a Task.",
          "type": "string",
          "format": "uuid"
        },
        "percentComplete": {
          "description": "The percentage of record completion.",
          "type": "integer",
          "format": "int32"
        },
        "previousAttempts": {
          "description": "The previous record attempts.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimelineAttempt"
          }
        },
        "queueId": {
          "description": "The ID of the queue which connects projects to agent pools on which the operation ran on. Applicable when record is of type Job.",
          "type": "integer",
          "format": "int32"
        },
        "refName": {
          "description": "Name of the referenced record.",
          "type": "string"
        },
        "result": {
          "description": "The result of the record.",
          "enum": [
            "succeeded",
            "succeededWithIssues",
            "failed",
            "canceled",
            "skipped",
            "abandoned"
          ],
          "x-ms-enum": {
            "name": "TaskResult",
            "values": [
              {
                "value": "succeeded",
                "description": ""
              },
              {
                "value": "succeededWithIssues",
                "description": ""
              },
              {
                "value": "failed",
                "description": ""
              },
              {
                "value": "canceled",
                "description": ""
              },
              {
                "value": "skipped",
                "description": ""
              },
              {
                "value": "abandoned",
                "description": ""
              }
            ]
          }
        },
        "resultCode": {
          "description": "Evaluation of predefined conditions upon completion of record's operation. <br />Example: Evaluating `succeeded()`, Result = True <br />Example: Evaluating `and(succeeded(), eq(variables['system.debug'], False))`, Result = False",
          "type": "string"
        },
        "startTime": {
          "description": "The start time of the record.",
          "type": "string",
          "format": "date-time"
        },
        "state": {
          "description": "The state of the record.",
          "enum": [
            "pending",
            "inProgress",
            "completed"
          ],
          "x-ms-enum": {
            "name": "TimelineRecordState",
            "values": [
              {
                "value": "pending",
                "description": ""
              },
              {
                "value": "inProgress",
                "description": ""
              },
              {
                "value": "completed",
                "description": ""
              }
            ]
          }
        },
        "task": {
          "description": "A reference to the task. Applicable when record is of type Task.",
          "$ref": "#/definitions/TaskReference"
        },
        "type": {
          "description": "The type of operation being tracked by the record. <br />Example: Stage, Phase, Job, Task...",
          "type": "string"
        },
        "variables": {
          "description": "The variables of the record.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/VariableValue"
          }
        },
        "warningCount": {
          "description": "The number of warnings produced by this operation.",
          "type": "integer",
          "format": "int32"
        },
        "workerName": {
          "description": "The name of the agent running the operation. Applicable when record is of type Job.",
          "type": "string"
        }
      }
    },
    "TimelineRecordFeedLinesWrapper": {
      "description": "",
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "endLine": {
          "type": "integer",
          "format": "int64"
        },
        "startLine": {
          "type": "integer",
          "format": "int64"
        },
        "stepId": {
          "type": "string",
          "format": "uuid"
        },
        "value": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TimelineReference": {
      "description": "A reference to a timeline.",
      "type": "object",
      "properties": {
        "changeId": {
          "description": "The change ID.",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "The ID of the timeline.",
          "type": "string",
          "format": "uuid"
        },
        "location": {
          "description": "The REST URL of the timeline.",
          "type": "string"
        }
      }
    },
    "ValidationItem": {
      "description": "",
      "type": "object",
      "properties": {
        "isValid": {
          "description": "Tells whether the current input is valid or not",
          "type": "boolean"
        },
        "reason": {
          "description": "Reason for input validation failure",
          "type": "string"
        },
        "type": {
          "description": "Type of validation item",
          "type": "string"
        },
        "value": {
          "description": "Value to validate. The conditional expression to validate for the input for \"expression\" type Eg:eq(variables['Build.SourceBranch'], 'refs/heads/master');eq(value, 'refs/heads/master')",
          "type": "string"
        }
      }
    },
    "VariableGroup": {
      "description": "A variable group is a collection of related variables.",
      "type": "object",
      "properties": {
        "createdBy": {
          "description": "Gets or sets the identity who created the variable group.",
          "$ref": "#/definitions/IdentityRef"
        },
        "createdOn": {
          "description": "Gets or sets the time when variable group was created.",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "Gets or sets description of the variable group.",
          "type": "string"
        },
        "id": {
          "description": "Gets or sets id of the variable group.",
          "type": "integer",
          "format": "int32"
        },
        "isShared": {
          "description": "Indicates whether variable group is shared with other projects or not.",
          "type": "boolean"
        },
        "modifiedBy": {
          "description": "Gets or sets the identity who modified the variable group.",
          "$ref": "#/definitions/IdentityRef"
        },
        "modifiedOn": {
          "description": "Gets or sets the time when variable group was modified",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "Gets or sets name of the variable group.",
          "type": "string"
        },
        "providerData": {
          "description": "Gets or sets provider data.",
          "$ref": "#/definitions/VariableGroupProviderData"
        },
        "type": {
          "description": "Gets or sets type of the variable group.",
          "type": "string"
        },
        "variableGroupProjectReferences": {
          "description": "all project references where the variable group is shared with other projects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariableGroupProjectReference"
          }
        },
        "variables": {
          "description": "Gets or sets variables contained in the variable group.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/VariableValue"
          }
        }
      }
    },
    "VariableGroupParameters": {
      "description": "",
      "type": "object",
      "properties": {
        "description": {
          "description": "Sets description of the variable group.",
          "type": "string"
        },
        "name": {
          "description": "Sets name of the variable group.",
          "type": "string"
        },
        "providerData": {
          "description": "Sets provider data.",
          "$ref": "#/definitions/VariableGroupProviderData"
        },
        "type": {
          "description": "Sets type of the variable group.",
          "type": "string"
        },
        "variableGroupProjectReferences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariableGroupProjectReference"
          }
        },
        "variables": {
          "description": "Sets variables contained in the variable group.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/VariableValue"
          }
        }
      }
    },
    "VariableGroupProjectReference": {
      "description": "A variable group reference is a shallow reference to variable group.",
      "type": "object",
      "properties": {
        "description": {
          "description": "Gets or sets description of the variable group.",
          "type": "string"
        },
        "name": {
          "description": "Gets or sets name of the variable group.",
          "type": "string"
        },
        "projectReference": {
          "description": "Gets or sets project reference of the variable group.",
          "$ref": "#/definitions/ProjectReference"
        }
      }
    },
    "VariableGroupProviderData": {
      "description": "Defines provider data of the variable group.",
      "type": "object",
      "properties": {}
    },
    "VariableValue": {
      "description": "A wrapper class for a generic variable.",
      "type": "object",
      "properties": {
        "isReadOnly": {
          "description": "Indicates whether the variable can be changed during script's execution runtime.",
          "type": "boolean"
        },
        "isSecret": {
          "description": "Indicates whether the variable should be encrypted at rest.",
          "type": "boolean"
        },
        "value": {
          "description": "The value of the variable.",
          "type": "string"
        }
      }
    },
    "VirtualMachine": {
      "description": "",
      "type": "object",
      "properties": {
        "agent": {
          "$ref": "#/definitions/TaskAgent"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "VirtualMachineGroup": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EnvironmentResource"
        }
      ],
      "properties": {
        "poolId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "VirtualMachineGroupCreateParameters": {
      "description": "",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "VirtualMachineResource": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EnvironmentResource"
        }
      ],
      "properties": {
        "agent": {
          "$ref": "#/definitions/TaskAgent"
        }
      }
    },
    "VirtualMachineResourceCreateParameters": {
      "description": "",
      "type": "object",
      "properties": {
        "virtualMachineResource": {
          "$ref": "#/definitions/VirtualMachineResource"
        }
      }
    },
    "VssJsonCollectionWrapper": {
      "description": "This class is used to serialize collections as a single JSON object on the wire.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/VssJsonCollectionWrapperBase"
        }
      ],
      "properties": {
        "value": {
          "description": "The serialized item.",
          "type": "string",
          "format": "T"
        }
      }
    },
    "VssJsonCollectionWrapperBase": {
      "description": "",
      "type": "object",
      "properties": {
        "count": {
          "description": "The number of serialized items.",
          "type": "integer",
          "format": "int32"
        }
      }
    }
  },
  "parameters": {
    "api-Version": {
      "name": "api-version",
      "in": "query",
      "description": "Version of the API to use.  This should be set to '7.1' to use this version of the api.",
      "required": true,
      "type": "string"
    },
    "api-Version-preview.1": {
      "name": "api-version",
      "in": "query",
      "description": "Version of the API to use.  This should be set to '7.1-preview.1' to use this version of the api.",
      "required": true,
      "type": "string"
    },
    "api-Version-preview.2": {
      "name": "api-version",
      "in": "query",
      "description": "Version of the API to use.  This should be set to '7.1-preview.2' to use this version of the api.",
      "required": true,
      "type": "string"
    }
  },
  "securityDefinitions": {
    "accessToken": {
      "type": "basic",
      "description": "Personal access token. Use any value for the user name and the token as the password."
    },
    "oauth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://app.vssps.visualstudio.com/oauth2/authorize&response_type=Assertion",
      "tokenUrl": "https://app.vssps.visualstudio.com/oauth2/token?client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer&grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer",
      "scopes": {
        "vso.agentpools": "Grants the ability to view tasks, pools, queues, agents, and currently running or recently completed jobs for agents",
        "vso.agentpools_manage": "Grants the ability to manage pools, queues, and agents",
        "vso.machinegroup_manage": "Provides ability to manage deployment group and agent pools",
        "vso.taskgroups_manage": "Grants the ability to read, create and manage taskgroups.",
        "vso.taskgroups_read": "Grants the ability to read task groups",
        "vso.taskgroups_write": "Grants the ability to read and create task groups",
        "vso.variablegroups_read": "Grants the ability to read variable groups",
        "vso.variablegroups_manage": "Grants the ability to read, create and manage variablegroups.",
        "vso.securefiles_write": "Grants the ability to read and create secure files.",
        "vso.securefiles_read": "Grants the ability to read secure files.",
        "vso.securefiles_manage": "Grants the ability to read, create, and manage secure files.",
        "vso.environment_manage": "Provides ability to manage environment"
      }
    }
  },
  "security": [
    {
      "accessToken": []
    }
  ],
  "externalDocs": {
    "description": "Azure DevOps REST APIs",
    "url": "https://aka.ms/azure-devops-rest-apis"
  }
}