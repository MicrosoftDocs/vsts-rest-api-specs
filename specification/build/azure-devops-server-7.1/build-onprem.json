{
  "swagger": "2.0",
  "info": {
    "title": "Build",
    "description": "",
    "termsOfService": "https://go.microsoft.com/fwlink/?LinkId=329770",
    "contact": {
      "name": "nugetvss",
      "email": "nugetvss@microsoft.com"
    },
    "license": {
      "name": "MICROSOFT SOFTWARE LICENSE TERMS",
      "url": "https://go.microsoft.com/fwlink/?LinkId=329770"
    },
    "version": "7.1"
  },
  "host": "https://fabrikam-fiber-inc:8080/DefaultCollection",
  "x-ms-vss-area": "Build",
  "x-ms-vss-resource-area-id": "965220d5-5bb9-42cf-8d67-9b146df2a5a4",
  "basePath": "/",
  "tags": [
    {
      "name": "Artifacts",
      "description": "Provides methods for working with artifacts produced by builds."
    },
    {
      "name": "Attachments"
    },
    {
      "name": "Authorizedresources"
    },
    {
      "name": "Badge",
      "description": "Provides methods to generate SVG images representing the status of builds."
    },
    {
      "name": "Builds",
      "description": "Provides methods for working with builds."
    },
    {
      "name": "Controllers"
    },
    {
      "name": "Definitions",
      "description": "Provides methods for working with build definitions."
    },
    {
      "name": "Folders",
      "description": "Provides methods for working with folders of build definitions."
    },
    {
      "name": "General Settings",
      "description": "Provides methods for working with general pipeline settings."
    },
    {
      "name": "History"
    },
    {
      "name": "Latest",
      "description": "Provides methods to return the latest builds for definitions."
    },
    {
      "name": "Leases",
      "description": "Retention leases are used to manage the lifetime of pipeline runs beyond the configured retention periods."
    },
    {
      "name": "Metrics",
      "description": "Provides methods for getting summary information about builds that have run in the system."
    },
    {
      "name": "Options",
      "description": "Provides methods for discovering build definition options supported by the system."
    },
    {
      "name": "Properties",
      "description": "Provides methods for working with extended properties of builds and definitions."
    },
    {
      "name": "Report",
      "description": "Provides methods for working with build reports."
    },
    {
      "name": "Resources"
    },
    {
      "name": "Resource Usage",
      "description": "Provides information about build resources in the system."
    },
    {
      "name": "Retention",
      "description": "Provides methods for updating pipeline retention settings."
    },
    {
      "name": "Settings",
      "description": "Provides methods for updating build-related system settings."
    },
    {
      "name": "Source Providers",
      "description": "Provides methods for working with source providers."
    },
    {
      "name": "Stages"
    },
    {
      "name": "Status",
      "description": "Provides methods to generate SVG images representing the status of builds."
    },
    {
      "name": "Tags"
    },
    {
      "name": "Templates",
      "description": "Provides methods for working with build definition templates."
    },
    {
      "name": "Timeline"
    },
    {
      "name": "Yaml",
      "description": "Provides conversion from Build Definition to Yaml."
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/{collection}/_apis/build/controllers": {
      "get": {
        "tags": [
          "Controllers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "controllers",
        "x-ms-vss-method": "GetBuildControllers",
        "description": "Gets controller, optionally filtered by name",
        "operationId": "Controllers_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BuildController"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/_apis/build/controllers/{controllerId}": {
      "get": {
        "tags": [
          "Controllers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "controllers",
        "x-ms-vss-method": "GetBuildController",
        "description": "Gets a controller",
        "operationId": "Controllers_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "controllerId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildController"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/_apis/build/resourceusage": {
      "get": {
        "tags": [
          "Resource Usage"
        ],
        "x-ms-docs-override-version": "7.1-preview.2",
        "x-ms-vss-resource": "resourceUsage",
        "x-ms-vss-method": "GetResourceUsage",
        "x-ms-preview": true,
        "description": "Gets information about build resources in the system.",
        "operationId": "Resource Usage_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version-preview.2"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildResourceUsage"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/_apis/build/retention/history": {
      "get": {
        "tags": [
          "History"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "history",
        "x-ms-vss-method": "GetRetentionHistory",
        "description": "Returns the retention history for the project collection. This includes pipelines that have custom retention rules that may prevent the retention job from cleaning them up, runs per pipeline with retention type, files associated with pipelines owned by the collection with retention type, and the number of files per pipeline.",
        "operationId": "History_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "daysToLookback",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildRetentionHistory"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/_apis/public/build/definitions/{project}/{definitionId}/badge": {
      "get": {
        "tags": [
          "Badge"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "badge",
        "x-ms-vss-method": "GetBadge",
        "deprecated": true,
        "description": "This endpoint is deprecated. Please see the Build Status REST endpoint.",
        "operationId": "Badge_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "The project ID or name.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "definitionId",
            "description": "The ID of the definition.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "branchName",
            "description": "The name of the branch.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/authorizedresources": {
      "patch": {
        "tags": [
          "Authorizedresources"
        ],
        "x-ms-docs-override-version": "7.1-preview.1",
        "x-ms-vss-resource": "authorizedresources",
        "x-ms-vss-method": "AuthorizeProjectResources",
        "x-ms-preview": true,
        "description": "",
        "operationId": "Authorizedresources_Authorize Project Resources",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DefinitionResourceReference"
              }
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DefinitionResourceReference"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute",
              "vso.pipelineresources_manage"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Authorizedresources"
        ],
        "x-ms-docs-override-version": "7.1-preview.1",
        "x-ms-vss-resource": "authorizedresources",
        "x-ms-vss-method": "GetProjectResources",
        "x-ms-preview": true,
        "description": "",
        "operationId": "Authorizedresources_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "type",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "id",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DefinitionResourceReference"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/builds": {
      "get": {
        "tags": [
          "Builds"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "builds",
        "x-ms-vss-method": "GetBuilds",
        "description": "Gets a list of builds.",
        "operationId": "Builds_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "definitions",
            "description": "A comma-delimited list of definition IDs. If specified, filters to builds for these definitions.",
            "required": false,
            "type": "string",
            "format": "array (int32)"
          },
          {
            "in": "query",
            "name": "queues",
            "description": "A comma-delimited list of queue IDs. If specified, filters to builds that ran against these queues.",
            "required": false,
            "type": "string",
            "format": "array (int32)"
          },
          {
            "in": "query",
            "name": "buildNumber",
            "description": "If specified, filters to builds that match this build number. Append * to do a prefix search.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "minTime",
            "description": "If specified, filters to builds that finished/started/queued after this date based on the queryOrder specified.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxTime",
            "description": "If specified, filters to builds that finished/started/queued before this date based on the queryOrder specified.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "requestedFor",
            "description": "If specified, filters to builds requested for the specified user.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "reasonFilter",
            "description": "If specified, filters to builds that match this reason.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "manual",
              "individualCI",
              "batchedCI",
              "schedule",
              "scheduleForced",
              "userCreated",
              "validateShelveset",
              "checkInShelveset",
              "pullRequest",
              "buildCompletion",
              "resourceTrigger",
              "triggered",
              "all"
            ],
            "x-ms-enum": {
              "name": "BuildReason",
              "values": [
                {
                  "value": "none",
                  "description": "No reason. This value should not be used."
                },
                {
                  "value": "manual",
                  "description": "The build was started manually."
                },
                {
                  "value": "individualCI",
                  "description": "The build was started for the trigger TriggerType.ContinuousIntegration."
                },
                {
                  "value": "batchedCI",
                  "description": "The build was started for the trigger TriggerType.BatchedContinuousIntegration."
                },
                {
                  "value": "schedule",
                  "description": "The build was started for the trigger TriggerType.Schedule."
                },
                {
                  "value": "scheduleForced",
                  "description": "The build was started for the trigger TriggerType.ScheduleForced."
                },
                {
                  "value": "userCreated",
                  "description": "The build was created by a user."
                },
                {
                  "value": "validateShelveset",
                  "description": "The build was started manually for private validation."
                },
                {
                  "value": "checkInShelveset",
                  "description": "The build was started for the trigger ContinuousIntegrationType.Gated."
                },
                {
                  "value": "pullRequest",
                  "description": "The build was started by a pull request. Added in resource version 3."
                },
                {
                  "value": "buildCompletion",
                  "description": "The build was started when another build completed."
                },
                {
                  "value": "resourceTrigger",
                  "description": "The build was started when resources in pipeline triggered it"
                },
                {
                  "value": "triggered",
                  "description": "The build was triggered for retention policy purposes."
                },
                {
                  "value": "all",
                  "description": "All reasons."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "statusFilter",
            "description": "If specified, filters to builds that match this status.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "inProgress",
              "completed",
              "cancelling",
              "postponed",
              "notStarted",
              "all"
            ],
            "x-ms-enum": {
              "name": "BuildStatus",
              "values": [
                {
                  "value": "none",
                  "description": "No status."
                },
                {
                  "value": "inProgress",
                  "description": "The build is currently in progress."
                },
                {
                  "value": "completed",
                  "description": "The build has completed."
                },
                {
                  "value": "cancelling",
                  "description": "The build is cancelling"
                },
                {
                  "value": "postponed",
                  "description": "The build is inactive in the queue."
                },
                {
                  "value": "notStarted",
                  "description": "The build has not yet started."
                },
                {
                  "value": "all",
                  "description": "All status."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "resultFilter",
            "description": "If specified, filters to builds that match this result.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "succeeded",
              "partiallySucceeded",
              "failed",
              "canceled"
            ],
            "x-ms-enum": {
              "name": "BuildResult",
              "values": [
                {
                  "value": "none",
                  "description": "No result"
                },
                {
                  "value": "succeeded",
                  "description": "The build completed successfully."
                },
                {
                  "value": "partiallySucceeded",
                  "description": "The build completed compilation successfully but had other errors."
                },
                {
                  "value": "failed",
                  "description": "The build completed unsuccessfully."
                },
                {
                  "value": "canceled",
                  "description": "The build was canceled before starting."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "tagFilters",
            "description": "A comma-delimited list of tags. If specified, filters to builds that have the specified tags.",
            "required": false,
            "type": "string",
            "format": "array (string)"
          },
          {
            "in": "query",
            "name": "properties",
            "description": "A comma-delimited list of properties to retrieve.",
            "required": false,
            "type": "string",
            "format": "array (string)"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The maximum number of builds to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "A continuation token, returned by a previous call to this method, that can be used to return the next set of builds.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "maxBuildsPerDefinition",
            "description": "The maximum number of builds to return per definition.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "deletedFilter",
            "description": "Indicates whether to exclude, include, or only return deleted builds.",
            "required": false,
            "type": "string",
            "enum": [
              "excludeDeleted",
              "includeDeleted",
              "onlyDeleted"
            ],
            "x-ms-enum": {
              "name": "QueryDeletedOption",
              "values": [
                {
                  "value": "excludeDeleted",
                  "description": "Include only non-deleted builds."
                },
                {
                  "value": "includeDeleted",
                  "description": "Include deleted and non-deleted builds."
                },
                {
                  "value": "onlyDeleted",
                  "description": "Include only deleted builds."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "queryOrder",
            "description": "The order in which builds should be returned.",
            "required": false,
            "type": "string",
            "enum": [
              "finishTimeAscending",
              "finishTimeDescending",
              "queueTimeDescending",
              "queueTimeAscending",
              "startTimeDescending",
              "startTimeAscending"
            ],
            "x-ms-enum": {
              "name": "BuildQueryOrder",
              "values": [
                {
                  "value": "finishTimeAscending",
                  "description": "Order by finish time ascending."
                },
                {
                  "value": "finishTimeDescending",
                  "description": "Order by finish time descending."
                },
                {
                  "value": "queueTimeDescending",
                  "description": "Order by queue time descending."
                },
                {
                  "value": "queueTimeAscending",
                  "description": "Order by queue time ascending."
                },
                {
                  "value": "startTimeDescending",
                  "description": "Order by start time descending."
                },
                {
                  "value": "startTimeAscending",
                  "description": "Order by start time ascending."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "branchName",
            "description": "If specified, filters to builds that built branches that built this branch.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "buildIds",
            "description": "A comma-delimited list that specifies the IDs of builds to retrieve.",
            "required": false,
            "type": "string",
            "format": "array (int32)"
          },
          {
            "in": "query",
            "name": "repositoryId",
            "description": "If specified, filters to builds that built from this repository.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "repositoryType",
            "description": "If specified, filters to builds that built from repositories of this type.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Build"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Builds"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "builds",
        "x-ms-vss-method": "QueueBuild",
        "description": "Queues a build",
        "operationId": "Builds_Queue",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Build"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ignoreWarnings",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "checkInTicket",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sourceBuildId",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "definitionId",
            "description": "Optional definition id to queue a build without a body. Ignored if there's a valid body",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Builds"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "builds",
        "x-ms-vss-method": "UpdateBuilds",
        "description": "Updates multiple builds.",
        "operationId": "Builds_Update Builds",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The builds to update.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Build"
              }
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Build"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/builds/{buildId}": {
      "delete": {
        "tags": [
          "Builds"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "builds",
        "x-ms-vss-method": "DeleteBuild",
        "description": "Deletes a build.",
        "operationId": "Builds_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "buildId",
            "description": "The ID of the build.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Builds"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "builds",
        "x-ms-vss-method": "GetBuild",
        "description": "Gets a build",
        "operationId": "Builds_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "buildId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Builds"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "builds",
        "x-ms-vss-method": "UpdateBuild",
        "description": "Updates a build.",
        "operationId": "Builds_Update Build",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The build.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Build"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "buildId",
            "description": "The ID of the build.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "retry",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/builds/{buildId}/{timelineId}/{recordId}/attachments/{type}/{name}": {
      "get": {
        "tags": [
          "Attachments"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "attachments",
        "x-ms-vss-method": "GetAttachment",
        "description": "Gets a specific attachment.",
        "operationId": "Attachments_Get",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "buildId",
            "description": "The ID of the build.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "timelineId",
            "description": "The ID of the timeline.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "recordId",
            "description": "The ID of the timeline record.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "type",
            "description": "The type of the attachment.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "name",
            "description": "The name of the attachment.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "Stream"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/builds/{buildId}/artifacts": {
      "post": {
        "tags": [
          "Artifacts"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "artifacts",
        "x-ms-vss-method": "CreateArtifact",
        "description": "Associates an artifact with a build.",
        "operationId": "Artifacts_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The artifact.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BuildArtifact"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "buildId",
            "description": "The ID of the build.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildArtifact"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Artifacts"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "artifacts",
        "x-ms-vss-method": "GetArtifacts",
        "description": "Gets all artifacts for a build.",
        "operationId": "Artifacts_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "buildId",
            "description": "The ID of the build.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BuildArtifact"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/builds/{buildId}/attachments/{type}": {
      "get": {
        "tags": [
          "Attachments"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "attachments",
        "x-ms-vss-method": "GetAttachments",
        "description": "Gets the list of attachments of a specific type that are associated with a build.",
        "operationId": "Attachments_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "buildId",
            "description": "The ID of the build.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "type",
            "description": "The type of attachment.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Attachment"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/builds/{buildId}/changes": {
      "get": {
        "tags": [
          "Builds"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "changes",
        "x-ms-vss-method": "GetBuildChanges",
        "description": "Gets the changes associated with a build",
        "operationId": "Builds_Get Build Changes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "buildId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The maximum number of changes to return",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "includeSourceChange",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Change"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/builds/{buildId}/leases": {
      "get": {
        "tags": [
          "Builds"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "buildleases",
        "x-ms-vss-method": "GetRetentionLeasesForBuild",
        "description": "Gets all retention leases that apply to a specific build.",
        "operationId": "Builds_Get Retention Leases For Build",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "buildId",
            "description": "The ID of the build.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RetentionLease"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/builds/{buildId}/logs": {
      "get": {
        "tags": [
          "Builds"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "logs",
        "x-ms-vss-method": "GetBuildLogs",
        "description": "Gets the logs for a build.",
        "operationId": "Builds_Get Build Logs",
        "produces": [
          "application/zip",
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "buildId",
            "description": "The ID of the build.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BuildLog"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/builds/{buildId}/logs/{logId}": {
      "get": {
        "tags": [
          "Builds"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "logs",
        "x-ms-vss-method": "GetBuildLog",
        "description": "Gets an individual log file for a build.",
        "operationId": "Builds_Get Build Log",
        "produces": [
          "application/zip",
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "buildId",
            "description": "The ID of the build.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "logId",
            "description": "The ID of the log file.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "startLine",
            "description": "The start line.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "endLine",
            "description": "The end line.",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "Stream"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/builds/{buildId}/properties": {
      "get": {
        "tags": [
          "Properties"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "properties",
        "x-ms-vss-method": "GetBuildProperties",
        "description": "Gets properties for a build.",
        "operationId": "Properties_Get Build Properties",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "buildId",
            "description": "The ID of the build.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "A comma-delimited list of properties. If specified, filters to these specific properties.",
            "required": false,
            "type": "string",
            "format": "array (string)"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PropertiesCollection"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Properties"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "properties",
        "x-ms-vss-method": "UpdateBuildProperties",
        "description": "Updates properties for a build.",
        "operationId": "Properties_Update Build Properties",
        "consumes": [
          "application/json-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "A json-patch document describing the properties to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonPatchDocument"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "buildId",
            "description": "The ID of the build.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PropertiesCollection"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/builds/{buildId}/report": {
      "get": {
        "tags": [
          "Report"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "report",
        "x-ms-vss-method": "GetBuildReport",
        "description": "Gets a build report.",
        "operationId": "Report_Get",
        "produces": [
          "text/html",
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "buildId",
            "description": "The ID of the build.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "type",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildReportMetadata"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/builds/{buildId}/stages/{stageRefName}": {
      "patch": {
        "tags": [
          "Stages"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "stages",
        "x-ms-vss-method": "UpdateStage",
        "description": "Update a build stage",
        "operationId": "Stages_Update",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateStageParameters"
            }
          },
          {
            "in": "path",
            "name": "buildId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "stageRefName",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/builds/{buildId}/tags": {
      "post": {
        "tags": [
          "Tags"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "tags",
        "x-ms-vss-method": "AddBuildTags",
        "description": "Adds tags to a build.",
        "operationId": "Tags_Add Build Tags",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The tags to add. Request body is composed directly from listed tags.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "buildId",
            "description": "The ID of the build.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ],
        "x-ms-examples": {
          "": {
            "$ref": "./httpExamples/tags/POST_build_addBuildTag-onprem.json"
          }
        }
      },
      "get": {
        "tags": [
          "Tags"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "tags",
        "x-ms-vss-method": "GetBuildTags",
        "description": "Gets the tags for a build.",
        "operationId": "Tags_Get Build Tags",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "buildId",
            "description": "The ID of the build.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Tags"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "tags",
        "x-ms-vss-method": "UpdateBuildTags",
        "description": "Adds/Removes tags from a build.",
        "operationId": "Tags_Update Build Tags",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The tags to add/remove.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTagParameters"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "buildId",
            "description": "The ID of the build.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/builds/{buildId}/tags/{tag}": {
      "put": {
        "tags": [
          "Tags"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "tags",
        "x-ms-vss-method": "AddBuildTag",
        "description": "Adds a tag to a build.",
        "operationId": "Tags_Add Build Tag",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "buildId",
            "description": "The ID of the build.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "tag",
            "description": "The tag to add.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "tags",
        "x-ms-vss-method": "DeleteBuildTag",
        "description": "Removes a tag from a build. NOTE: This API will not work for tags with special characters. To remove tags with special characters, use the PATCH method instead (in 6.0+)",
        "operationId": "Tags_Delete Build Tag",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "buildId",
            "description": "The ID of the build.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "tag",
            "description": "The tag to remove.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/builds/{buildId}/timeline/{timelineId}": {
      "get": {
        "tags": [
          "Timeline"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "timeline",
        "x-ms-vss-method": "GetBuildTimeline",
        "description": "Gets details for a build",
        "operationId": "Timeline_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "buildId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "timelineId",
            "description": "",
            "required": true,
            "x-ms-required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "changeId",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "planId",
            "description": "",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Timeline"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/builds/{buildId}/workitems": {
      "get": {
        "tags": [
          "Builds"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "workitems",
        "x-ms-vss-method": "GetBuildWorkItemsRefs",
        "description": "Gets the work items associated with a build. Only work items in the same project are returned.",
        "operationId": "Builds_Get Build Work Items Refs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "buildId",
            "description": "The ID of the build.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The maximum number of work items to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResourceRef"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Builds"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "workitems",
        "x-ms-vss-method": "GetBuildWorkItemsRefsFromCommits",
        "description": "Gets the work items associated with a build, filtered to specific commits.",
        "operationId": "Builds_Get Build Work Items Refs From Commits",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "A comma-delimited list of commit IDs.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "buildId",
            "description": "The ID of the build.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The maximum number of work items to return, or the number of commits to consider if no commit IDs are specified.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResourceRef"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/changes": {
      "get": {
        "tags": [
          "Builds"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "changes",
        "x-ms-vss-method": "GetChangesBetweenBuilds",
        "description": "Gets the changes made to the repository between two given builds.",
        "operationId": "Builds_Get Changes Between Builds",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "fromBuildId",
            "description": "The ID of the first build.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "toBuildId",
            "description": "The ID of the last build.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The maximum number of changes to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Change"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/definitions": {
      "post": {
        "tags": [
          "Definitions"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "definitions",
        "x-ms-vss-method": "CreateDefinition",
        "description": "Creates a new definition.",
        "operationId": "Definitions_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The definition.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BuildDefinition"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "definitionToCloneId",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "definitionToCloneRevision",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildDefinition"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Definitions"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "definitions",
        "x-ms-vss-method": "GetDefinitions",
        "description": "Gets a list of definitions.",
        "operationId": "Definitions_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "description": "If specified, filters to definitions whose names match this pattern.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "repositoryId",
            "description": "A repository ID. If specified, filters to definitions that use this repository.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "repositoryType",
            "description": "If specified, filters to definitions that have a repository of this type.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "queryOrder",
            "description": "Indicates the order in which definitions should be returned.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "lastModifiedAscending",
              "lastModifiedDescending",
              "definitionNameAscending",
              "definitionNameDescending"
            ],
            "x-ms-enum": {
              "name": "DefinitionQueryOrder",
              "values": [
                {
                  "value": "none",
                  "description": "No order"
                },
                {
                  "value": "lastModifiedAscending",
                  "description": "Order by created on/last modified time ascending."
                },
                {
                  "value": "lastModifiedDescending",
                  "description": "Order by created on/last modified time descending."
                },
                {
                  "value": "definitionNameAscending",
                  "description": "Order by definition name ascending."
                },
                {
                  "value": "definitionNameDescending",
                  "description": "Order by definition name descending."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The maximum number of definitions to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "A continuation token, returned by a previous call to this method, that can be used to return the next set of definitions.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "minMetricsTime",
            "description": "If specified, indicates the date from which metrics should be included.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "definitionIds",
            "description": "A comma-delimited list that specifies the IDs of definitions to retrieve.",
            "required": false,
            "type": "string",
            "format": "array (int32)"
          },
          {
            "in": "query",
            "name": "path",
            "description": "If specified, filters to definitions under this folder.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "builtAfter",
            "description": "If specified, filters to definitions that have builds after this date.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "notBuiltAfter",
            "description": "If specified, filters to definitions that do not have builds after this date.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "includeAllProperties",
            "description": "Indicates whether the full definitions should be returned. By default, shallow representations of the definitions are returned.",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "includeLatestBuilds",
            "description": "Indicates whether to return the latest and latest completed builds for this definition.",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "taskIdFilter",
            "description": "If specified, filters to definitions that use the specified task.",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "processType",
            "description": "If specified, filters to definitions with the given process type.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "yamlFilename",
            "description": "If specified, filters to YAML definitions that match the given filename. To use this filter includeAllProperties should be set to true",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BuildDefinitionReference"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/definitions/{definitionId}": {
      "delete": {
        "tags": [
          "Definitions"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "definitions",
        "x-ms-vss-method": "DeleteDefinition",
        "description": "Deletes a definition and all associated builds.",
        "operationId": "Definitions_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "definitionId",
            "description": "The ID of the definition.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Definitions"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "definitions",
        "x-ms-vss-method": "GetDefinition",
        "description": "Gets a definition, optionally at a specific revision.",
        "operationId": "Definitions_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "definitionId",
            "description": "The ID of the definition.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "revision",
            "description": "The revision number to retrieve. If this is not specified, the latest version will be returned.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "minMetricsTime",
            "description": "If specified, indicates the date from which metrics should be included.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "A comma-delimited list of properties to include in the results.",
            "required": false,
            "type": "string",
            "format": "array (string)"
          },
          {
            "in": "query",
            "name": "includeLatestBuilds",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildDefinition"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Definitions"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "definitions",
        "x-ms-vss-method": "RestoreDefinition",
        "description": "Restores a deleted definition",
        "operationId": "Definitions_Restore Definition",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "definitionId",
            "description": "The identifier of the definition to restore.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "deleted",
            "description": "When false, restores a deleted definition.",
            "required": true,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildDefinition"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Definitions"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "definitions",
        "x-ms-vss-method": "UpdateDefinition",
        "description": "Updates an existing build definition.  In order for this operation to succeed, the value of the \"Revision\" property of the request body must match the existing build definition's. It is recommended that you obtain the existing build definition by using GET, modify the build definition as necessary, and then submit the modified definition with PUT.",
        "operationId": "Definitions_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The new version of the definition. Its \"Revision\" property must match the existing definition for the update to be accepted.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BuildDefinition"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "definitionId",
            "description": "The ID of the definition.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "secretsSourceDefinitionId",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "secretsSourceDefinitionRevision",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildDefinition"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/definitions/{definitionId}/metrics": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "x-ms-docs-override-version": "7.1-preview.1",
        "x-ms-vss-resource": "metrics",
        "x-ms-vss-method": "GetDefinitionMetrics",
        "x-ms-preview": true,
        "description": "Gets build metrics for a definition.",
        "operationId": "Metrics_Get Definition Metrics",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "definitionId",
            "description": "The ID of the definition.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "minMetricsTime",
            "description": "The date from which to calculate metrics.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BuildMetric"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/definitions/{definitionId}/properties": {
      "get": {
        "tags": [
          "Properties"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "properties",
        "x-ms-vss-method": "GetDefinitionProperties",
        "description": "Gets properties for a definition.",
        "operationId": "Properties_Get Definition Properties",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "definitionId",
            "description": "The ID of the definition.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "filter",
            "description": "A comma-delimited list of properties. If specified, filters to these specific properties.",
            "required": false,
            "type": "string",
            "format": "array (string)"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PropertiesCollection"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Properties"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "properties",
        "x-ms-vss-method": "UpdateDefinitionProperties",
        "description": "Updates properties for a definition.",
        "operationId": "Properties_Update Definition Properties",
        "consumes": [
          "application/json-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "A json-patch document describing the properties to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonPatchDocument"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "definitionId",
            "description": "The ID of the definition.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PropertiesCollection"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ],
        "x-ms-examples": {
          "": {
            "$ref": "./httpExamples/properties/PATCH_build_updateDefinitionProperties-onprem.json"
          }
        }
      }
    },
    "/{collection}/{project}/_apis/build/definitions/{definitionId}/resources": {
      "patch": {
        "tags": [
          "Resources"
        ],
        "x-ms-docs-override-version": "7.1-preview.1",
        "x-ms-vss-resource": "resources",
        "x-ms-vss-method": "AuthorizeDefinitionResources",
        "x-ms-preview": true,
        "description": "",
        "operationId": "Resources_Authorize Definition Resources",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DefinitionResourceReference"
              }
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "definitionId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DefinitionResourceReference"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute",
              "vso.pipelineresources_manage"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Resources"
        ],
        "x-ms-docs-override-version": "7.1-preview.1",
        "x-ms-vss-resource": "resources",
        "x-ms-vss-method": "GetDefinitionResources",
        "x-ms-preview": true,
        "description": "",
        "operationId": "Resources_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "definitionId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DefinitionResourceReference"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/definitions/{definitionId}/revisions": {
      "get": {
        "tags": [
          "Definitions"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "revisions",
        "x-ms-vss-method": "GetDefinitionRevisions",
        "description": "Gets all revisions of a definition.",
        "operationId": "Definitions_Get Definition Revisions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "definitionId",
            "description": "The ID of the definition.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BuildDefinitionRevision"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/definitions/{DefinitionId}/tags": {
      "post": {
        "tags": [
          "Tags"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "tags",
        "x-ms-vss-method": "AddDefinitionTags",
        "description": "Adds multiple tags to a definition.",
        "operationId": "Tags_Add Definition Tags",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The tags to add.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "definitionId",
            "description": "The ID of the definition.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Tags"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "tags",
        "x-ms-vss-method": "GetDefinitionTags",
        "description": "Gets the tags for a definition.",
        "operationId": "Tags_Get Definition Tags",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "definitionId",
            "description": "The ID of the definition.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "revision",
            "description": "The definition revision number. If not specified, uses the latest revision of the definition.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Tags"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "tags",
        "x-ms-vss-method": "UpdateDefinitionTags",
        "description": "Adds/Removes tags from a definition.",
        "operationId": "Tags_Update Definition Tags",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The tags to add/remove.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTagParameters"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "definitionId",
            "description": "The ID of the definition.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/definitions/{DefinitionId}/tags/{tag}": {
      "put": {
        "tags": [
          "Tags"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "tags",
        "x-ms-vss-method": "AddDefinitionTag",
        "description": "Adds a tag to a definition",
        "operationId": "Tags_Add Definition Tag",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "definitionId",
            "description": "The ID of the definition.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "tag",
            "description": "The tag to add.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "tags",
        "x-ms-vss-method": "DeleteDefinitionTag",
        "description": "Removes a tag from a definition. NOTE: This API will not work for tags with special characters. To remove tags with special characters, use the PATCH method instead (in 6.0+)",
        "operationId": "Tags_Delete Definition Tag",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "definitionId",
            "description": "The ID of the definition.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "tag",
            "description": "The tag to remove.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/definitions/{definitionId}/yaml": {
      "get": {
        "tags": [
          "Yaml"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "yaml",
        "x-ms-vss-method": "GetDefinitionYaml",
        "description": "Converts a definition to YAML, optionally at a specific revision.",
        "operationId": "Yaml_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "definitionId",
            "description": "The ID of the definition.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "revision",
            "description": "The revision number to retrieve. If this is not specified, the latest version will be returned.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "minMetricsTime",
            "description": "If specified, indicates the date from which metrics should be included.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "A comma-delimited list of properties to include in the results.",
            "required": false,
            "type": "string",
            "format": "array (string)"
          },
          {
            "in": "query",
            "name": "includeLatestBuilds",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/YamlBuild"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/definitions/templates": {
      "get": {
        "tags": [
          "Templates"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "templates",
        "x-ms-vss-method": "GetTemplates",
        "description": "Gets all definition templates.",
        "operationId": "Templates_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BuildDefinitionTemplate"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/definitions/templates/{templateId}": {
      "delete": {
        "tags": [
          "Templates"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "templates",
        "x-ms-vss-method": "DeleteTemplate",
        "description": "Deletes a build definition template.",
        "operationId": "Templates_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "templateId",
            "description": "The ID of the template.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Templates"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "templates",
        "x-ms-vss-method": "GetTemplate",
        "description": "Gets a specific build definition template.",
        "operationId": "Templates_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "templateId",
            "description": "The ID of the requested template.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildDefinitionTemplate"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Templates"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "templates",
        "x-ms-vss-method": "SaveTemplate",
        "description": "Updates an existing build definition template.",
        "operationId": "Templates_Save Template",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The new version of the template.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BuildDefinitionTemplate"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "templateId",
            "description": "The ID of the template.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildDefinitionTemplate"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/folders": {
      "put": {
        "tags": [
          "Folders"
        ],
        "x-ms-docs-override-version": "7.1-preview.2",
        "x-ms-vss-resource": "folders",
        "x-ms-vss-method": "CreateFolder",
        "x-ms-preview": true,
        "description": "Creates a new folder.",
        "operationId": "Folders_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The folder.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "path",
            "description": "The full path of the folder.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version-preview.2"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Folders"
        ],
        "x-ms-docs-override-version": "7.1-preview.2",
        "x-ms-vss-resource": "folders",
        "x-ms-vss-method": "DeleteFolder",
        "x-ms-preview": true,
        "description": "Deletes a definition folder. Definitions and their corresponding builds will also be deleted.",
        "operationId": "Folders_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "path",
            "description": "The full path to the folder.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version-preview.2"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Folders"
        ],
        "x-ms-docs-override-version": "7.1-preview.2",
        "x-ms-vss-resource": "folders",
        "x-ms-vss-method": "UpdateFolder",
        "x-ms-preview": true,
        "description": "Updates an existing folder at given  existing path",
        "operationId": "Folders_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The new version of the folder.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "path",
            "description": "The full path to the folder.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version-preview.2"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/folders/{path}": {
      "get": {
        "tags": [
          "Folders"
        ],
        "x-ms-docs-override-version": "7.1-preview.2",
        "x-ms-vss-resource": "folders",
        "x-ms-vss-method": "GetFolders",
        "x-ms-preview": true,
        "description": "Gets a list of build definition folders.",
        "operationId": "Folders_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "path",
            "description": "The path to start with.",
            "required": true,
            "x-ms-required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "queryOrder",
            "description": "The order in which folders should be returned.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "folderAscending",
              "folderDescending"
            ],
            "x-ms-enum": {
              "name": "FolderQueryOrder",
              "values": [
                {
                  "value": "none",
                  "description": "No order"
                },
                {
                  "value": "folderAscending",
                  "description": "Order by folder name and path ascending."
                },
                {
                  "value": "folderDescending",
                  "description": "Order by folder name and path descending."
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/api-Version-preview.2"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Folder"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/generalsettings": {
      "get": {
        "tags": [
          "General Settings"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "generalSettings",
        "x-ms-vss-method": "GetBuildGeneralSettings",
        "description": "Gets pipeline general settings.",
        "operationId": "General Settings_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PipelineGeneralSettings"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.project"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "General Settings"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "generalSettings",
        "x-ms-vss-method": "UpdateBuildGeneralSettings",
        "description": "Updates pipeline general settings.",
        "operationId": "General Settings_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PipelineGeneralSettings"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PipelineGeneralSettings"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.project_write"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/latest/{definition}": {
      "get": {
        "tags": [
          "Latest"
        ],
        "x-ms-docs-override-version": "7.1-preview.1",
        "x-ms-vss-resource": "latest",
        "x-ms-vss-method": "GetLatestBuild",
        "x-ms-preview": true,
        "description": "Gets the latest build for a definition, optionally scoped to a specific branch.",
        "operationId": "Latest_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "definition",
            "description": "definition name with optional leading folder path, or the definition id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "branchName",
            "description": "optional parameter that indicates the specific branch to use. If not specified, the default branch is used.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Build"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/metrics/{metricAggregationType}": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "x-ms-docs-override-version": "7.1-preview.1",
        "x-ms-vss-resource": "metrics",
        "x-ms-vss-method": "GetProjectMetrics",
        "x-ms-preview": true,
        "description": "Gets build metrics for a project.",
        "operationId": "Metrics_Get Project Metrics",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "metricAggregationType",
            "description": "The aggregation type to use (hourly, daily).",
            "required": true,
            "x-ms-required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "minMetricsTime",
            "description": "The date from which to calculate metrics.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BuildMetric"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/options": {
      "get": {
        "tags": [
          "Options"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "options",
        "x-ms-vss-method": "GetBuildOptionDefinitions",
        "description": "Gets all build definition options supported by the system.",
        "operationId": "Options_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BuildOptionDefinition"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/repos/{repoType}/badge": {
      "get": {
        "tags": [
          "Badge"
        ],
        "x-ms-docs-override-version": "7.1-preview.2",
        "x-ms-vss-resource": "buildbadge",
        "x-ms-vss-method": "GetBuildBadge",
        "x-ms-preview": true,
        "description": "Gets a badge that indicates the status of the most recent build for the specified branch.",
        "operationId": "Badge_Get Build Badge Data",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repoType",
            "description": "The repository type.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "repoId",
            "description": "The repository ID.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "branchName",
            "description": "The branch name.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version-preview.2"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/retention": {
      "get": {
        "tags": [
          "Retention"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "retention",
        "x-ms-vss-method": "GetRetentionSettings",
        "description": "Gets the project's retention settings.",
        "operationId": "Retention_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProjectRetentionSetting"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Retention"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "retention",
        "x-ms-vss-method": "UpdateRetentionSettings",
        "description": "Updates the project's retention settings.",
        "operationId": "Retention_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateProjectRetentionSettingModel"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ProjectRetentionSetting"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/retention/leases": {
      "post": {
        "tags": [
          "Leases"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "leases",
        "x-ms-vss-method": "AddRetentionLeases",
        "description": "Adds new leases for pipeline runs.",
        "operationId": "Leases_Add",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NewRetentionLease"
              }
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RetentionLease"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Leases"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "leases",
        "x-ms-vss-method": "DeleteRetentionLeasesById",
        "description": "Removes specific retention leases.",
        "operationId": "Leases_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ids",
            "description": "",
            "required": true,
            "type": "string",
            "format": "array (int32)"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Leases"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "leases",
        "x-ms-vss-method": "GetRetentionLeasesByMinimalRetentionLeases",
        "description": "Returns any leases matching the specified MinimalRetentionLeases",
        "operationId": "Leases_Get Retention Leases By Minimal Retention Leases",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "leasesToFetch",
            "description": "List of JSON-serialized MinimalRetentionLeases separated by '|'",
            "required": true,
            "type": "string",
            "format": "array (MinimalRetentionLease)"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RetentionLease"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/retention/leases/{leaseId}": {
      "get": {
        "tags": [
          "Leases"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "leases",
        "x-ms-vss-method": "GetRetentionLease",
        "description": "Returns the details of the retention lease given a lease id.",
        "operationId": "Leases_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "leaseId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RetentionLease"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Leases"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "leases",
        "x-ms-vss-method": "UpdateRetentionLease",
        "description": "Updates the duration or pipeline protection status of a retention lease.",
        "operationId": "Leases_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The new data for the retention lease.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RetentionLeaseUpdate"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "leaseId",
            "description": "The ID of the lease to update.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RetentionLease"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/settings": {
      "get": {
        "tags": [
          "Settings"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "settings",
        "x-ms-vss-method": "GetBuildSettings",
        "description": "Gets the build settings.",
        "operationId": "Settings_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildSettings"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Settings"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "settings",
        "x-ms-vss-method": "UpdateBuildSettings",
        "description": "Updates the build settings.",
        "operationId": "Settings_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The new settings.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BuildSettings"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildSettings"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/status/{definition}": {
      "get": {
        "tags": [
          "Status"
        ],
        "x-ms-docs-override-version": "7.1-preview.1",
        "x-ms-vss-resource": "status",
        "x-ms-vss-method": "GetStatusBadge",
        "x-ms-preview": true,
        "description": "<p>Gets the build status for a definition, optionally scoped to a specific branch, stage, job, and configuration.</p> <p>If there are more than one, then it is required to pass in a stageName value when specifying a jobName, and the same rule then applies for both if passing a configuration parameter.</p>",
        "operationId": "Status_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "definition",
            "description": "Either the definition name with optional leading folder path, or the definition id.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "branchName",
            "description": "Only consider the most recent build for this branch. If not specified, the default branch is used.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "stageName",
            "description": "Use this stage within the pipeline to render the status.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "jobName",
            "description": "Use this job within a stage of the pipeline to render the status.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "configuration",
            "description": "Use this job configuration to render the status",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "label",
            "description": "Replaces the default text on the left side of the badge.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": []
      }
    },
    "/{collection}/{project}/_apis/build/tags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "tags",
        "x-ms-vss-method": "GetTags",
        "description": "Gets a list of all build tags in the project.",
        "operationId": "Tags_Get Tags",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/tags/{tag}": {
      "delete": {
        "tags": [
          "Tags"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "tags",
        "x-ms-vss-method": "DeleteTag",
        "description": "Removes a tag from builds, definitions, and from the tag store",
        "operationId": "Tags_Delete Tag",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "tag",
            "description": "The tag to remove.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/workitems": {
      "get": {
        "tags": [
          "Builds"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "workitems",
        "x-ms-vss-method": "GetWorkItemsBetweenBuilds",
        "description": "Gets all the work items between two builds.",
        "operationId": "Builds_Get Work Items Between Builds",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "fromBuildId",
            "description": "The ID of the first build.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "toBuildId",
            "description": "The ID of the last build.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The maximum number of work items to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResourceRef"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.work",
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/sourceproviders": {
      "get": {
        "tags": [
          "Source Providers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "sourceProviders",
        "x-ms-vss-method": "ListSourceProviders",
        "description": "Get a list of source providers and their capabilities.",
        "operationId": "Source Providers_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SourceProviderAttributes"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/sourceProviders/{providerName}/branches": {
      "get": {
        "tags": [
          "Source Providers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "branches",
        "x-ms-vss-method": "ListBranches",
        "description": "Gets a list of branches for the given source code repository.",
        "operationId": "Source Providers_List Branches",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "providerName",
            "description": "The name of the source provider.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "serviceEndpointId",
            "description": "If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "repository",
            "description": "The vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "branchName",
            "description": "If supplied, the name of the branch to check for specifically.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/sourceProviders/{providerName}/filecontents": {
      "get": {
        "tags": [
          "Source Providers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "fileContents",
        "x-ms-vss-method": "GetFileContents",
        "description": "Gets the contents of a file in the given source code repository.",
        "operationId": "Source Providers_Get File Contents",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "providerName",
            "description": "The name of the source provider.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "serviceEndpointId",
            "description": "If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "repository",
            "description": "If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "commitOrBranch",
            "description": "The identifier of the commit or branch from which a file's contents are retrieved.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "path",
            "description": "The path to the file to retrieve, relative to the root of the repository.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "Stream"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/sourceProviders/{providerName}/pathcontents": {
      "get": {
        "tags": [
          "Source Providers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pathContents",
        "x-ms-vss-method": "GetPathContents",
        "description": "Gets the contents of a directory in the given source code repository.",
        "operationId": "Source Providers_Get Path Contents",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "providerName",
            "description": "The name of the source provider.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "serviceEndpointId",
            "description": "If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "repository",
            "description": "If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "commitOrBranch",
            "description": "The identifier of the commit or branch from which a file's contents are retrieved.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "path",
            "description": "The path contents to list, relative to the root of the repository.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SourceRepositoryItem"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/sourceProviders/{providerName}/pullrequests/{pullRequestId}": {
      "get": {
        "tags": [
          "Source Providers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequests",
        "x-ms-vss-method": "GetPullRequest",
        "description": "Gets a pull request object from source provider.",
        "operationId": "Source Providers_Get Pull Request",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "providerName",
            "description": "The name of the source provider.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "Vendor-specific id of the pull request.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "repositoryId",
            "description": "Vendor-specific identifier or the name of the repository that contains the pull request.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "serviceEndpointId",
            "description": "If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PullRequest"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/sourceProviders/{providerName}/repositories": {
      "get": {
        "tags": [
          "Source Providers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "repositories",
        "x-ms-vss-method": "ListRepositories",
        "description": "Gets a list of source code repositories.",
        "operationId": "Source Providers_List Repositories",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "providerName",
            "description": "The name of the source provider.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "serviceEndpointId",
            "description": "If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "repository",
            "description": "If specified, the vendor-specific identifier or the name of a single repository to get.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "resultSet",
            "description": "'top' for the repositories most relevant for the endpoint. If not set, all repositories are returned. Ignored if 'repository' is set.",
            "required": false,
            "type": "string",
            "enum": [
              "all",
              "top"
            ],
            "x-ms-enum": {
              "name": "ResultSet",
              "values": [
                {
                  "value": "all",
                  "description": "Include all repositories"
                },
                {
                  "value": "top",
                  "description": "Include most relevant repositories for user"
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "pageResults",
            "description": "If set to true, this will limit the set of results and will return a continuation token to continue the query.",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "When paging results, this is a continuation token, returned by a previous call to this method, that can be used to return the next set of repositories.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SourceRepositories"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/sourceProviders/{providerName}/webhooks": {
      "post": {
        "tags": [
          "Source Providers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "webhooks",
        "x-ms-vss-method": "RestoreWebhooks",
        "description": "Recreates the webhooks for the specified triggers in the given source code repository.",
        "operationId": "Source Providers_Restore Webhooks",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The types of triggers to restore webhooks for.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "DefinitionTriggerType"
              }
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "providerName",
            "description": "The name of the source provider.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "serviceEndpointId",
            "description": "If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "repository",
            "description": "If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build_execute"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Source Providers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "webhooks",
        "x-ms-vss-method": "ListWebhooks",
        "description": "Gets a list of webhooks installed in the given source code repository.",
        "operationId": "Source Providers_List Webhooks",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "providerName",
            "description": "The name of the source provider.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "serviceEndpointId",
            "description": "If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "repository",
            "description": "If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RepositoryWebhook"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    }
  },
  "x-ms-paths": {
    "/{collection}/{project}/_apis/build/builds/{buildId}/artifacts?artifactName={artifactName}": {
      "get": {
        "tags": [
          "Artifacts"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "artifacts",
        "x-ms-vss-method": "GetArtifact",
        "description": "Gets a specific artifact for a build.",
        "operationId": "Artifacts_Get Artifact",
        "produces": [
          "application/zip",
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "buildId",
            "description": "The ID of the build.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "artifactName",
            "description": "The name of the artifact.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BuildArtifact"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/builds/{buildId}/artifacts?artifactName={artifactName}&fileId={fileId}&fileName={fileName}": {
      "get": {
        "tags": [
          "Artifacts"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "artifacts",
        "x-ms-vss-method": "GetFile",
        "description": "Gets a file from the build.",
        "operationId": "Artifacts_Get File",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "buildId",
            "description": "The ID of the build.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "artifactName",
            "description": "The name of the artifact.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "fileId",
            "description": "The primary key for the file.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "fileName",
            "description": "The name that the file will be set to.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "Stream"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/retention/leases?userOwnerId={userOwnerId}": {
      "get": {
        "tags": [
          "Leases"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "leases",
        "x-ms-vss-method": "GetRetentionLeasesByUserId",
        "description": "Returns any leases owned by the specified user, optionally scoped to a single pipeline definition and run.",
        "operationId": "Leases_Get Retention Leases By User Id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "userOwnerId",
            "description": "The user id to search for.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "definitionId",
            "description": "An optional parameter to limit the search to a specific pipeline definition.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "runId",
            "description": "An optional parameter to limit the search to a single pipeline run. Requires definitionId.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RetentionLease"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    },
    "/{collection}/{project}/_apis/build/retention/leases?": {
      "get": {
        "tags": [
          "Leases"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "leases",
        "x-ms-vss-method": "GetRetentionLeasesByOwnerId",
        "description": "Returns any leases owned by the specified entity, optionally scoped to a single pipeline definition and run.",
        "operationId": "Leases_Get Retention Leases By Owner Id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "collection",
            "description": "The name of the Azure DevOps collection.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "ownerId",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "definitionId",
            "description": "An optional parameter to limit the search to a specific pipeline definition.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "runId",
            "description": "An optional parameter to limit the search to a single pipeline run. Requires definitionId.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RetentionLease"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.build"
            ]
          }
        ]
      }
    }
  },
  "definitions": {
    "AgentPoolQueue": {
      "description": "Represents a queue for running builds.",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "id": {
          "description": "The ID of the queue.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "The name of the queue.",
          "type": "string"
        },
        "pool": {
          "description": "The pool used by this queue.",
          "$ref": "#/definitions/TaskAgentPoolReference"
        },
        "url": {
          "description": "The full http link to the resource.",
          "type": "string"
        }
      }
    },
    "AgentPoolQueueReference": {
      "description": "Represents a reference to an agent queue.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ResourceReference"
        }
      ],
      "properties": {
        "id": {
          "description": "The ID of the queue.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AgentPoolQueueTarget": {
      "description": "Describes how a phase should run against an agent queue.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/PhaseTarget"
        }
      ],
      "properties": {
        "agentSpecification": {
          "description": "Agent specification of the target.",
          "$ref": "#/definitions/AgentSpecification"
        },
        "allowScriptsAuthAccessOption": {
          "description": "Enables scripts and other processes launched while executing phase to access the OAuth token",
          "type": "boolean"
        },
        "demands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Demand"
          }
        },
        "executionOptions": {
          "description": "The execution options.",
          "$ref": "#/definitions/AgentTargetExecutionOptions"
        },
        "queue": {
          "description": "The queue.",
          "$ref": "#/definitions/AgentPoolQueue"
        }
      }
    },
    "AgentSpecification": {
      "description": "Specification of the agent defined by the pool provider.",
      "type": "object",
      "properties": {
        "identifier": {
          "description": "Agent specification unique identifier.",
          "type": "string"
        }
      }
    },
    "AgentTargetExecutionOptions": {
      "description": "Additional options for running phases against an agent queue.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Indicates the type of execution options.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AggregatedResultsAnalysis": {
      "description": "",
      "type": "object",
      "properties": {
        "duration": {
          "type": "string",
          "format": "TimeSpan"
        },
        "notReportedResultsByOutcome": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AggregatedResultsByOutcome"
          }
        },
        "previousContext": {
          "$ref": "#/definitions/TestResultsContext"
        },
        "resultsByOutcome": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AggregatedResultsByOutcome"
          }
        },
        "resultsDifference": {
          "$ref": "#/definitions/AggregatedResultsDifference"
        },
        "runSummaryByOutcome": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AggregatedRunsByOutcome"
          }
        },
        "runSummaryByState": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AggregatedRunsByState"
          }
        },
        "totalTests": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AggregatedResultsByOutcome": {
      "description": "",
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "duration": {
          "type": "string",
          "format": "TimeSpan"
        },
        "groupByField": {
          "type": "string"
        },
        "groupByValue": {
          "type": "object"
        },
        "outcome": {
          "enum": [
            "unspecified",
            "none",
            "passed",
            "failed",
            "inconclusive",
            "timeout",
            "aborted",
            "blocked",
            "notExecuted",
            "warning",
            "error",
            "notApplicable",
            "paused",
            "inProgress",
            "notImpacted"
          ],
          "x-ms-enum": {
            "name": "TestOutcome",
            "values": [
              {
                "value": "unspecified",
                "description": "Only used during an update to preserve the existing value."
              },
              {
                "value": "none",
                "description": "Test has not been completed, or the test type does not report pass/failure."
              },
              {
                "value": "passed",
                "description": "Test was executed w/o any issues."
              },
              {
                "value": "failed",
                "description": "Test was executed, but there were issues. Issues may involve exceptions or failed assertions."
              },
              {
                "value": "inconclusive",
                "description": "Test has completed, but we can't say if it passed or failed. May be used for aborted tests..."
              },
              {
                "value": "timeout",
                "description": "The test timed out"
              },
              {
                "value": "aborted",
                "description": "Test was aborted. This was not caused by a user gesture, but rather by a framework decision."
              },
              {
                "value": "blocked",
                "description": "Test had it chance for been executed but was not, as ITestElement.IsRunnable == false."
              },
              {
                "value": "notExecuted",
                "description": "Test was not executed. This was caused by a user gesture - e.g. user hit stop button."
              },
              {
                "value": "warning",
                "description": "To be used by Run level results. This is not a failure."
              },
              {
                "value": "error",
                "description": "There was a system error while we were trying to execute a test."
              },
              {
                "value": "notApplicable",
                "description": "Test is Not Applicable for execution."
              },
              {
                "value": "paused",
                "description": "Test is paused."
              },
              {
                "value": "inProgress",
                "description": "Test is currently executing. Added this for TCM charts"
              },
              {
                "value": "notImpacted",
                "description": "Test is not impacted. Added fot TIA."
              }
            ]
          }
        },
        "rerunResultCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AggregatedResultsDifference": {
      "description": "",
      "type": "object",
      "properties": {
        "increaseInDuration": {
          "type": "string",
          "format": "TimeSpan"
        },
        "increaseInFailures": {
          "type": "integer",
          "format": "int32"
        },
        "increaseInNonImpactedTests": {
          "type": "integer",
          "format": "int32"
        },
        "increaseInOtherTests": {
          "type": "integer",
          "format": "int32"
        },
        "increaseInPassedTests": {
          "type": "integer",
          "format": "int32"
        },
        "increaseInTotalTests": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AggregatedRunsByOutcome": {
      "description": "",
      "type": "object",
      "properties": {
        "outcome": {
          "enum": [
            "passed",
            "failed",
            "notImpacted",
            "others"
          ],
          "x-ms-enum": {
            "name": "TestRunOutcome",
            "values": [
              {
                "value": "passed",
                "description": "Run with zero failed tests and has at least one impacted test"
              },
              {
                "value": "failed",
                "description": "Run with at-least one failed test."
              },
              {
                "value": "notImpacted",
                "description": "Run with no impacted tests."
              },
              {
                "value": "others",
                "description": "Runs with All tests in other category."
              }
            ]
          }
        },
        "runsCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AggregatedRunsByState": {
      "description": "",
      "type": "object",
      "properties": {
        "resultsByOutcome": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AggregatedResultsByOutcome"
          }
        },
        "runsCount": {
          "type": "integer",
          "format": "int32"
        },
        "state": {
          "enum": [
            "unspecified",
            "notStarted",
            "inProgress",
            "completed",
            "aborted",
            "waiting",
            "needsInvestigation"
          ],
          "x-ms-enum": {
            "name": "TestRunState",
            "values": [
              {
                "value": "unspecified",
                "description": "Only used during an update to preserve the existing value."
              },
              {
                "value": "notStarted",
                "description": "The run is still being created.  No tests have started yet."
              },
              {
                "value": "inProgress",
                "description": "Tests are running."
              },
              {
                "value": "completed",
                "description": "All tests have completed or been skipped."
              },
              {
                "value": "aborted",
                "description": "Run is stopped and remaining tests have been aborted"
              },
              {
                "value": "waiting",
                "description": "Run is currently initializing This is a legacy state and should not be used any more"
              },
              {
                "value": "needsInvestigation",
                "description": "Run requires investigation because of a test point failure This is a legacy state and should not be used any more"
              }
            ]
          }
        }
      }
    },
    "ArtifactResource": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "data": {
          "description": "Type-specific data about the artifact.",
          "type": "string"
        },
        "downloadUrl": {
          "description": "A link to download the resource.",
          "type": "string"
        },
        "properties": {
          "description": "Type-specific properties of the artifact.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "description": "The type of the resource: File container, version control folder, UNC path, etc.",
          "type": "string"
        },
        "url": {
          "description": "The full http link to the resource.",
          "type": "string"
        }
      }
    },
    "AssociatedWorkItem": {
      "description": "",
      "type": "object",
      "properties": {
        "assignedTo": {
          "type": "string"
        },
        "id": {
          "description": "Id of associated the work item.",
          "type": "integer",
          "format": "int32"
        },
        "state": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "url": {
          "description": "REST Url of the work item.",
          "type": "string"
        },
        "webUrl": {
          "type": "string"
        },
        "workItemType": {
          "type": "string"
        }
      }
    },
    "Attachment": {
      "description": "Represents an attachment to a build.",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "name": {
          "description": "The name of the attachment.",
          "type": "string"
        }
      }
    },
    "AuthorizationHeader": {
      "description": "",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "Build": {
      "description": "Data representation of a build.",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "agentSpecification": {
          "description": "The agent specification for the build.",
          "$ref": "#/definitions/AgentSpecification"
        },
        "appendCommitMessageToRunName": {
          "description": "Append Commit Message To BuildNumber in UI.",
          "type": "boolean"
        },
        "buildNumber": {
          "description": "The build number/name of the build.",
          "type": "string"
        },
        "buildNumberRevision": {
          "description": "The build number revision.",
          "type": "integer",
          "format": "int32"
        },
        "controller": {
          "description": "The build controller. This is only set if the definition type is Xaml.",
          "$ref": "#/definitions/BuildController"
        },
        "definition": {
          "description": "The definition associated with the build.",
          "$ref": "#/definitions/DefinitionReference"
        },
        "deleted": {
          "description": "Indicates whether the build has been deleted.",
          "type": "boolean"
        },
        "deletedBy": {
          "description": "The identity of the process or person that deleted the build.",
          "$ref": "#/definitions/IdentityRef"
        },
        "deletedDate": {
          "description": "The date the build was deleted.",
          "type": "string",
          "format": "date-time"
        },
        "deletedReason": {
          "description": "The description of how the build was deleted.",
          "type": "string"
        },
        "demands": {
          "description": "A list of demands that represents the agent capabilities required by this build.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Demand"
          }
        },
        "finishTime": {
          "description": "The time that the build was completed.",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "The ID of the build.",
          "type": "integer",
          "format": "int32"
        },
        "lastChangedBy": {
          "description": "The identity representing the process or person that last changed the build.",
          "$ref": "#/definitions/IdentityRef"
        },
        "lastChangedDate": {
          "description": "The date the build was last changed.",
          "type": "string",
          "format": "date-time"
        },
        "logs": {
          "description": "Information about the build logs.",
          "$ref": "#/definitions/BuildLogReference"
        },
        "orchestrationPlan": {
          "description": "The orchestration plan for the build.",
          "$ref": "#/definitions/TaskOrchestrationPlanReference"
        },
        "parameters": {
          "description": "The parameters for the build.",
          "type": "string"
        },
        "plans": {
          "description": "Orchestration plans associated with the build (build, cleanup)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskOrchestrationPlanReference"
          }
        },
        "priority": {
          "description": "The build's priority.",
          "enum": [
            "low",
            "belowNormal",
            "normal",
            "aboveNormal",
            "high"
          ],
          "x-ms-enum": {
            "name": "QueuePriority",
            "values": [
              {
                "value": "low",
                "description": "Low priority."
              },
              {
                "value": "belowNormal",
                "description": "Below normal priority."
              },
              {
                "value": "normal",
                "description": "Normal priority."
              },
              {
                "value": "aboveNormal",
                "description": "Above normal priority."
              },
              {
                "value": "high",
                "description": "High priority."
              }
            ]
          }
        },
        "project": {
          "description": "The team project.",
          "$ref": "#/definitions/TeamProjectReference"
        },
        "properties": {
          "$ref": "#/definitions/PropertiesCollection"
        },
        "quality": {
          "description": "The quality of the xaml build (good, bad, etc.)",
          "type": "string"
        },
        "queue": {
          "description": "The queue. This is only set if the definition type is Build. WARNING: this field is deprecated and does not corresponds to the jobs queues.",
          "$ref": "#/definitions/AgentPoolQueue"
        },
        "queueOptions": {
          "description": "Additional options for queueing the build.",
          "enum": [
            "none",
            "doNotRun"
          ],
          "x-ms-enum": {
            "name": "QueueOptions",
            "values": [
              {
                "value": "none",
                "description": "No queue options"
              },
              {
                "value": "doNotRun",
                "description": "Create a plan Id for the build, do not run it"
              }
            ]
          }
        },
        "queuePosition": {
          "description": "The current position of the build in the queue.",
          "type": "integer",
          "format": "int32"
        },
        "queueTime": {
          "description": "The time that the build was queued.",
          "type": "string",
          "format": "date-time"
        },
        "reason": {
          "description": "The reason that the build was created.",
          "enum": [
            "none",
            "manual",
            "individualCI",
            "batchedCI",
            "schedule",
            "scheduleForced",
            "userCreated",
            "validateShelveset",
            "checkInShelveset",
            "pullRequest",
            "buildCompletion",
            "resourceTrigger",
            "triggered",
            "all"
          ],
          "x-ms-enum": {
            "name": "BuildReason",
            "values": [
              {
                "value": "none",
                "description": "No reason. This value should not be used."
              },
              {
                "value": "manual",
                "description": "The build was started manually."
              },
              {
                "value": "individualCI",
                "description": "The build was started for the trigger TriggerType.ContinuousIntegration."
              },
              {
                "value": "batchedCI",
                "description": "The build was started for the trigger TriggerType.BatchedContinuousIntegration."
              },
              {
                "value": "schedule",
                "description": "The build was started for the trigger TriggerType.Schedule."
              },
              {
                "value": "scheduleForced",
                "description": "The build was started for the trigger TriggerType.ScheduleForced."
              },
              {
                "value": "userCreated",
                "description": "The build was created by a user."
              },
              {
                "value": "validateShelveset",
                "description": "The build was started manually for private validation."
              },
              {
                "value": "checkInShelveset",
                "description": "The build was started for the trigger ContinuousIntegrationType.Gated."
              },
              {
                "value": "pullRequest",
                "description": "The build was started by a pull request. Added in resource version 3."
              },
              {
                "value": "buildCompletion",
                "description": "The build was started when another build completed."
              },
              {
                "value": "resourceTrigger",
                "description": "The build was started when resources in pipeline triggered it"
              },
              {
                "value": "triggered",
                "description": "The build was triggered for retention policy purposes."
              },
              {
                "value": "all",
                "description": "All reasons."
              }
            ]
          }
        },
        "repository": {
          "description": "The repository.",
          "$ref": "#/definitions/BuildRepository"
        },
        "requestedBy": {
          "description": "The identity that queued the build.",
          "$ref": "#/definitions/IdentityRef"
        },
        "requestedFor": {
          "description": "The identity on whose behalf the build was queued.",
          "$ref": "#/definitions/IdentityRef"
        },
        "result": {
          "description": "The build result.",
          "enum": [
            "none",
            "succeeded",
            "partiallySucceeded",
            "failed",
            "canceled"
          ],
          "x-ms-enum": {
            "name": "BuildResult",
            "values": [
              {
                "value": "none",
                "description": "No result"
              },
              {
                "value": "succeeded",
                "description": "The build completed successfully."
              },
              {
                "value": "partiallySucceeded",
                "description": "The build completed compilation successfully but had other errors."
              },
              {
                "value": "failed",
                "description": "The build completed unsuccessfully."
              },
              {
                "value": "canceled",
                "description": "The build was canceled before starting."
              }
            ]
          }
        },
        "retainedByRelease": {
          "description": "Indicates whether the build is retained by a release.",
          "type": "boolean"
        },
        "sourceBranch": {
          "description": "The source branch.",
          "type": "string"
        },
        "sourceVersion": {
          "description": "The source version.",
          "type": "string"
        },
        "startTime": {
          "description": "The time that the build was started.",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "The status of the build.",
          "enum": [
            "none",
            "inProgress",
            "completed",
            "cancelling",
            "postponed",
            "notStarted",
            "all"
          ],
          "x-ms-enum": {
            "name": "BuildStatus",
            "values": [
              {
                "value": "none",
                "description": "No status."
              },
              {
                "value": "inProgress",
                "description": "The build is currently in progress."
              },
              {
                "value": "completed",
                "description": "The build has completed."
              },
              {
                "value": "cancelling",
                "description": "The build is cancelling"
              },
              {
                "value": "postponed",
                "description": "The build is inactive in the queue."
              },
              {
                "value": "notStarted",
                "description": "The build has not yet started."
              },
              {
                "value": "all",
                "description": "All status."
              }
            ]
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "templateParameters": {
          "description": "Parameters to template expression evaluation",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "triggeredByBuild": {
          "description": "The build that triggered this build via a Build completion trigger.",
          "$ref": "#/definitions/Build"
        },
        "triggerInfo": {
          "description": "Sourceprovider-specific information about what triggered the build",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "uri": {
          "description": "The URI of the build.",
          "type": "string"
        },
        "url": {
          "description": "The REST URL of the build.",
          "type": "string"
        },
        "validationResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildRequestValidationResult"
          }
        }
      }
    },
    "BuildAgent": {
      "description": "",
      "type": "object",
      "properties": {
        "buildDirectory": {
          "type": "string"
        },
        "controller": {
          "$ref": "#/definitions/XamlBuildControllerReference"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "messageQueueUrl": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "reservedForBuild": {
          "type": "string"
        },
        "server": {
          "$ref": "#/definitions/XamlBuildServerReference"
        },
        "status": {
          "enum": [
            "unavailable",
            "available",
            "offline"
          ],
          "x-ms-enum": {
            "name": "AgentStatus",
            "values": [
              {
                "value": "unavailable",
                "description": "Indicates that the build agent cannot be contacted."
              },
              {
                "value": "available",
                "description": "Indicates that the build agent is currently available."
              },
              {
                "value": "offline",
                "description": "Indicates that the build agent has taken itself offline."
              }
            ]
          }
        },
        "statusMessage": {
          "type": "string"
        },
        "updatedDate": {
          "type": "string",
          "format": "date-time"
        },
        "uri": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "BuildAgentReference": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of the resource",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name of the linked resource (definition name, controller name, etc.)",
          "type": "string"
        },
        "url": {
          "description": "Full http link to the resource",
          "type": "string"
        }
      }
    },
    "BuildArtifact": {
      "description": "Represents an artifact produced by a build.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The artifact ID.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "The name of the artifact.",
          "type": "string"
        },
        "resource": {
          "description": "The actual resource.",
          "$ref": "#/definitions/ArtifactResource"
        },
        "source": {
          "description": "The artifact source, which will be the ID of the job that produced this artifact. If an artifact is associated with multiple sources, this points to the first source.",
          "type": "string"
        }
      }
    },
    "BuildBadge": {
      "description": "Represents a build badge.",
      "type": "object",
      "properties": {
        "buildId": {
          "description": "The ID of the build represented by this badge.",
          "type": "integer",
          "format": "int32"
        },
        "imageUrl": {
          "description": "A link to the SVG resource.",
          "type": "string"
        }
      }
    },
    "BuildCompletedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BuildUpdatedEvent"
        }
      ],
      "properties": {
        "changes": {
          "description": "Changes associated with a build used for build notifications",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "pullRequest": {
          "description": "Pull request for the build used for build notifications",
          "$ref": "#/definitions/PullRequest"
        },
        "testResults": {
          "description": "Test results associated with a build used for build notifications",
          "$ref": "#/definitions/AggregatedResultsAnalysis"
        },
        "timelineRecords": {
          "description": "Timeline records associated with a build used for build notifications",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimelineRecord"
          }
        },
        "workItems": {
          "description": "Work items associated with a build used for build notifications",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssociatedWorkItem"
          }
        }
      }
    },
    "BuildCompletionTrigger": {
      "description": "Represents a build completion trigger.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BuildTrigger"
        }
      ],
      "properties": {
        "branchFilters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "definition": {
          "description": "A reference to the definition that should trigger builds for this definition.",
          "$ref": "#/definitions/DefinitionReference"
        },
        "requiresSuccessfulBuild": {
          "type": "boolean"
        }
      }
    },
    "BuildController": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/XamlBuildControllerReference"
        }
      ],
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "createdDate": {
          "description": "The date the controller was created.",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The description of the controller.",
          "type": "string"
        },
        "enabled": {
          "description": "Indicates whether the controller is enabled.",
          "type": "boolean"
        },
        "status": {
          "description": "The status of the controller.",
          "enum": [
            "unavailable",
            "available",
            "offline"
          ],
          "x-ms-enum": {
            "name": "ControllerStatus",
            "values": [
              {
                "value": "unavailable",
                "description": "Indicates that the build controller cannot be contacted."
              },
              {
                "value": "available",
                "description": "Indicates that the build controller is currently available."
              },
              {
                "value": "offline",
                "description": "Indicates that the build controller has taken itself offline."
              }
            ]
          }
        },
        "updatedDate": {
          "description": "The date the controller was last updated.",
          "type": "string",
          "format": "date-time"
        },
        "uri": {
          "description": "The controller's URI.",
          "type": "string"
        }
      }
    },
    "BuildDefinition": {
      "description": "Represents a build definition.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BuildDefinitionReference"
        }
      ],
      "properties": {
        "badgeEnabled": {
          "description": "Indicates whether badges are enabled for this definition.",
          "type": "boolean"
        },
        "buildNumberFormat": {
          "description": "The build number format.",
          "type": "string"
        },
        "comment": {
          "description": "A save-time comment for the definition.",
          "type": "string"
        },
        "demands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Demand"
          }
        },
        "description": {
          "description": "The description.",
          "type": "string"
        },
        "dropLocation": {
          "description": "The drop location for the definition.",
          "type": "string"
        },
        "jobAuthorizationScope": {
          "description": "The job authorization scope for builds queued against this definition.",
          "enum": [
            "projectCollection",
            "project"
          ],
          "x-ms-enum": {
            "name": "BuildAuthorizationScope",
            "values": [
              {
                "value": "projectCollection",
                "description": "The identity used should have build service account permissions scoped to the project collection. This is useful when resources for a single build are spread across multiple projects."
              },
              {
                "value": "project",
                "description": "The identity used should have build service account permissions scoped to the project in which the build definition resides. This is useful for isolation of build jobs to a particular team project to avoid any unintentional escalation of privilege attacks during a build."
              }
            ]
          }
        },
        "jobCancelTimeoutInMinutes": {
          "description": "The job cancel timeout (in minutes) for builds cancelled by user for this definition.",
          "type": "integer",
          "format": "int32"
        },
        "jobTimeoutInMinutes": {
          "description": "The job execution timeout (in minutes) for builds queued against this definition.",
          "type": "integer",
          "format": "int32"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildOption"
          }
        },
        "process": {
          "description": "The build process.",
          "$ref": "#/definitions/BuildProcess"
        },
        "processParameters": {
          "description": "The process parameters for this definition.",
          "$ref": "#/definitions/ProcessParameters"
        },
        "properties": {
          "$ref": "#/definitions/PropertiesCollection"
        },
        "repository": {
          "description": "The repository.",
          "$ref": "#/definitions/BuildRepository"
        },
        "retentionRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionPolicy"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "triggers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildTrigger"
          }
        },
        "variableGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariableGroup"
          }
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/BuildDefinitionVariable"
          }
        }
      }
    },
    "BuildDefinition3_2": {
      "description": "For back-compat with extensions that use the old Steps format instead of Process and Phases",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BuildDefinitionReference3_2"
        }
      ],
      "properties": {
        "badgeEnabled": {
          "description": "Indicates whether badges are enabled for this definition",
          "type": "boolean"
        },
        "build": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildDefinitionStep"
          }
        },
        "buildNumberFormat": {
          "description": "The build number format",
          "type": "string"
        },
        "comment": {
          "description": "The comment entered when saving the definition",
          "type": "string"
        },
        "demands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Demand"
          }
        },
        "description": {
          "description": "The description",
          "type": "string"
        },
        "dropLocation": {
          "description": "The drop location for the definition",
          "type": "string"
        },
        "jobAuthorizationScope": {
          "description": "The job authorization scope for builds which are queued against this definition",
          "enum": [
            "projectCollection",
            "project"
          ],
          "x-ms-enum": {
            "name": "BuildAuthorizationScope",
            "values": [
              {
                "value": "projectCollection",
                "description": "The identity used should have build service account permissions scoped to the project collection. This is useful when resources for a single build are spread across multiple projects."
              },
              {
                "value": "project",
                "description": "The identity used should have build service account permissions scoped to the project in which the build definition resides. This is useful for isolation of build jobs to a particular team project to avoid any unintentional escalation of privilege attacks during a build."
              }
            ]
          }
        },
        "jobCancelTimeoutInMinutes": {
          "description": "The job cancel timeout in minutes for builds which are cancelled by user for this definition",
          "type": "integer",
          "format": "int32"
        },
        "jobTimeoutInMinutes": {
          "description": "The job execution timeout in minutes for builds which are queued against this definition",
          "type": "integer",
          "format": "int32"
        },
        "latestBuild": {
          "$ref": "#/definitions/Build"
        },
        "latestCompletedBuild": {
          "$ref": "#/definitions/Build"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildOption"
          }
        },
        "processParameters": {
          "description": "Process Parameters",
          "$ref": "#/definitions/ProcessParameters"
        },
        "properties": {
          "$ref": "#/definitions/PropertiesCollection"
        },
        "repository": {
          "description": "The repository",
          "$ref": "#/definitions/BuildRepository"
        },
        "retentionRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RetentionPolicy"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "triggers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildTrigger"
          }
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/BuildDefinitionVariable"
          }
        }
      }
    },
    "BuildDefinitionReference": {
      "description": "Represents a reference to a build definition.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DefinitionReference"
        }
      ],
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "authoredBy": {
          "description": "The author of the definition.",
          "$ref": "#/definitions/IdentityRef"
        },
        "draftOf": {
          "description": "A reference to the definition that this definition is a draft of, if this is a draft definition.",
          "$ref": "#/definitions/DefinitionReference"
        },
        "drafts": {
          "description": "The list of drafts associated with this definition, if this is not a draft definition.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DefinitionReference"
          }
        },
        "latestBuild": {
          "$ref": "#/definitions/Build"
        },
        "latestCompletedBuild": {
          "$ref": "#/definitions/Build"
        },
        "metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildMetric"
          }
        },
        "quality": {
          "description": "The quality of the definition document (draft, etc.)",
          "enum": [
            "definition",
            "draft"
          ],
          "x-ms-enum": {
            "name": "DefinitionQuality",
            "values": [
              {
                "value": "definition",
                "description": ""
              },
              {
                "value": "draft",
                "description": ""
              }
            ]
          }
        },
        "queue": {
          "description": "The default queue for builds run against this definition.",
          "$ref": "#/definitions/AgentPoolQueue"
        }
      }
    },
    "BuildDefinitionReference3_2": {
      "description": "For back-compat with extensions that use the old Steps format instead of Process and Phases",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DefinitionReference"
        }
      ],
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "authoredBy": {
          "description": "The author of the definition.",
          "$ref": "#/definitions/IdentityRef"
        },
        "draftOf": {
          "description": "A reference to the definition that this definition is a draft of, if this is a draft definition.",
          "$ref": "#/definitions/DefinitionReference"
        },
        "drafts": {
          "description": "The list of drafts associated with this definition, if this is not a draft definition.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DefinitionReference"
          }
        },
        "metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildMetric"
          }
        },
        "quality": {
          "description": "The quality of the definition document (draft, etc.)",
          "enum": [
            "definition",
            "draft"
          ],
          "x-ms-enum": {
            "name": "DefinitionQuality",
            "values": [
              {
                "value": "definition",
                "description": ""
              },
              {
                "value": "draft",
                "description": ""
              }
            ]
          }
        },
        "queue": {
          "description": "The default queue for builds run against this definition.",
          "$ref": "#/definitions/AgentPoolQueue"
        }
      }
    },
    "BuildDefinitionRevision": {
      "description": "Represents a revision of a build definition.",
      "type": "object",
      "properties": {
        "changedBy": {
          "description": "The identity of the person or process that changed the definition.",
          "$ref": "#/definitions/IdentityRef"
        },
        "changedDate": {
          "description": "The date and time that the definition was changed.",
          "type": "string",
          "format": "date-time"
        },
        "changeType": {
          "description": "The change type (add, edit, delete).",
          "enum": [
            "add",
            "update",
            "delete"
          ],
          "x-ms-enum": {
            "name": "AuditAction",
            "values": [
              {
                "value": "add",
                "description": ""
              },
              {
                "value": "update",
                "description": ""
              },
              {
                "value": "delete",
                "description": ""
              }
            ]
          }
        },
        "comment": {
          "description": "The comment associated with the change.",
          "type": "string"
        },
        "definitionUrl": {
          "description": "A link to the definition at this revision.",
          "type": "string"
        },
        "name": {
          "description": "The name of the definition.",
          "type": "string"
        },
        "revision": {
          "description": "The revision number.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "BuildDefinitionSourceProvider": {
      "description": "",
      "type": "object",
      "properties": {
        "definitionUri": {
          "description": "Uri of the associated definition",
          "type": "string"
        },
        "fields": {
          "description": "fields associated with this build definition",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "id": {
          "description": "Id of this source provider",
          "type": "integer",
          "format": "int32"
        },
        "lastModified": {
          "description": "The lst time this source provider was modified",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "Name of the source provider",
          "type": "string"
        },
        "supportedTriggerTypes": {
          "description": "Which trigger types are supported by this definition source provider",
          "enum": [
            "none",
            "continuousIntegration",
            "batchedContinuousIntegration",
            "schedule",
            "gatedCheckIn",
            "batchedGatedCheckIn",
            "pullRequest",
            "buildCompletion",
            "all"
          ],
          "x-ms-enum": {
            "name": "DefinitionTriggerType",
            "values": [
              {
                "value": "none",
                "description": "Manual builds only."
              },
              {
                "value": "continuousIntegration",
                "description": "A build should be started for each changeset."
              },
              {
                "value": "batchedContinuousIntegration",
                "description": "A build should be started for multiple changesets at a time at a specified interval."
              },
              {
                "value": "schedule",
                "description": "A build should be started on a specified schedule whether or not changesets exist."
              },
              {
                "value": "gatedCheckIn",
                "description": "A validation build should be started for each check-in."
              },
              {
                "value": "batchedGatedCheckIn",
                "description": "A validation build should be started for each batch of check-ins."
              },
              {
                "value": "pullRequest",
                "description": "A build should be triggered when a GitHub pull request is created or updated. Added in resource version 3"
              },
              {
                "value": "buildCompletion",
                "description": "A build should be triggered when another build completes."
              },
              {
                "value": "all",
                "description": "All types."
              }
            ]
          }
        }
      }
    },
    "BuildDefinitionStep": {
      "description": "Represents a step in a build phase.",
      "type": "object",
      "properties": {
        "alwaysRun": {
          "description": "Indicates whether this step should run even if a previous step fails.",
          "type": "boolean"
        },
        "condition": {
          "description": "A condition that determines whether this step should run.",
          "type": "string"
        },
        "continueOnError": {
          "description": "Indicates whether the phase should continue even if this step fails.",
          "type": "boolean"
        },
        "displayName": {
          "description": "The display name for this step.",
          "type": "string"
        },
        "enabled": {
          "description": "Indicates whether the step is enabled.",
          "type": "boolean"
        },
        "environment": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "inputs": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "refName": {
          "description": "The reference name for this step.",
          "type": "string"
        },
        "retryCountOnTaskFailure": {
          "description": "Number of retries.",
          "type": "integer",
          "format": "int32"
        },
        "task": {
          "description": "The task associated with this step.",
          "$ref": "#/definitions/TaskDefinitionReference"
        },
        "timeoutInMinutes": {
          "description": "The time, in minutes, that this step is allowed to run.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "BuildDefinitionTemplate": {
      "description": "Represents a template from which new build definitions can be created.",
      "type": "object",
      "properties": {
        "canDelete": {
          "description": "Indicates whether the template can be deleted.",
          "type": "boolean"
        },
        "category": {
          "description": "The template category.",
          "type": "string"
        },
        "defaultHostedQueue": {
          "description": "An optional hosted agent queue for the template to use by default.",
          "type": "string"
        },
        "description": {
          "description": "A description of the template.",
          "type": "string"
        },
        "icons": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "iconTaskId": {
          "description": "The ID of the task whose icon is used when showing this template in the UI.",
          "type": "string",
          "format": "uuid"
        },
        "id": {
          "description": "The ID of the template.",
          "type": "string"
        },
        "name": {
          "description": "The name of the template.",
          "type": "string"
        },
        "template": {
          "description": "The actual template.",
          "$ref": "#/definitions/BuildDefinition"
        }
      }
    },
    "BuildDefinitionTemplate3_2": {
      "description": "For back-compat with extensions that use the old Steps format instead of Process and Phases",
      "type": "object",
      "properties": {
        "canDelete": {
          "type": "boolean"
        },
        "category": {
          "type": "string"
        },
        "defaultHostedQueue": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "icons": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "iconTaskId": {
          "type": "string",
          "format": "uuid"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "template": {
          "$ref": "#/definitions/BuildDefinition3_2"
        }
      }
    },
    "BuildDefinitionVariable": {
      "description": "Represents a variable used by a build definition.",
      "type": "object",
      "properties": {
        "allowOverride": {
          "description": "Indicates whether the value can be set at queue time.",
          "type": "boolean"
        },
        "isSecret": {
          "description": "Indicates whether the variable's value is a secret.",
          "type": "boolean"
        },
        "value": {
          "description": "The value of the variable.",
          "type": "string"
        }
      }
    },
    "BuildDeletedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RealtimeBuildEvent"
        }
      ],
      "properties": {
        "build": {
          "$ref": "#/definitions/Build"
        }
      }
    },
    "BuildDeployment": {
      "description": "",
      "type": "object",
      "properties": {
        "deployment": {
          "$ref": "#/definitions/BuildSummary"
        },
        "sourceBuild": {
          "$ref": "#/definitions/XamlBuildReference"
        }
      }
    },
    "BuildEvent": {
      "description": "",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "identifier": {
          "type": "string"
        }
      }
    },
    "BuildLog": {
      "description": "Represents a build log.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BuildLogReference"
        }
      ],
      "properties": {
        "createdOn": {
          "description": "The date and time the log was created.",
          "type": "string",
          "format": "date-time"
        },
        "lastChangedOn": {
          "description": "The date and time the log was last changed.",
          "type": "string",
          "format": "date-time"
        },
        "lineCount": {
          "description": "The number of lines in the log.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "BuildLogReference": {
      "description": "Represents a reference to a build log.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the log.",
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "description": "The type of the log location.",
          "type": "string"
        },
        "url": {
          "description": "A full link to the log resource.",
          "type": "string"
        }
      }
    },
    "BuildMetric": {
      "description": "Represents metadata about builds in the system.",
      "type": "object",
      "properties": {
        "date": {
          "description": "The date for the scope.",
          "type": "string",
          "format": "date-time"
        },
        "intValue": {
          "description": "The value.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "The name of the metric.",
          "type": "string"
        },
        "scope": {
          "description": "The scope.",
          "type": "string"
        }
      }
    },
    "BuildOption": {
      "description": "Represents the application of an optional behavior to a build definition.",
      "type": "object",
      "properties": {
        "definition": {
          "description": "A reference to the build option.",
          "$ref": "#/definitions/BuildOptionDefinitionReference"
        },
        "enabled": {
          "description": "Indicates whether the behavior is enabled.",
          "type": "boolean"
        },
        "inputs": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "BuildOptionDefinition": {
      "description": "Represents an optional behavior that can be applied to a build definition.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BuildOptionDefinitionReference"
        }
      ],
      "properties": {
        "description": {
          "description": "The description.",
          "type": "string"
        },
        "groups": {
          "description": "The list of input groups defined for the build option.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildOptionGroupDefinition"
          }
        },
        "inputs": {
          "description": "The list of inputs defined for the build option.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildOptionInputDefinition"
          }
        },
        "name": {
          "description": "The name of the build option.",
          "type": "string"
        },
        "ordinal": {
          "description": "A value that indicates the relative order in which the behavior should be applied.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "BuildOptionDefinitionReference": {
      "description": "Represents a reference to a build option definition.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the referenced build option.",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "BuildOptionGroupDefinition": {
      "description": "Represents a group of inputs for a build option.",
      "type": "object",
      "properties": {
        "displayName": {
          "description": "The name of the group to display in the UI.",
          "type": "string"
        },
        "isExpanded": {
          "description": "Indicates whether the group is initially displayed as expanded in the UI.",
          "type": "boolean"
        },
        "name": {
          "description": "The internal name of the group.",
          "type": "string"
        }
      }
    },
    "BuildOptionInputDefinition": {
      "description": "Represents an input for a build option.",
      "type": "object",
      "properties": {
        "defaultValue": {
          "description": "The default value.",
          "type": "string"
        },
        "groupName": {
          "description": "The name of the input group that this input belongs to.",
          "type": "string"
        },
        "help": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "label": {
          "description": "The label for the input.",
          "type": "string"
        },
        "name": {
          "description": "The name of the input.",
          "type": "string"
        },
        "options": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "required": {
          "description": "Indicates whether the input is required to have a value.",
          "type": "boolean"
        },
        "type": {
          "description": "Indicates the type of the input value.",
          "enum": [
            "string",
            "boolean",
            "stringList",
            "radio",
            "pickList",
            "multiLine",
            "branchFilter"
          ],
          "x-ms-enum": {
            "name": "BuildOptionInputType",
            "values": [
              {
                "value": "string",
                "description": ""
              },
              {
                "value": "boolean",
                "description": ""
              },
              {
                "value": "stringList",
                "description": ""
              },
              {
                "value": "radio",
                "description": ""
              },
              {
                "value": "pickList",
                "description": ""
              },
              {
                "value": "multiLine",
                "description": ""
              },
              {
                "value": "branchFilter",
                "description": ""
              }
            ]
          }
        },
        "visibleRule": {
          "description": "The rule that is applied to determine whether the input is visible in the UI.",
          "type": "string"
        }
      }
    },
    "BuildProcess": {
      "description": "Represents a build process.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of the process.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "BuildProcessResources": {
      "description": "Represents resources used by a build process.",
      "type": "object",
      "properties": {
        "endpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceEndpointReference"
          }
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecureFileReference"
          }
        },
        "queues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgentPoolQueueReference"
          }
        },
        "variableGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariableGroupReference"
          }
        }
      }
    },
    "BuildProcessTemplate": {
      "description": "",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "fileExists": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "parameters": {
          "type": "string"
        },
        "serverPath": {
          "type": "string"
        },
        "supportedReasons": {
          "enum": [
            "none",
            "manual",
            "individualCI",
            "batchedCI",
            "schedule",
            "scheduleForced",
            "userCreated",
            "validateShelveset",
            "checkInShelveset",
            "pullRequest",
            "buildCompletion",
            "resourceTrigger",
            "triggered",
            "all"
          ],
          "x-ms-enum": {
            "name": "BuildReason",
            "values": [
              {
                "value": "none",
                "description": "No reason. This value should not be used."
              },
              {
                "value": "manual",
                "description": "The build was started manually."
              },
              {
                "value": "individualCI",
                "description": "The build was started for the trigger TriggerType.ContinuousIntegration."
              },
              {
                "value": "batchedCI",
                "description": "The build was started for the trigger TriggerType.BatchedContinuousIntegration."
              },
              {
                "value": "schedule",
                "description": "The build was started for the trigger TriggerType.Schedule."
              },
              {
                "value": "scheduleForced",
                "description": "The build was started for the trigger TriggerType.ScheduleForced."
              },
              {
                "value": "userCreated",
                "description": "The build was created by a user."
              },
              {
                "value": "validateShelveset",
                "description": "The build was started manually for private validation."
              },
              {
                "value": "checkInShelveset",
                "description": "The build was started for the trigger ContinuousIntegrationType.Gated."
              },
              {
                "value": "pullRequest",
                "description": "The build was started by a pull request. Added in resource version 3."
              },
              {
                "value": "buildCompletion",
                "description": "The build was started when another build completed."
              },
              {
                "value": "resourceTrigger",
                "description": "The build was started when resources in pipeline triggered it"
              },
              {
                "value": "triggered",
                "description": "The build was triggered for retention policy purposes."
              },
              {
                "value": "all",
                "description": "All reasons."
              }
            ]
          }
        },
        "teamProject": {
          "type": "string"
        },
        "templateType": {
          "enum": [
            "custom",
            "default",
            "upgrade"
          ],
          "x-ms-enum": {
            "name": "ProcessTemplateType",
            "values": [
              {
                "value": "custom",
                "description": "Indicates a custom template."
              },
              {
                "value": "default",
                "description": "Indicates a default template."
              },
              {
                "value": "upgrade",
                "description": "Indicates an upgrade template."
              }
            ]
          }
        },
        "url": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "BuildQueuedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BuildUpdatedEvent"
        }
      ],
      "properties": {}
    },
    "BuildReference": {
      "description": "Represents a reference to a build.",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "buildNumber": {
          "description": "The build number.",
          "type": "string"
        },
        "deleted": {
          "description": "Indicates whether the build has been deleted.",
          "type": "boolean"
        },
        "finishTime": {
          "description": "The time that the build was completed.",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "The ID of the build.",
          "type": "integer",
          "format": "int32"
        },
        "queueTime": {
          "description": "The time that the build was queued.",
          "type": "string",
          "format": "date-time"
        },
        "requestedFor": {
          "description": "The identity on whose behalf the build was queued.",
          "$ref": "#/definitions/IdentityRef"
        },
        "result": {
          "description": "The build result.",
          "enum": [
            "none",
            "succeeded",
            "partiallySucceeded",
            "failed",
            "canceled"
          ],
          "x-ms-enum": {
            "name": "BuildResult",
            "values": [
              {
                "value": "none",
                "description": "No result"
              },
              {
                "value": "succeeded",
                "description": "The build completed successfully."
              },
              {
                "value": "partiallySucceeded",
                "description": "The build completed compilation successfully but had other errors."
              },
              {
                "value": "failed",
                "description": "The build completed unsuccessfully."
              },
              {
                "value": "canceled",
                "description": "The build was canceled before starting."
              }
            ]
          }
        },
        "startTime": {
          "description": "The time that the build was started.",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "The build status.",
          "enum": [
            "none",
            "inProgress",
            "completed",
            "cancelling",
            "postponed",
            "notStarted",
            "all"
          ],
          "x-ms-enum": {
            "name": "BuildStatus",
            "values": [
              {
                "value": "none",
                "description": "No status."
              },
              {
                "value": "inProgress",
                "description": "The build is currently in progress."
              },
              {
                "value": "completed",
                "description": "The build has completed."
              },
              {
                "value": "cancelling",
                "description": "The build is cancelling"
              },
              {
                "value": "postponed",
                "description": "The build is inactive in the queue."
              },
              {
                "value": "notStarted",
                "description": "The build has not yet started."
              },
              {
                "value": "all",
                "description": "All status."
              }
            ]
          }
        }
      }
    },
    "BuildReportMetadata": {
      "description": "Represents information about a build report.",
      "type": "object",
      "properties": {
        "buildId": {
          "description": "The Id of the build.",
          "type": "integer",
          "format": "int32"
        },
        "content": {
          "description": "The content of the report.",
          "type": "string"
        },
        "type": {
          "description": "The type of the report.",
          "type": "string"
        }
      }
    },
    "BuildRepository": {
      "description": "Represents a repository used by a build definition.",
      "type": "object",
      "properties": {
        "checkoutSubmodules": {
          "description": "Indicates whether to checkout submodules.",
          "type": "boolean"
        },
        "clean": {
          "description": "Indicates whether to clean the target folder when getting code from the repository.",
          "type": "string"
        },
        "defaultBranch": {
          "description": "The name of the default branch.",
          "type": "string"
        },
        "id": {
          "description": "The ID of the repository.",
          "type": "string"
        },
        "name": {
          "description": "The friendly name of the repository.",
          "type": "string"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "rootFolder": {
          "description": "The root folder.",
          "type": "string"
        },
        "type": {
          "description": "The type of the repository.",
          "type": "string"
        },
        "url": {
          "description": "The URL of the repository.",
          "type": "string"
        }
      }
    },
    "BuildRequestValidationResult": {
      "description": "Represents the result of validating a build request.",
      "type": "object",
      "properties": {
        "message": {
          "description": "The message associated with the result.",
          "type": "string"
        },
        "result": {
          "description": "The result.",
          "enum": [
            "ok",
            "warning",
            "error"
          ],
          "x-ms-enum": {
            "name": "ValidationResult",
            "values": [
              {
                "value": "ok",
                "description": ""
              },
              {
                "value": "warning",
                "description": ""
              },
              {
                "value": "error",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "BuildResourceUsage": {
      "description": "Represents information about resources used by builds in the system.",
      "type": "object",
      "properties": {
        "distributedTaskAgents": {
          "description": "The number of build agents.",
          "type": "integer",
          "format": "int32"
        },
        "paidPrivateAgentSlots": {
          "description": "The number of paid private agent slots.",
          "type": "integer",
          "format": "int32"
        },
        "totalUsage": {
          "description": "The total usage.",
          "type": "integer",
          "format": "int32"
        },
        "xamlControllers": {
          "description": "The number of XAML controllers.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "BuildRetentionHistory": {
      "description": "A historical overview of build retention information. This includes a list of snapshots taken about build retention usage, and a list of builds that have exceeded the default 30 day retention policy.",
      "type": "object",
      "properties": {
        "buildRetentionSamples": {
          "description": "A list of builds that are older than the default retention policy, but are not marked as retained. Something is causing these builds to not get cleaned up.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildRetentionSample"
          }
        }
      }
    },
    "BuildRetentionSample": {
      "description": "A snapshot of build retention information. This class takes a sample at the given time. It provides information about retained builds, files associated with those retained builds, and number of files being retained.",
      "type": "object",
      "properties": {
        "builds": {
          "description": "Summary of retention by build",
          "type": "string"
        },
        "definitions": {
          "description": "List of build definitions",
          "type": "string"
        },
        "files": {
          "description": "Summary of files consumed by retained builds",
          "type": "string"
        },
        "sampleTime": {
          "description": "The date and time when the sample was taken",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "BuildsDeletedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BuildsDeletedEvent1"
        }
      ],
      "properties": {}
    },
    "BuildsDeletedEvent1": {
      "description": "",
      "type": "object",
      "properties": {
        "buildIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "definitionId": {
          "description": "The ID of the definition.",
          "type": "integer",
          "format": "int32"
        },
        "projectId": {
          "description": "The ID of the project.",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "BuildServer": {
      "description": "",
      "type": "object",
      "properties": {
        "agents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildAgentReference"
          }
        },
        "controller": {
          "$ref": "#/definitions/XamlBuildControllerReference"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isVirtual": {
          "type": "boolean"
        },
        "messageQueueUrl": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "requireClientCertificates": {
          "type": "boolean"
        },
        "status": {
          "enum": [
            "online",
            "offline"
          ],
          "x-ms-enum": {
            "name": "ServiceHostStatus",
            "values": [
              {
                "value": "online",
                "description": "The service host is currently connected and accepting commands."
              },
              {
                "value": "offline",
                "description": "The service host is currently disconnected and not accepting commands."
              }
            ]
          }
        },
        "statusChangedDate": {
          "type": "string",
          "format": "date-time"
        },
        "uri": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "BuildSettings": {
      "description": "Represents system-wide build settings.",
      "type": "object",
      "properties": {
        "daysToKeepDeletedBuildsBeforeDestroy": {
          "description": "The number of days to keep records of deleted builds.",
          "type": "integer",
          "format": "int32"
        },
        "defaultRetentionPolicy": {
          "description": "The default retention policy.",
          "$ref": "#/definitions/RetentionPolicy"
        },
        "maximumRetentionPolicy": {
          "description": "The maximum retention policy.",
          "$ref": "#/definitions/RetentionPolicy"
        }
      }
    },
    "BuildSummary": {
      "description": "",
      "type": "object",
      "properties": {
        "build": {
          "$ref": "#/definitions/XamlBuildReference"
        },
        "finishTime": {
          "type": "string",
          "format": "date-time"
        },
        "keepForever": {
          "type": "boolean"
        },
        "quality": {
          "type": "string"
        },
        "reason": {
          "enum": [
            "none",
            "manual",
            "individualCI",
            "batchedCI",
            "schedule",
            "scheduleForced",
            "userCreated",
            "validateShelveset",
            "checkInShelveset",
            "pullRequest",
            "buildCompletion",
            "resourceTrigger",
            "triggered",
            "all"
          ],
          "x-ms-enum": {
            "name": "BuildReason",
            "values": [
              {
                "value": "none",
                "description": "No reason. This value should not be used."
              },
              {
                "value": "manual",
                "description": "The build was started manually."
              },
              {
                "value": "individualCI",
                "description": "The build was started for the trigger TriggerType.ContinuousIntegration."
              },
              {
                "value": "batchedCI",
                "description": "The build was started for the trigger TriggerType.BatchedContinuousIntegration."
              },
              {
                "value": "schedule",
                "description": "The build was started for the trigger TriggerType.Schedule."
              },
              {
                "value": "scheduleForced",
                "description": "The build was started for the trigger TriggerType.ScheduleForced."
              },
              {
                "value": "userCreated",
                "description": "The build was created by a user."
              },
              {
                "value": "validateShelveset",
                "description": "The build was started manually for private validation."
              },
              {
                "value": "checkInShelveset",
                "description": "The build was started for the trigger ContinuousIntegrationType.Gated."
              },
              {
                "value": "pullRequest",
                "description": "The build was started by a pull request. Added in resource version 3."
              },
              {
                "value": "buildCompletion",
                "description": "The build was started when another build completed."
              },
              {
                "value": "resourceTrigger",
                "description": "The build was started when resources in pipeline triggered it"
              },
              {
                "value": "triggered",
                "description": "The build was triggered for retention policy purposes."
              },
              {
                "value": "all",
                "description": "All reasons."
              }
            ]
          }
        },
        "requestedFor": {
          "$ref": "#/definitions/IdentityRef"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "enum": [
            "none",
            "inProgress",
            "completed",
            "cancelling",
            "postponed",
            "notStarted",
            "all"
          ],
          "x-ms-enum": {
            "name": "BuildStatus",
            "values": [
              {
                "value": "none",
                "description": "No status."
              },
              {
                "value": "inProgress",
                "description": "The build is currently in progress."
              },
              {
                "value": "completed",
                "description": "The build has completed."
              },
              {
                "value": "cancelling",
                "description": "The build is cancelling"
              },
              {
                "value": "postponed",
                "description": "The build is inactive in the queue."
              },
              {
                "value": "notStarted",
                "description": "The build has not yet started."
              },
              {
                "value": "all",
                "description": "All status."
              }
            ]
          }
        }
      }
    },
    "BuildTagsAddedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BuildUpdatedEvent"
        }
      ],
      "properties": {
        "allTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "newTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BuildTrigger": {
      "description": "Represents a trigger for a buld definition.",
      "type": "object",
      "properties": {
        "triggerType": {
          "description": "The type of the trigger.",
          "enum": [
            "none",
            "continuousIntegration",
            "batchedContinuousIntegration",
            "schedule",
            "gatedCheckIn",
            "batchedGatedCheckIn",
            "pullRequest",
            "buildCompletion",
            "all"
          ],
          "x-ms-enum": {
            "name": "DefinitionTriggerType",
            "values": [
              {
                "value": "none",
                "description": "Manual builds only."
              },
              {
                "value": "continuousIntegration",
                "description": "A build should be started for each changeset."
              },
              {
                "value": "batchedContinuousIntegration",
                "description": "A build should be started for multiple changesets at a time at a specified interval."
              },
              {
                "value": "schedule",
                "description": "A build should be started on a specified schedule whether or not changesets exist."
              },
              {
                "value": "gatedCheckIn",
                "description": "A validation build should be started for each check-in."
              },
              {
                "value": "batchedGatedCheckIn",
                "description": "A validation build should be started for each batch of check-ins."
              },
              {
                "value": "pullRequest",
                "description": "A build should be triggered when a GitHub pull request is created or updated. Added in resource version 3"
              },
              {
                "value": "buildCompletion",
                "description": "A build should be triggered when another build completes."
              },
              {
                "value": "all",
                "description": "All types."
              }
            ]
          }
        }
      }
    },
    "BuildUpdatedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RealtimeBuildEvent"
        }
      ],
      "properties": {
        "build": {
          "$ref": "#/definitions/Build"
        }
      }
    },
    "BuildWorkspace": {
      "description": "Represents a workspace mapping.",
      "type": "object",
      "properties": {
        "mappings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MappingDetails"
          }
        }
      }
    },
    "Change": {
      "description": "Represents a change associated with a build.",
      "type": "object",
      "properties": {
        "author": {
          "description": "The author of the change.",
          "$ref": "#/definitions/IdentityRef"
        },
        "displayUri": {
          "description": "The location of a user-friendly representation of the resource.",
          "type": "string"
        },
        "id": {
          "description": "The identifier for the change. For a commit, this would be the SHA1. For a TFVC changeset, this would be the changeset ID.",
          "type": "string"
        },
        "location": {
          "description": "The location of the full representation of the resource.",
          "type": "string"
        },
        "message": {
          "description": "The description of the change. This might be a commit message or changeset description.",
          "type": "string"
        },
        "messageTruncated": {
          "description": "Indicates whether the message was truncated.",
          "type": "boolean"
        },
        "pusher": {
          "description": "The person or process that pushed the change.",
          "type": "string"
        },
        "timestamp": {
          "description": "The timestamp for the change.",
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "description": "The type of change. \"commit\", \"changeset\", etc.",
          "type": "string"
        }
      }
    },
    "ConsoleLogEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RealtimeBuildEvent"
        }
      ],
      "properties": {
        "lines": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "stepRecordId": {
          "type": "string",
          "format": "uuid"
        },
        "timelineId": {
          "type": "string",
          "format": "uuid"
        },
        "timelineRecordId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "ContinuousDeploymentDefinition": {
      "description": "",
      "type": "object",
      "properties": {
        "connectedService": {
          "description": "The connected service associated with the continuous deployment",
          "$ref": "#/definitions/WebApiConnectedServiceRef"
        },
        "definition": {
          "description": "The definition associated with the continuous deployment",
          "$ref": "#/definitions/XamlDefinitionReference"
        },
        "gitBranch": {
          "type": "string"
        },
        "hostedServiceName": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/TeamProjectReference"
        },
        "repositoryId": {
          "type": "string"
        },
        "storageAccountName": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string"
        },
        "website": {
          "type": "string"
        },
        "webspace": {
          "type": "string"
        }
      }
    },
    "ContinuousIntegrationTrigger": {
      "description": "Represents a continuous integration (CI) trigger.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BuildTrigger"
        }
      ],
      "properties": {
        "batchChanges": {
          "description": "Indicates whether changes should be batched while another CI build is running.",
          "type": "boolean"
        },
        "branchFilters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "maxConcurrentBuildsPerBranch": {
          "description": "The maximum number of simultaneous CI builds that will run per branch.",
          "type": "integer",
          "format": "int32"
        },
        "pathFilters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pollingInterval": {
          "description": "The polling interval, in seconds.",
          "type": "integer",
          "format": "int32"
        },
        "pollingJobId": {
          "description": "The ID of the job used to poll an external repository.",
          "type": "string",
          "format": "uuid"
        },
        "settingsSourceType": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DataSourceBindingBase": {
      "description": "Represents binding of data source for the service endpoint request.",
      "type": "object",
      "properties": {
        "callbackContextTemplate": {
          "description": "Pagination format supported by this data source(ContinuationToken/SkipTop).",
          "type": "string"
        },
        "callbackRequiredTemplate": {
          "description": "Subsequent calls needed?",
          "type": "string"
        },
        "dataSourceName": {
          "description": "Gets or sets the name of the data source.",
          "type": "string"
        },
        "endpointId": {
          "description": "Gets or sets the endpoint Id.",
          "type": "string"
        },
        "endpointUrl": {
          "description": "Gets or sets the url of the service endpoint.",
          "type": "string"
        },
        "headers": {
          "description": "Gets or sets the authorization headers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthorizationHeader"
          }
        },
        "initialContextTemplate": {
          "description": "Defines the initial value of the query params",
          "type": "string"
        },
        "parameters": {
          "description": "Gets or sets the parameters for the data source.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "requestContent": {
          "description": "Gets or sets http request body",
          "type": "string"
        },
        "requestVerb": {
          "description": "Gets or sets http request verb",
          "type": "string"
        },
        "resultSelector": {
          "description": "Gets or sets the result selector.",
          "type": "string"
        },
        "resultTemplate": {
          "description": "Gets or sets the result template.",
          "type": "string"
        },
        "target": {
          "description": "Gets or sets the target of the data source.",
          "type": "string"
        }
      }
    },
    "DefinitionReference": {
      "description": "Represents a reference to a definition.",
      "type": "object",
      "properties": {
        "createdDate": {
          "description": "The date this version of the definition was created.",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "The ID of the referenced definition.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "The name of the referenced definition.",
          "type": "string"
        },
        "path": {
          "description": "The folder path of the definition.",
          "type": "string"
        },
        "project": {
          "description": "A reference to the project.",
          "$ref": "#/definitions/TeamProjectReference"
        },
        "queueStatus": {
          "description": "A value that indicates whether builds can be queued against this definition.",
          "enum": [
            "enabled",
            "paused",
            "disabled"
          ],
          "x-ms-enum": {
            "name": "DefinitionQueueStatus",
            "values": [
              {
                "value": "enabled",
                "description": "When enabled the definition queue allows builds to be queued by users, the system will queue scheduled, gated and continuous integration builds, and the queued builds will be started by the system."
              },
              {
                "value": "paused",
                "description": "When paused the definition queue allows builds to be queued by users and the system will queue scheduled, gated and continuous integration builds. Builds in the queue will not be started by the system."
              },
              {
                "value": "disabled",
                "description": "When disabled the definition queue will not allow builds to be queued by users and the system will not queue scheduled, gated or continuous integration builds. Builds already in the queue will not be started by the system."
              }
            ]
          }
        },
        "revision": {
          "description": "The definition revision number.",
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "description": "The type of the definition.",
          "enum": [
            "xaml",
            "build"
          ],
          "x-ms-enum": {
            "name": "DefinitionType",
            "values": [
              {
                "value": "xaml",
                "description": ""
              },
              {
                "value": "build",
                "description": ""
              }
            ]
          }
        },
        "uri": {
          "description": "The definition's URI.",
          "type": "string"
        },
        "url": {
          "description": "The REST URL of the definition.",
          "type": "string"
        }
      }
    },
    "DefinitionResourceReference": {
      "description": "",
      "type": "object",
      "properties": {
        "authorized": {
          "description": "Indicates whether the resource is authorized for use.",
          "type": "boolean"
        },
        "id": {
          "description": "The id of the resource.",
          "type": "string"
        },
        "name": {
          "description": "A friendly name for the resource.",
          "type": "string"
        },
        "type": {
          "description": "The type of the resource.",
          "type": "string"
        }
      }
    },
    "Demand": {
      "description": "Represents a demand used by a definition or build.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the capability referenced by the demand.",
          "type": "string"
        },
        "value": {
          "description": "The demanded value.",
          "type": "string"
        }
      }
    },
    "Dependency": {
      "description": "Represents a dependency.",
      "type": "object",
      "properties": {
        "event": {
          "description": "The event. The dependency is satisfied when the referenced object emits this event.",
          "type": "string"
        },
        "scope": {
          "description": "The scope. This names the object referenced by the dependency.",
          "type": "string"
        }
      }
    },
    "Deployment": {
      "description": "Represents the data from the build information nodes for type \"DeploymentInformation\" for xaml builds",
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      }
    },
    "DeploymentBuild": {
      "description": "Deployment information for type \"Build\"",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Deployment"
        }
      ],
      "properties": {
        "buildId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DeploymentDeploy": {
      "description": "Deployment information for type \"Deploy\"",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Deployment"
        }
      ],
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "DeploymentTest": {
      "description": "Deployment information for type \"Test\"",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Deployment"
        }
      ],
      "properties": {
        "runId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DesignerProcess": {
      "description": "Represents a build process supported by the build definition designer.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BuildProcess"
        }
      ],
      "properties": {
        "phases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Phase"
          }
        },
        "target": {
          "description": "The target for the build process.",
          "$ref": "#/definitions/DesignerProcessTarget"
        }
      }
    },
    "DesignerProcessTarget": {
      "description": "Represents the target for the build process.",
      "type": "object",
      "properties": {
        "agentSpecification": {
          "description": "Agent specification for the build process.",
          "$ref": "#/definitions/AgentSpecification"
        }
      }
    },
    "DockerProcess": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BuildProcess"
        }
      ],
      "properties": {
        "target": {
          "$ref": "#/definitions/DockerProcessTarget"
        }
      }
    },
    "DockerProcessTarget": {
      "description": "Represents the target for the docker build process.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DesignerProcessTarget"
        }
      ],
      "properties": {}
    },
    "Folder": {
      "description": "Represents a folder that contains build definitions.",
      "type": "object",
      "properties": {
        "createdBy": {
          "description": "The process or person who created the folder.",
          "$ref": "#/definitions/IdentityRef"
        },
        "createdOn": {
          "description": "The date the folder was created.",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The description.",
          "type": "string"
        },
        "lastChangedBy": {
          "description": "The process or person that last changed the folder.",
          "$ref": "#/definitions/IdentityRef"
        },
        "lastChangedDate": {
          "description": "The date the folder was last changed.",
          "type": "string",
          "format": "date-time"
        },
        "path": {
          "description": "The full path.",
          "type": "string"
        },
        "project": {
          "description": "The project.",
          "$ref": "#/definitions/TeamProjectReference"
        }
      }
    },
    "Forks": {
      "description": "Represents the ability to build forks of the selected repository.",
      "type": "object",
      "properties": {
        "allowFullAccessToken": {
          "description": "Indicates whether a build should allow a full access token or scope it down when building forks of the selected repository.",
          "type": "boolean"
        },
        "allowSecrets": {
          "description": "Indicates whether a build should use secrets when building forks of the selected repository.",
          "type": "boolean"
        },
        "enabled": {
          "description": "Indicates whether the trigger should queue builds for forks of the selected repository.",
          "type": "boolean"
        }
      }
    },
    "GatedCheckInTrigger": {
      "description": "Represents a gated check-in trigger.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BuildTrigger"
        }
      ],
      "properties": {
        "pathFilters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "runContinuousIntegration": {
          "description": "Indicates whether CI triggers should run after the gated check-in succeeds.",
          "type": "boolean"
        },
        "useWorkspaceMappings": {
          "description": "Indicates whether to take workspace mappings into account when determining whether a build should run.",
          "type": "boolean"
        }
      }
    },
    "GraphSubjectBase": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "description": "This field contains zero or more interesting links about the graph subject. These links may be invoked to obtain additional relationships or more detailed information about this graph subject.",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "descriptor": {
          "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Collections.",
          "type": "string"
        },
        "displayName": {
          "description": "This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.",
          "type": "string"
        },
        "url": {
          "description": "This url is the full route to the source resource of this graph subject.",
          "type": "string"
        }
      }
    },
    "IdentityRef": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GraphSubjectBase"
        }
      ],
      "properties": {
        "directoryAlias": {
          "description": "Deprecated - Can be retrieved by querying the Graph user referenced in the \"self\" entry of the IdentityRef \"_links\" dictionary",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "imageUrl": {
          "description": "Deprecated - Available in the \"avatar\" entry of the IdentityRef \"_links\" dictionary",
          "type": "string"
        },
        "inactive": {
          "description": "Deprecated - Can be retrieved by querying the Graph membership state referenced in the \"membershipState\" entry of the GraphUser \"_links\" dictionary",
          "type": "boolean"
        },
        "isAadIdentity": {
          "description": "Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsAadUserType/Descriptor.IsAadGroupType)",
          "type": "boolean"
        },
        "isContainer": {
          "description": "Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsGroupType)",
          "type": "boolean"
        },
        "isDeletedInOrigin": {
          "type": "boolean"
        },
        "profileUrl": {
          "description": "Deprecated - not in use in most preexisting implementations of ToIdentityRef",
          "type": "string"
        },
        "uniqueName": {
          "description": "Deprecated - use Domain+PrincipalName instead",
          "type": "string"
        }
      }
    },
    "InformationNode": {
      "description": "Data representation of an information node associated with a build",
      "type": "object",
      "properties": {
        "fields": {
          "description": "Fields of the information node",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "lastModifiedBy": {
          "description": "Process or person that last modified this node",
          "type": "string"
        },
        "lastModifiedDate": {
          "description": "Date this node was last modified",
          "type": "string",
          "format": "date-time"
        },
        "nodeId": {
          "description": "Node Id of this information node",
          "type": "integer",
          "format": "int32"
        },
        "parentId": {
          "description": "Id of parent node (xml tree)",
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "description": "The type of the information node",
          "type": "string"
        }
      }
    },
    "Issue": {
      "description": "Represents an issue (error, warning) associated with a build.",
      "type": "object",
      "properties": {
        "category": {
          "description": "The category.",
          "type": "string"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "message": {
          "description": "A description of the issue.",
          "type": "string"
        },
        "type": {
          "description": "The type (error, warning) of the issue.",
          "enum": [
            "error",
            "warning"
          ],
          "x-ms-enum": {
            "name": "IssueType",
            "values": [
              {
                "value": "error",
                "description": ""
              },
              {
                "value": "warning",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "JobReference": {
      "description": "Job in pipeline. This is related to matrixing in YAML.",
      "type": "object",
      "properties": {
        "attempt": {
          "description": "Attempt number of the job",
          "type": "integer",
          "format": "int32"
        },
        "jobName": {
          "description": "Matrixing in YAML generates copies of a job with different inputs in matrix. JobName is the name of those input. Maximum supported length for name is 256 character.",
          "type": "string"
        }
      }
    },
    "JsonPatchDocument": {
      "description": "The JSON model for JSON Patch Operations",
      "type": "object",
      "allOf": [
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JsonPatchOperation"
          }
        }
      ],
      "properties": {}
    },
    "JsonPatchOperation": {
      "description": "The JSON model for a JSON Patch operation",
      "type": "object",
      "properties": {
        "from": {
          "description": "The path to copy from for the Move/Copy operation.",
          "type": "string"
        },
        "op": {
          "description": "The patch operation",
          "enum": [
            "add",
            "remove",
            "replace",
            "move",
            "copy",
            "test"
          ],
          "x-ms-enum": {
            "name": "Operation",
            "values": [
              {
                "value": "add",
                "description": ""
              },
              {
                "value": "remove",
                "description": ""
              },
              {
                "value": "replace",
                "description": ""
              },
              {
                "value": "move",
                "description": ""
              },
              {
                "value": "copy",
                "description": ""
              },
              {
                "value": "test",
                "description": ""
              }
            ]
          }
        },
        "path": {
          "description": "The path for the operation. In the case of an array, a zero based index can be used to specify the position in the array (e.g. /biscuits/0/name). The \"-\" character can be used instead of an index to insert at the end of the array (e.g. /biscuits/-).",
          "type": "string"
        },
        "value": {
          "description": "The value for the operation. This is either a primitive or a JToken.",
          "type": "object"
        }
      }
    },
    "JustInTimeProcess": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BuildProcess"
        }
      ],
      "properties": {}
    },
    "MappingDetails": {
      "description": "Represents an entry in a workspace mapping.",
      "type": "object",
      "properties": {
        "localPath": {
          "description": "The local path.",
          "type": "string"
        },
        "mappingType": {
          "description": "The mapping type.",
          "type": "string"
        },
        "serverPath": {
          "description": "The server path.",
          "type": "string"
        }
      }
    },
    "MinimalRetentionLease": {
      "description": "",
      "type": "object",
      "properties": {
        "definitionId": {
          "description": "The pipeline definition of the run.",
          "type": "integer",
          "format": "int32"
        },
        "ownerId": {
          "description": "User-provided string that identifies the owner of a retention lease.",
          "type": "string"
        },
        "runId": {
          "description": "The pipeline run to protect.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "MultipleAgentExecutionOptions": {
      "description": "Represents options for running a phase against multiple agents.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AgentTargetExecutionOptions"
        }
      ],
      "properties": {
        "continueOnError": {
          "description": "Indicates whether failure on one agent should prevent the phase from running on other agents.",
          "type": "boolean"
        },
        "maxConcurrency": {
          "description": "The maximum number of agents to use simultaneously.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "NewRetentionLease": {
      "description": "Required information to create a new retention lease.",
      "type": "object",
      "properties": {
        "daysValid": {
          "description": "The number of days to consider the lease valid. A retention lease valid for more than 100 years (36500 days) will display as retaining the build \"forever\".",
          "type": "integer",
          "format": "int32"
        },
        "definitionId": {
          "description": "The pipeline definition of the run.",
          "type": "integer",
          "format": "int32"
        },
        "ownerId": {
          "description": "User-provided string that identifies the owner of a retention lease.",
          "type": "string"
        },
        "protectPipeline": {
          "description": "If set, this lease will also prevent the pipeline from being deleted while the lease is still valid.",
          "type": "boolean"
        },
        "runId": {
          "description": "The pipeline run to protect.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Phase": {
      "description": "Represents a phase of a build definition.",
      "type": "object",
      "properties": {
        "condition": {
          "description": "The condition that must be true for this phase to execute.",
          "type": "string"
        },
        "dependencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Dependency"
          }
        },
        "jobAuthorizationScope": {
          "description": "The job authorization scope for builds queued against this definition.",
          "enum": [
            "projectCollection",
            "project"
          ],
          "x-ms-enum": {
            "name": "BuildAuthorizationScope",
            "values": [
              {
                "value": "projectCollection",
                "description": "The identity used should have build service account permissions scoped to the project collection. This is useful when resources for a single build are spread across multiple projects."
              },
              {
                "value": "project",
                "description": "The identity used should have build service account permissions scoped to the project in which the build definition resides. This is useful for isolation of build jobs to a particular team project to avoid any unintentional escalation of privilege attacks during a build."
              }
            ]
          }
        },
        "jobCancelTimeoutInMinutes": {
          "description": "The cancellation timeout, in minutes, for builds queued against this definition.",
          "type": "integer",
          "format": "int32"
        },
        "jobTimeoutInMinutes": {
          "description": "The job execution timeout, in minutes, for builds queued against this definition.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "The name of the phase.",
          "type": "string"
        },
        "refName": {
          "description": "The unique ref name of the phase.",
          "type": "string"
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildDefinitionStep"
          }
        },
        "target": {
          "description": "The target (agent, server, etc.) for this phase.",
          "$ref": "#/definitions/PhaseTarget"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/BuildDefinitionVariable"
          }
        }
      }
    },
    "PhaseReference": {
      "description": "Phase in pipeline",
      "type": "object",
      "properties": {
        "attempt": {
          "description": "Attempt number of the phase",
          "type": "integer",
          "format": "int32"
        },
        "phaseName": {
          "description": "Name of the phase. Maximum supported length for name is 256 character.",
          "type": "string"
        }
      }
    },
    "PhaseTarget": {
      "description": "Represents the target of a phase.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The type of the target.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PipelineGeneralSettings": {
      "description": "Contains pipeline general settings.",
      "type": "object",
      "properties": {
        "auditEnforceSettableVar": {
          "description": "If enabled, audit logs will be generated whenever someone queues a pipeline run and defines variables that are not marked as \"Settable at queue time\".",
          "type": "boolean"
        },
        "buildsEnabledForForks": {
          "description": "Enable forked repositories to build pull requests.",
          "type": "boolean"
        },
        "disableClassicBuildPipelineCreation": {
          "description": "Disable classic build pipelines creation.",
          "type": "boolean"
        },
        "disableClassicPipelineCreation": {
          "description": "Disable classic pipelines creation.",
          "type": "boolean"
        },
        "disableClassicReleasePipelineCreation": {
          "description": "Disable classic release pipelines creation.",
          "type": "boolean"
        },
        "enableShellTasksArgsSanitizing": {
          "description": "Enable shell tasks args sanitizing.",
          "type": "boolean"
        },
        "enableShellTasksArgsSanitizingAudit": {
          "description": "Enable shell tasks args sanitizing preview.",
          "type": "boolean"
        },
        "enforceJobAuthScope": {
          "description": "If enabled, scope of access for all non-release pipelines reduces to the current project.",
          "type": "boolean"
        },
        "enforceJobAuthScopeForForks": {
          "description": "Enforce job auth scope for builds of forked repositories.",
          "type": "boolean"
        },
        "enforceJobAuthScopeForReleases": {
          "description": "If enabled, scope of access for all release pipelines reduces to the current project.",
          "type": "boolean"
        },
        "enforceNoAccessToSecretsFromForks": {
          "description": "Enforce no access to secrets for builds of forked repositories.",
          "type": "boolean"
        },
        "enforceReferencedRepoScopedToken": {
          "description": "Restricts the scope of access for all pipelines to only repositories explicitly referenced by the pipeline.",
          "type": "boolean"
        },
        "enforceSettableVar": {
          "description": "If enabled, only those variables that are explicitly marked as \"Settable at queue time\" can be set at queue time.",
          "type": "boolean"
        },
        "forkProtectionEnabled": {
          "description": "Enable settings that enforce certain levels of protection for building pull requests from forks globally.",
          "type": "boolean"
        },
        "isCommentRequiredForPullRequest": {
          "description": "Make comments required to have builds in all pull requests.",
          "type": "boolean"
        },
        "publishPipelineMetadata": {
          "description": "Allows pipelines to record metadata.",
          "type": "boolean"
        },
        "requireCommentsForNonTeamMemberAndNonContributors": {
          "description": "Make comments required to have builds in pull requests from non-team members and non-contributors.",
          "type": "boolean"
        },
        "requireCommentsForNonTeamMembersOnly": {
          "description": "Make comments required to have builds in pull requests from non-team members.",
          "type": "boolean"
        },
        "statusBadgesArePrivate": {
          "description": "Anonymous users can access the status badge API for all pipelines unless this option is enabled.",
          "type": "boolean"
        }
      }
    },
    "PipelineReference": {
      "description": "Pipeline reference",
      "type": "object",
      "properties": {
        "jobReference": {
          "description": "Reference of the job",
          "$ref": "#/definitions/JobReference"
        },
        "phaseReference": {
          "description": "Reference of the phase.",
          "$ref": "#/definitions/PhaseReference"
        },
        "pipelineId": {
          "description": "Reference of the pipeline with which this pipeline instance is related.",
          "type": "integer",
          "format": "int32"
        },
        "stageReference": {
          "description": "Reference of the stage.",
          "$ref": "#/definitions/StageReference"
        }
      }
    },
    "PipelineTriggerSettings": {
      "description": "Represents the effective settings applicable to individual pipeline triggers.",
      "type": "object",
      "properties": {
        "buildsEnabledForForks": {
          "description": "Enable forked repositories to build pull requests.",
          "type": "boolean"
        },
        "enforceJobAuthScopeForForks": {
          "description": "Enforce job auth scope for builds of forked repositories.",
          "type": "boolean"
        },
        "enforceNoAccessToSecretsFromForks": {
          "description": "Enforce no access to secrets for builds of forked repositories.",
          "type": "boolean"
        },
        "forkProtectionEnabled": {
          "description": "Enable settings that enforce certain levels of protection for building pull requests from forks globally.",
          "type": "boolean"
        },
        "isCommentRequiredForPullRequest": {
          "description": "Make comments required to have builds in all pull requests.",
          "type": "boolean"
        },
        "requireCommentsForNonTeamMemberAndNonContributors": {
          "description": "Make comments required to have builds in pull requests from non-team members and non-contributors.",
          "type": "boolean"
        },
        "requireCommentsForNonTeamMembersOnly": {
          "description": "Make comments required to have builds in pull requests from non-team members.",
          "type": "boolean"
        }
      }
    },
    "ProcessParameters": {
      "description": "",
      "type": "object",
      "properties": {
        "dataSourceBindings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataSourceBindingBase"
          }
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskInputDefinitionBase"
          }
        },
        "sourceDefinitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskSourceDefinitionBase"
          }
        }
      }
    },
    "ProjectRetentionSetting": {
      "description": "Contains the settings for the retention rules.",
      "type": "object",
      "properties": {
        "purgeArtifacts": {
          "description": "The rules for artifact retention. Artifacts can not live longer than a run, so will be overridden by a shorter run purge setting.",
          "$ref": "#/definitions/RetentionSetting"
        },
        "purgePullRequestRuns": {
          "description": "The rules for pull request pipeline run retention.",
          "$ref": "#/definitions/RetentionSetting"
        },
        "purgeRuns": {
          "description": "The rules for pipeline run retention.",
          "$ref": "#/definitions/RetentionSetting"
        },
        "retainRunsPerProtectedBranch": {
          "description": "The rules for retaining runs per protected branch.",
          "$ref": "#/definitions/RetentionSetting"
        }
      }
    },
    "PropertiesCollection": {
      "description": "The class represents a property bag as a collection of key-value pairs. Values of all primitive types (any type with a `TypeCode != TypeCode.Object`) except for `DBNull` are accepted. Values of type Byte[], Int32, Double, DateType and String preserve their type, other primitives are retuned as a String. Byte[] expected as base64 encoded string.",
      "type": "object",
      "properties": {
        "count": {
          "description": "The count of properties in the collection.",
          "type": "integer",
          "format": "int32"
        },
        "item": {
          "type": "object"
        },
        "keys": {
          "description": "The set of keys in the collection.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "values": {
          "description": "The set of values in the collection.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PullRequest": {
      "description": "Represents a pull request object.  These are retrieved from Source Providers.",
      "type": "object",
      "properties": {
        "_links": {
          "description": "The links to other objects related to this object.",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "author": {
          "description": "Author of the pull request.",
          "$ref": "#/definitions/IdentityRef"
        },
        "currentState": {
          "description": "Current state of the pull request, e.g. open, merged, closed, conflicts, etc.",
          "type": "string"
        },
        "description": {
          "description": "Description for the pull request.",
          "type": "string"
        },
        "draft": {
          "description": "Returns if pull request is draft",
          "type": "boolean"
        },
        "id": {
          "description": "Unique identifier for the pull request",
          "type": "string"
        },
        "providerName": {
          "description": "The name of the provider this pull request is associated with.",
          "type": "string"
        },
        "sourceBranchRef": {
          "description": "Source branch ref of this pull request",
          "type": "string"
        },
        "sourceRepositoryOwner": {
          "description": "Owner of the source repository of this pull request",
          "type": "string"
        },
        "targetBranchRef": {
          "description": "Target branch ref of this pull request",
          "type": "string"
        },
        "targetRepositoryOwner": {
          "description": "Owner of the target repository of this pull request",
          "type": "string"
        },
        "title": {
          "description": "Title of the pull request.",
          "type": "string"
        }
      }
    },
    "PullRequestTrigger": {
      "description": "Represents a pull request trigger.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BuildTrigger"
        }
      ],
      "properties": {
        "autoCancel": {
          "description": "Indicates if an update to a PR should delete current in-progress builds.",
          "type": "boolean"
        },
        "branchFilters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "forks": {
          "$ref": "#/definitions/Forks"
        },
        "isCommentRequiredForPullRequest": {
          "type": "boolean"
        },
        "pathFilters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pipelineTriggerSettings": {
          "$ref": "#/definitions/PipelineTriggerSettings"
        },
        "requireCommentsForNonTeamMemberAndNonContributors": {
          "type": "boolean"
        },
        "requireCommentsForNonTeamMembersOnly": {
          "type": "boolean"
        },
        "settingsSourceType": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "RealtimeBuildEvent": {
      "description": "",
      "type": "object",
      "properties": {
        "buildId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ReferenceLinks": {
      "description": "The class to represent a collection of REST reference links.",
      "type": "object",
      "properties": {
        "links": {
          "description": "The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ReleaseReference": {
      "description": "Reference to a release.",
      "type": "object",
      "properties": {
        "attempt": {
          "description": "Number of Release Attempt.",
          "type": "integer",
          "format": "int32"
        },
        "creationDate": {
          "description": "Release Creation Date(UTC).",
          "type": "string",
          "format": "date-time"
        },
        "definitionId": {
          "description": "Release definition ID.",
          "type": "integer",
          "format": "int32"
        },
        "environmentCreationDate": {
          "description": "Environment creation Date(UTC).",
          "type": "string",
          "format": "date-time"
        },
        "environmentDefinitionId": {
          "description": "Release environment definition ID.",
          "type": "integer",
          "format": "int32"
        },
        "environmentDefinitionName": {
          "description": "Release environment definition name.",
          "type": "string"
        },
        "environmentId": {
          "description": "Release environment ID.",
          "type": "integer",
          "format": "int32"
        },
        "environmentName": {
          "description": "Release environment name.",
          "type": "string"
        },
        "id": {
          "description": "Release ID.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Release name.",
          "type": "string"
        }
      }
    },
    "RepositoryWebhook": {
      "description": "Represents a repository's webhook returned from a source provider.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The friendly name of the repository.",
          "type": "string"
        },
        "types": {
          "type": "array",
          "items": {
            "enum": [
              "none",
              "continuousIntegration",
              "batchedContinuousIntegration",
              "schedule",
              "gatedCheckIn",
              "batchedGatedCheckIn",
              "pullRequest",
              "buildCompletion",
              "all"
            ],
            "x-ms-enum": {
              "name": "DefinitionTriggerType",
              "values": [
                {
                  "value": "none",
                  "description": "Manual builds only."
                },
                {
                  "value": "continuousIntegration",
                  "description": "A build should be started for each changeset."
                },
                {
                  "value": "batchedContinuousIntegration",
                  "description": "A build should be started for multiple changesets at a time at a specified interval."
                },
                {
                  "value": "schedule",
                  "description": "A build should be started on a specified schedule whether or not changesets exist."
                },
                {
                  "value": "gatedCheckIn",
                  "description": "A validation build should be started for each check-in."
                },
                {
                  "value": "batchedGatedCheckIn",
                  "description": "A validation build should be started for each batch of check-ins."
                },
                {
                  "value": "pullRequest",
                  "description": "A build should be triggered when a GitHub pull request is created or updated. Added in resource version 3"
                },
                {
                  "value": "buildCompletion",
                  "description": "A build should be triggered when another build completes."
                },
                {
                  "value": "all",
                  "description": "All types."
                }
              ]
            }
          }
        },
        "url": {
          "description": "The URL of the repository.",
          "type": "string"
        }
      }
    },
    "ResourceRef": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "ResourceReference": {
      "description": "Represents a reference to a resource.",
      "type": "object",
      "properties": {
        "alias": {
          "description": "An alias to be used when referencing the resource.",
          "type": "string"
        }
      }
    },
    "RetentionLease": {
      "description": "A valid retention lease prevents automated systems from deleting a pipeline run.",
      "type": "object",
      "properties": {
        "createdOn": {
          "description": "When the lease was created.",
          "type": "string",
          "format": "date-time"
        },
        "definitionId": {
          "description": "The pipeline definition of the run.",
          "type": "integer",
          "format": "int32"
        },
        "leaseId": {
          "description": "The unique identifier for this lease.",
          "type": "integer",
          "format": "int32"
        },
        "ownerId": {
          "description": "Non-unique string that identifies the owner of a retention lease.",
          "type": "string"
        },
        "protectPipeline": {
          "description": "If set, this lease will also prevent the pipeline from being deleted while the lease is still valid.",
          "type": "boolean"
        },
        "runId": {
          "description": "The pipeline run protected by this lease.",
          "type": "integer",
          "format": "int32"
        },
        "validUntil": {
          "description": "The last day the lease is considered valid.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "RetentionLeaseUpdate": {
      "description": "An update to the retention parameters of a retention lease.",
      "type": "object",
      "properties": {
        "daysValid": {
          "description": "The number of days to consider the lease valid. A retention lease valid for more than 100 years (36500 days) will display as retaining the build \"forever\".",
          "type": "integer",
          "format": "int32"
        },
        "protectPipeline": {
          "description": "If set, this lease will also prevent the pipeline from being deleted while the lease is still valid.",
          "type": "boolean"
        }
      }
    },
    "RetentionPolicy": {
      "description": "Represents a retention policy for a build definition.",
      "type": "object",
      "properties": {
        "artifacts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "artifactTypesToDelete": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "branches": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "daysToKeep": {
          "description": "The number of days to keep builds.",
          "type": "integer",
          "format": "int32"
        },
        "deleteBuildRecord": {
          "description": "Indicates whether the build record itself should be deleted.",
          "type": "boolean"
        },
        "deleteTestResults": {
          "description": "Indicates whether to delete test results associated with the build.",
          "type": "boolean"
        },
        "minimumToKeep": {
          "description": "The minimum number of builds to keep.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "RetentionSetting": {
      "description": "Contains the minimum, maximum, and current value for a retention setting.",
      "type": "object",
      "properties": {
        "max": {
          "type": "integer",
          "format": "int32"
        },
        "min": {
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Schedule": {
      "description": "",
      "type": "object",
      "properties": {
        "branchFilters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "daysToBuild": {
          "description": "Days for a build (flags enum for days of the week)",
          "enum": [
            "none",
            "monday",
            "tuesday",
            "wednesday",
            "thursday",
            "friday",
            "saturday",
            "sunday",
            "all"
          ],
          "x-ms-enum": {
            "name": "ScheduleDays",
            "values": [
              {
                "value": "none",
                "description": "Do not run."
              },
              {
                "value": "monday",
                "description": "Run on Monday."
              },
              {
                "value": "tuesday",
                "description": "Run on Tuesday."
              },
              {
                "value": "wednesday",
                "description": "Run on Wednesday."
              },
              {
                "value": "thursday",
                "description": "Run on Thursday."
              },
              {
                "value": "friday",
                "description": "Run on Friday."
              },
              {
                "value": "saturday",
                "description": "Run on Saturday."
              },
              {
                "value": "sunday",
                "description": "Run on Sunday."
              },
              {
                "value": "all",
                "description": "Run on all days of the week."
              }
            ]
          }
        },
        "scheduleJobId": {
          "description": "The Job Id of the Scheduled job that will queue the scheduled build. Since a single trigger can have multiple schedules and we want a single job to process a single schedule (since each schedule has a list of branches to build), the schedule itself needs to define the Job Id. This value will be filled in when a definition is added or updated.  The UI does not provide it or use it.",
          "type": "string",
          "format": "uuid"
        },
        "scheduleOnlyWithChanges": {
          "description": "Flag to determine if this schedule should only build if the associated source has been changed.",
          "type": "boolean"
        },
        "startHours": {
          "description": "Local timezone hour to start",
          "type": "integer",
          "format": "int32"
        },
        "startMinutes": {
          "description": "Local timezone minute to start",
          "type": "integer",
          "format": "int32"
        },
        "timeZoneId": {
          "description": "Time zone of the build schedule (String representation of the time zone ID)",
          "type": "string"
        }
      }
    },
    "ScheduleTrigger": {
      "description": "Represents a schedule trigger.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BuildTrigger"
        }
      ],
      "properties": {
        "schedules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Schedule"
          }
        }
      }
    },
    "SecureFileReference": {
      "description": "Represents a reference to a secure file.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ResourceReference"
        }
      ],
      "properties": {
        "id": {
          "description": "The ID of the secure file.",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "ServerTarget": {
      "description": "Represents a phase target that runs on the server.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/PhaseTarget"
        }
      ],
      "properties": {
        "executionOptions": {
          "description": "The execution options.",
          "$ref": "#/definitions/ServerTargetExecutionOptions"
        }
      }
    },
    "ServerTargetExecutionOptions": {
      "description": "Represents options for running a phase on the server.",
      "type": "object",
      "properties": {
        "type": {
          "description": "The type.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ServiceEndpointReference": {
      "description": "Represents a referenec to a service endpoint.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ResourceReference"
        }
      ],
      "properties": {
        "id": {
          "description": "The ID of the service endpoint.",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "SourceProviderAttributes": {
      "description": "",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the source provider.",
          "type": "string"
        },
        "supportedCapabilities": {
          "description": "The capabilities supported by this source provider.",
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        },
        "supportedTriggers": {
          "description": "The types of triggers supported by this source provider.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SupportedTrigger"
          }
        }
      }
    },
    "SourceRelatedWorkItem": {
      "description": "Represents a work item related to some source item. These are retrieved from Source Providers.",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "assignedTo": {
          "description": "Identity ref for the person that the work item is assigned to.",
          "$ref": "#/definitions/IdentityRef"
        },
        "currentState": {
          "description": "Current state of the work item, e.g. Active, Resolved, Closed, etc.",
          "type": "string"
        },
        "description": {
          "description": "Long description for the work item.",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier for the work item",
          "type": "string"
        },
        "providerName": {
          "description": "The name of the provider the work item is associated with.",
          "type": "string"
        },
        "title": {
          "description": "Short name for the work item.",
          "type": "string"
        },
        "type": {
          "description": "Type of work item, e.g. Bug, Task, User Story, etc.",
          "type": "string"
        }
      }
    },
    "SourceRepositories": {
      "description": "A set of repositories returned from the source provider.",
      "type": "object",
      "properties": {
        "continuationToken": {
          "description": "A token used to continue this paged request; 'null' if the request is complete",
          "type": "string"
        },
        "pageLength": {
          "description": "The number of repositories requested for each page",
          "type": "integer",
          "format": "int32"
        },
        "repositories": {
          "description": "A list of repositories",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceRepository"
          }
        },
        "totalPageCount": {
          "description": "The total number of pages, or '-1' if unknown",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SourceRepository": {
      "description": "Represents a repository returned from a source provider.",
      "type": "object",
      "properties": {
        "defaultBranch": {
          "description": "The name of the default branch.",
          "type": "string"
        },
        "fullName": {
          "description": "The full name of the repository.",
          "type": "string"
        },
        "id": {
          "description": "The ID of the repository.",
          "type": "string"
        },
        "name": {
          "description": "The friendly name of the repository.",
          "type": "string"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sourceProviderName": {
          "description": "The name of the source provider the repository is from.",
          "type": "string"
        },
        "url": {
          "description": "The URL of the repository.",
          "type": "string"
        }
      }
    },
    "SourceRepositoryItem": {
      "description": "Represents an item in a repository from a source provider.",
      "type": "object",
      "properties": {
        "isContainer": {
          "description": "Whether the item is able to have sub-items (e.g., is a folder).",
          "type": "boolean"
        },
        "path": {
          "description": "The full path of the item, relative to the root of the repository.",
          "type": "string"
        },
        "type": {
          "description": "The type of the item (folder, file, etc).",
          "type": "string"
        },
        "url": {
          "description": "The URL of the item.",
          "type": "string"
        }
      }
    },
    "StageReference": {
      "description": "Stage in pipeline",
      "type": "object",
      "properties": {
        "attempt": {
          "description": "Attempt number of stage",
          "type": "integer",
          "format": "int32"
        },
        "stageName": {
          "description": "Name of the stage. Maximum supported length for name is 256 character.",
          "type": "string"
        }
      }
    },
    "SupportedTrigger": {
      "description": "",
      "type": "object",
      "properties": {
        "defaultPollingInterval": {
          "description": "The default interval to wait between polls (only relevant when NotificationType is Polling).",
          "type": "integer",
          "format": "int32"
        },
        "notificationType": {
          "description": "How the trigger is notified of changes.",
          "type": "string"
        },
        "supportedCapabilities": {
          "description": "The capabilities supported by this trigger.",
          "type": "object",
          "additionalProperties": {
            "enum": [
              "unsupported",
              "supported",
              "required"
            ],
            "x-ms-enum": {
              "name": "SupportLevel",
              "values": [
                {
                  "value": "unsupported",
                  "description": "The functionality is not supported."
                },
                {
                  "value": "supported",
                  "description": "The functionality is supported."
                },
                {
                  "value": "required",
                  "description": "The functionality is required."
                }
              ]
            }
          }
        },
        "type": {
          "description": "The type of trigger.",
          "enum": [
            "none",
            "continuousIntegration",
            "batchedContinuousIntegration",
            "schedule",
            "gatedCheckIn",
            "batchedGatedCheckIn",
            "pullRequest",
            "buildCompletion",
            "all"
          ],
          "x-ms-enum": {
            "name": "DefinitionTriggerType",
            "values": [
              {
                "value": "none",
                "description": "Manual builds only."
              },
              {
                "value": "continuousIntegration",
                "description": "A build should be started for each changeset."
              },
              {
                "value": "batchedContinuousIntegration",
                "description": "A build should be started for multiple changesets at a time at a specified interval."
              },
              {
                "value": "schedule",
                "description": "A build should be started on a specified schedule whether or not changesets exist."
              },
              {
                "value": "gatedCheckIn",
                "description": "A validation build should be started for each check-in."
              },
              {
                "value": "batchedGatedCheckIn",
                "description": "A validation build should be started for each batch of check-ins."
              },
              {
                "value": "pullRequest",
                "description": "A build should be triggered when a GitHub pull request is created or updated. Added in resource version 3"
              },
              {
                "value": "buildCompletion",
                "description": "A build should be triggered when another build completes."
              },
              {
                "value": "all",
                "description": "All types."
              }
            ]
          }
        }
      }
    },
    "SvnMappingDetails": {
      "description": "Represents a Subversion mapping entry.",
      "type": "object",
      "properties": {
        "depth": {
          "description": "The depth.",
          "type": "integer",
          "format": "int32"
        },
        "ignoreExternals": {
          "description": "Indicates whether to ignore externals.",
          "type": "boolean"
        },
        "localPath": {
          "description": "The local path.",
          "type": "string"
        },
        "revision": {
          "description": "The revision.",
          "type": "string"
        },
        "serverPath": {
          "description": "The server path.",
          "type": "string"
        }
      }
    },
    "SvnWorkspace": {
      "description": "Represents a subversion workspace.",
      "type": "object",
      "properties": {
        "mappings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SvnMappingDetails"
          }
        }
      }
    },
    "TaskAgentPoolReference": {
      "description": "Represents a reference to an agent pool.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The pool ID.",
          "type": "integer",
          "format": "int32"
        },
        "isHosted": {
          "description": "A value indicating whether or not this pool is managed by the service.",
          "type": "boolean"
        },
        "name": {
          "description": "The pool name.",
          "type": "string"
        }
      }
    },
    "TaskDefinitionReference": {
      "description": "A reference to a task definition.",
      "type": "object",
      "properties": {
        "definitionType": {
          "description": "The type of task (task or task group).",
          "type": "string"
        },
        "id": {
          "description": "The ID of the task.",
          "type": "string",
          "format": "uuid"
        },
        "versionSpec": {
          "description": "The version of the task.",
          "type": "string"
        }
      }
    },
    "TaskInputDefinitionBase": {
      "description": "",
      "type": "object",
      "properties": {
        "aliases": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultValue": {
          "type": "string"
        },
        "groupName": {
          "type": "string"
        },
        "helpMarkDown": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "options": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "required": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        },
        "validation": {
          "$ref": "#/definitions/TaskInputValidation"
        },
        "visibleRule": {
          "type": "string"
        }
      }
    },
    "TaskInputValidation": {
      "description": "",
      "type": "object",
      "properties": {
        "expression": {
          "description": "Conditional expression",
          "type": "string"
        },
        "message": {
          "description": "Message explaining how user can correct if validation fails",
          "type": "string"
        }
      }
    },
    "TaskOrchestrationPlanGroupReference": {
      "description": "Represents a reference to a plan group.",
      "type": "object",
      "properties": {
        "planGroup": {
          "description": "The name of the plan group.",
          "type": "string"
        },
        "projectId": {
          "description": "The project ID.",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "TaskOrchestrationPlanGroupsStartedEvent": {
      "description": "",
      "type": "object",
      "properties": {
        "planGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskOrchestrationPlanGroupReference"
          }
        }
      }
    },
    "TaskOrchestrationPlanReference": {
      "description": "Represents a reference to an orchestration plan.",
      "type": "object",
      "properties": {
        "orchestrationType": {
          "description": "The type of the plan.",
          "type": "integer",
          "format": "int32"
        },
        "planId": {
          "description": "The ID of the plan.",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "TaskReference": {
      "description": "Represents a reference to a task.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the task definition.",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "The name of the task definition.",
          "type": "string"
        },
        "version": {
          "description": "The version of the task definition.",
          "type": "string"
        }
      }
    },
    "TaskSourceDefinitionBase": {
      "description": "",
      "type": "object",
      "properties": {
        "authKey": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "keySelector": {
          "type": "string"
        },
        "selector": {
          "type": "string"
        },
        "target": {
          "type": "string"
        }
      }
    },
    "TeamProjectReference": {
      "description": "Represents a shallow reference to a TeamProject.",
      "type": "object",
      "properties": {
        "abbreviation": {
          "description": "Project abbreviation.",
          "type": "string"
        },
        "defaultTeamImageUrl": {
          "description": "Url to default team identity image.",
          "type": "string"
        },
        "description": {
          "description": "The project's description (if any).",
          "type": "string"
        },
        "id": {
          "description": "Project identifier.",
          "type": "string",
          "format": "uuid"
        },
        "lastUpdateTime": {
          "description": "Project last update time.",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "Project name.",
          "type": "string"
        },
        "revision": {
          "description": "Project revision.",
          "type": "integer",
          "format": "int64"
        },
        "state": {
          "description": "Project state.",
          "enum": [
            "deleting",
            "new",
            "wellFormed",
            "createPending",
            "all",
            "unchanged",
            "deleted"
          ],
          "x-ms-enum": {
            "name": "ProjectState",
            "values": [
              {
                "value": "deleting",
                "description": "Project is in the process of being deleted."
              },
              {
                "value": "new",
                "description": "Project is in the process of being created."
              },
              {
                "value": "wellFormed",
                "description": "Project is completely created and ready to use."
              },
              {
                "value": "createPending",
                "description": "Project has been queued for creation, but the process has not yet started."
              },
              {
                "value": "all",
                "description": "All projects regardless of state except Deleted."
              },
              {
                "value": "unchanged",
                "description": "Project has not been changed."
              },
              {
                "value": "deleted",
                "description": "Project has been deleted."
              }
            ]
          }
        },
        "url": {
          "description": "Url to the full version of the object.",
          "type": "string"
        },
        "visibility": {
          "description": "Project visibility.",
          "enum": [
            "private",
            "public"
          ],
          "x-ms-enum": {
            "name": "ProjectVisibility",
            "values": [
              {
                "value": "private",
                "description": "The project is only visible to users with explicit access."
              },
              {
                "value": "public",
                "description": "The project is visible to all."
              }
            ]
          }
        }
      }
    },
    "TestResultsContext": {
      "description": "",
      "type": "object",
      "properties": {
        "build": {
          "$ref": "#/definitions/BuildReference"
        },
        "contextType": {
          "enum": [
            "build",
            "release",
            "pipeline"
          ],
          "x-ms-enum": {
            "name": "TestResultsContextType",
            "values": [
              {
                "value": "build",
                "description": ""
              },
              {
                "value": "release",
                "description": ""
              },
              {
                "value": "pipeline",
                "description": ""
              }
            ]
          }
        },
        "pipelineReference": {
          "$ref": "#/definitions/PipelineReference"
        },
        "release": {
          "$ref": "#/definitions/ReleaseReference"
        }
      }
    },
    "Timeline": {
      "description": "Represents the timeline of a build.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/TimelineReference"
        }
      ],
      "properties": {
        "lastChangedBy": {
          "description": "The process or person that last changed the timeline.",
          "type": "string",
          "format": "uuid"
        },
        "lastChangedOn": {
          "description": "The time the timeline was last changed.",
          "type": "string",
          "format": "date-time"
        },
        "records": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimelineRecord"
          }
        }
      }
    },
    "TimelineAttempt": {
      "description": "",
      "type": "object",
      "properties": {
        "attempt": {
          "description": "Gets or sets the attempt of the record.",
          "type": "integer",
          "format": "int32"
        },
        "recordId": {
          "description": "Gets or sets the record identifier located within the specified timeline.",
          "type": "string",
          "format": "uuid"
        },
        "timelineId": {
          "description": "Gets or sets the timeline identifier which owns the record representing this attempt.",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "TimelineRecord": {
      "description": "Represents an entry in a build's timeline.",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "attempt": {
          "description": "Attempt number of record.",
          "type": "integer",
          "format": "int32"
        },
        "changeId": {
          "description": "The change ID.",
          "type": "integer",
          "format": "int32"
        },
        "currentOperation": {
          "description": "A string that indicates the current operation.",
          "type": "string"
        },
        "details": {
          "description": "A reference to a sub-timeline.",
          "$ref": "#/definitions/TimelineReference"
        },
        "errorCount": {
          "description": "The number of errors produced by this operation.",
          "type": "integer",
          "format": "int32"
        },
        "finishTime": {
          "description": "The finish time.",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "The ID of the record.",
          "type": "string",
          "format": "uuid"
        },
        "identifier": {
          "description": "String identifier that is consistent across attempts.",
          "type": "string"
        },
        "issues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Issue"
          }
        },
        "lastModified": {
          "description": "The time the record was last modified.",
          "type": "string",
          "format": "date-time"
        },
        "log": {
          "description": "A reference to the log produced by this operation.",
          "$ref": "#/definitions/BuildLogReference"
        },
        "name": {
          "description": "The name.",
          "type": "string"
        },
        "order": {
          "description": "An ordinal value relative to other records.",
          "type": "integer",
          "format": "int32"
        },
        "parentId": {
          "description": "The ID of the record's parent.",
          "type": "string",
          "format": "uuid"
        },
        "percentComplete": {
          "description": "The current completion percentage.",
          "type": "integer",
          "format": "int32"
        },
        "previousAttempts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimelineAttempt"
          }
        },
        "queueId": {
          "description": "The queue ID of the queue that the operation ran on.",
          "type": "integer",
          "format": "int32"
        },
        "result": {
          "description": "The result.",
          "enum": [
            "succeeded",
            "succeededWithIssues",
            "failed",
            "canceled",
            "skipped",
            "abandoned"
          ],
          "x-ms-enum": {
            "name": "TaskResult",
            "values": [
              {
                "value": "succeeded",
                "description": ""
              },
              {
                "value": "succeededWithIssues",
                "description": ""
              },
              {
                "value": "failed",
                "description": ""
              },
              {
                "value": "canceled",
                "description": ""
              },
              {
                "value": "skipped",
                "description": ""
              },
              {
                "value": "abandoned",
                "description": ""
              }
            ]
          }
        },
        "resultCode": {
          "description": "The result code.",
          "type": "string"
        },
        "startTime": {
          "description": "The start time.",
          "type": "string",
          "format": "date-time"
        },
        "state": {
          "description": "The state of the record.",
          "enum": [
            "pending",
            "inProgress",
            "completed"
          ],
          "x-ms-enum": {
            "name": "TimelineRecordState",
            "values": [
              {
                "value": "pending",
                "description": ""
              },
              {
                "value": "inProgress",
                "description": ""
              },
              {
                "value": "completed",
                "description": ""
              }
            ]
          }
        },
        "task": {
          "description": "A reference to the task represented by this timeline record.",
          "$ref": "#/definitions/TaskReference"
        },
        "type": {
          "description": "The type of the record.",
          "type": "string"
        },
        "url": {
          "description": "The REST URL of the timeline record.",
          "type": "string"
        },
        "warningCount": {
          "description": "The number of warnings produced by this operation.",
          "type": "integer",
          "format": "int32"
        },
        "workerName": {
          "description": "The name of the agent running the operation.",
          "type": "string"
        }
      }
    },
    "TimelineRecordsUpdatedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RealtimeBuildEvent"
        }
      ],
      "properties": {
        "timelineRecords": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimelineRecord"
          }
        }
      }
    },
    "TimelineReference": {
      "description": "Represents a reference to a timeline.",
      "type": "object",
      "properties": {
        "changeId": {
          "description": "The change ID.",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "The ID of the timeline.",
          "type": "string",
          "format": "uuid"
        },
        "url": {
          "description": "The REST URL of the timeline.",
          "type": "string"
        }
      }
    },
    "UpdateProjectRetentionSettingModel": {
      "description": "Contains members for updating the retention settings values. All fields are optional.",
      "type": "object",
      "properties": {
        "artifactsRetention": {
          "$ref": "#/definitions/UpdateRetentionSettingModel"
        },
        "pullRequestRunRetention": {
          "$ref": "#/definitions/UpdateRetentionSettingModel"
        },
        "retainRunsPerProtectedBranch": {
          "$ref": "#/definitions/UpdateRetentionSettingModel"
        },
        "runRetention": {
          "$ref": "#/definitions/UpdateRetentionSettingModel"
        }
      }
    },
    "UpdateRetentionSettingModel": {
      "description": "",
      "type": "object",
      "properties": {
        "value": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "UpdateStageParameters": {
      "description": "",
      "type": "object",
      "properties": {
        "forceRetryAllJobs": {
          "type": "boolean"
        },
        "state": {
          "enum": [
            "cancel",
            "retry"
          ],
          "x-ms-enum": {
            "name": "StageUpdateType",
            "values": [
              {
                "value": "cancel",
                "description": ""
              },
              {
                "value": "retry",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "UpdateTagParameters": {
      "description": "",
      "type": "object",
      "properties": {
        "tagsToAdd": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tagsToRemove": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "VariableGroup": {
      "description": "Represents a variable group.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/VariableGroupReference"
        }
      ],
      "properties": {
        "description": {
          "description": "The description.",
          "type": "string"
        },
        "name": {
          "description": "The name of the variable group.",
          "type": "string"
        },
        "type": {
          "description": "The type of the variable group.",
          "type": "string"
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/BuildDefinitionVariable"
          }
        }
      }
    },
    "VariableGroupReference": {
      "description": "Represents a reference to a variable group.",
      "type": "object",
      "properties": {
        "alias": {
          "description": "The Name of the variable group.",
          "type": "string"
        },
        "id": {
          "description": "The ID of the variable group.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "VariableMultipliersAgentExecutionOptions": {
      "description": "Represents options for running a phase based on values specified by a list of variables.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AgentTargetExecutionOptions"
        }
      ],
      "properties": {
        "continueOnError": {
          "description": "Indicates whether failure on one agent should prevent the phase from running on other agents.",
          "type": "boolean"
        },
        "maxConcurrency": {
          "description": "The maximum number of agents to use in parallel.",
          "type": "integer",
          "format": "int32"
        },
        "multipliers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "VariableMultipliersServerExecutionOptions": {
      "description": "Represents options for running a phase based on values specified by a list of variables.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ServerTargetExecutionOptions"
        }
      ],
      "properties": {
        "continueOnError": {
          "description": "Indicates whether failure of one job should prevent the phase from running in other jobs.",
          "type": "boolean"
        },
        "maxConcurrency": {
          "description": "The maximum number of server jobs to run in parallel.",
          "type": "integer",
          "format": "int32"
        },
        "multipliers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "VssJsonCollectionWrapper": {
      "description": "This class is used to serialize collections as a single JSON object on the wire.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/VssJsonCollectionWrapperBase"
        }
      ],
      "properties": {
        "value": {
          "description": "The serialized item.",
          "type": "string",
          "format": "T"
        }
      }
    },
    "VssJsonCollectionWrapperBase": {
      "description": "",
      "type": "object",
      "properties": {
        "count": {
          "description": "The number of serialized items.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "WebApiConnectedServiceRef": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "WorkspaceMapping": {
      "description": "Mapping for a workspace",
      "type": "object",
      "properties": {
        "definitionUri": {
          "description": "Uri of the associated definition",
          "type": "string"
        },
        "depth": {
          "description": "Depth of this mapping",
          "type": "integer",
          "format": "int32"
        },
        "localItem": {
          "description": "local location of the definition",
          "type": "string"
        },
        "mappingType": {
          "description": "type of workspace mapping",
          "enum": [
            "map",
            "cloak"
          ],
          "x-ms-enum": {
            "name": "WorkspaceMappingType",
            "values": [
              {
                "value": "map",
                "description": "The path is mapped in the workspace."
              },
              {
                "value": "cloak",
                "description": "The path is cloaked in the workspace."
              }
            ]
          }
        },
        "serverItem": {
          "description": "Server location of the definition",
          "type": "string"
        },
        "workspaceId": {
          "description": "Id of the workspace",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "WorkspaceTemplate": {
      "description": "",
      "type": "object",
      "properties": {
        "definitionUri": {
          "description": "Uri of the associated definition",
          "type": "string"
        },
        "lastModifiedBy": {
          "description": "The identity that last modified this template",
          "type": "string"
        },
        "lastModifiedDate": {
          "description": "The last time this template was modified",
          "type": "string",
          "format": "date-time"
        },
        "mappings": {
          "description": "List of workspace mappings",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkspaceMapping"
          }
        },
        "workspaceId": {
          "description": "Id of the workspace for this template",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "XamlBuildControllerReference": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of the resource",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name of the linked resource (definition name, controller name, etc.)",
          "type": "string"
        },
        "url": {
          "description": "Full http link to the resource",
          "type": "string"
        }
      }
    },
    "XamlBuildDefinition": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DefinitionReference"
        }
      ],
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "batchSize": {
          "description": "Batch size of the definition",
          "type": "integer",
          "format": "int32"
        },
        "buildArgs": {
          "type": "string"
        },
        "continuousIntegrationQuietPeriod": {
          "description": "The continuous integration quiet period",
          "type": "integer",
          "format": "int32"
        },
        "controller": {
          "description": "The build controller",
          "$ref": "#/definitions/BuildController"
        },
        "createdOn": {
          "description": "The date this definition was created",
          "type": "string",
          "format": "date-time"
        },
        "defaultDropLocation": {
          "description": "Default drop location for builds from this definition",
          "type": "string"
        },
        "description": {
          "description": "Description of the definition",
          "type": "string"
        },
        "lastBuild": {
          "description": "The last build on this definition",
          "$ref": "#/definitions/XamlBuildReference"
        },
        "repository": {
          "description": "The repository",
          "$ref": "#/definitions/BuildRepository"
        },
        "supportedReasons": {
          "description": "The reasons supported by the template",
          "enum": [
            "none",
            "manual",
            "individualCI",
            "batchedCI",
            "schedule",
            "scheduleForced",
            "userCreated",
            "validateShelveset",
            "checkInShelveset",
            "pullRequest",
            "buildCompletion",
            "resourceTrigger",
            "triggered",
            "all"
          ],
          "x-ms-enum": {
            "name": "BuildReason",
            "values": [
              {
                "value": "none",
                "description": "No reason. This value should not be used."
              },
              {
                "value": "manual",
                "description": "The build was started manually."
              },
              {
                "value": "individualCI",
                "description": "The build was started for the trigger TriggerType.ContinuousIntegration."
              },
              {
                "value": "batchedCI",
                "description": "The build was started for the trigger TriggerType.BatchedContinuousIntegration."
              },
              {
                "value": "schedule",
                "description": "The build was started for the trigger TriggerType.Schedule."
              },
              {
                "value": "scheduleForced",
                "description": "The build was started for the trigger TriggerType.ScheduleForced."
              },
              {
                "value": "userCreated",
                "description": "The build was created by a user."
              },
              {
                "value": "validateShelveset",
                "description": "The build was started manually for private validation."
              },
              {
                "value": "checkInShelveset",
                "description": "The build was started for the trigger ContinuousIntegrationType.Gated."
              },
              {
                "value": "pullRequest",
                "description": "The build was started by a pull request. Added in resource version 3."
              },
              {
                "value": "buildCompletion",
                "description": "The build was started when another build completed."
              },
              {
                "value": "resourceTrigger",
                "description": "The build was started when resources in pipeline triggered it"
              },
              {
                "value": "triggered",
                "description": "The build was triggered for retention policy purposes."
              },
              {
                "value": "all",
                "description": "All reasons."
              }
            ]
          }
        },
        "triggerType": {
          "description": "How builds are triggered from this definition",
          "enum": [
            "none",
            "continuousIntegration",
            "batchedContinuousIntegration",
            "schedule",
            "gatedCheckIn",
            "batchedGatedCheckIn",
            "pullRequest",
            "buildCompletion",
            "all"
          ],
          "x-ms-enum": {
            "name": "DefinitionTriggerType",
            "values": [
              {
                "value": "none",
                "description": "Manual builds only."
              },
              {
                "value": "continuousIntegration",
                "description": "A build should be started for each changeset."
              },
              {
                "value": "batchedContinuousIntegration",
                "description": "A build should be started for multiple changesets at a time at a specified interval."
              },
              {
                "value": "schedule",
                "description": "A build should be started on a specified schedule whether or not changesets exist."
              },
              {
                "value": "gatedCheckIn",
                "description": "A validation build should be started for each check-in."
              },
              {
                "value": "batchedGatedCheckIn",
                "description": "A validation build should be started for each batch of check-ins."
              },
              {
                "value": "pullRequest",
                "description": "A build should be triggered when a GitHub pull request is created or updated. Added in resource version 3"
              },
              {
                "value": "buildCompletion",
                "description": "A build should be triggered when another build completes."
              },
              {
                "value": "all",
                "description": "All types."
              }
            ]
          }
        }
      }
    },
    "XamlBuildReference": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of the resource",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name of the linked resource (definition name, controller name, etc.)",
          "type": "string"
        },
        "url": {
          "description": "Full http link to the resource",
          "type": "string"
        }
      }
    },
    "XamlBuildServerReference": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of the resource",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name of the linked resource (definition name, controller name, etc.)",
          "type": "string"
        },
        "url": {
          "description": "Full http link to the resource",
          "type": "string"
        }
      }
    },
    "XamlDefinitionReference": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "description": "Id of the resource",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Name of the linked resource (definition name, controller name, etc.)",
          "type": "string"
        },
        "url": {
          "description": "Full http link to the resource",
          "type": "string"
        }
      }
    },
    "YamlBuild": {
      "description": "Represents a yaml build.",
      "type": "object",
      "properties": {
        "yaml": {
          "description": "The yaml used to define the build",
          "type": "string"
        }
      }
    },
    "YamlProcess": {
      "description": "Represents a YAML process.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BuildProcess"
        }
      ],
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resources": {
          "description": "The resources used by the build definition.",
          "$ref": "#/definitions/BuildProcessResources"
        },
        "yamlFilename": {
          "description": "The YAML filename.",
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "api-Version": {
      "name": "api-version",
      "in": "query",
      "description": "Version of the API to use.  This should be set to '7.1' to use this version of the api.",
      "required": true,
      "type": "string"
    },
    "api-Version-preview.1": {
      "name": "api-version",
      "in": "query",
      "description": "Version of the API to use.  This should be set to '7.1-preview.1' to use this version of the api.",
      "required": true,
      "type": "string"
    },
    "api-Version-preview.2": {
      "name": "api-version",
      "in": "query",
      "description": "Version of the API to use.  This should be set to '7.1-preview.2' to use this version of the api.",
      "required": true,
      "type": "string"
    }
  },
  "securityDefinitions": {
    "accessToken": {
      "type": "basic",
      "description": "Personal access token. Use any value for the user name and the token as the password."
    },
    "oauth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://app.vssps.visualstudio.com/oauth2/authorize&response_type=Assertion",
      "tokenUrl": "https://app.vssps.visualstudio.com/oauth2/token?client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer&grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer",
      "scopes": {
        "vso.build": "Grants the ability to access build artifacts, including build results, definitions, and requests, and the ability to receive notifications about build events via service hooks.",
        "vso.build_execute": "Grants the ability to access build artifacts, including build results, definitions, and requests, and the ability to queue a build, update build properties, and the ability to receive notifications about build events via service hooks.",
        "vso.work": "Grants the ability to read work items, queries, boards, area and iterations paths, and other work item tracking related metadata. Also grants the ability to execute queries, search work items and to receive notifications about work item events via service hooks.",
        "vso.project": "Grants the ability to read projects and teams.",
        "vso.project_write": "Grants the ability to read and update projects and teams.",
        "vso.pipelineresources_manage": "Grants the ability to manage a protected resource or a pipeline's request to use a protected resource: agent pool, environment, queue, repository, secure files, service connection, and variable group"
      }
    }
  },
  "security": [
    {
      "accessToken": []
    }
  ],
  "externalDocs": {
    "description": "Azure DevOps REST APIs",
    "url": "https://aka.ms/azure-devops-rest-apis"
  },
  "x-ms-parameterized-host": {
    "hostTemplate": "https://{instance}",
    "parameters": [
      {
        "name": "instance",
        "description": "TFS server name ({server:port})",
        "required": true,
        "type": "string",
        "in": "path"
      }
    ]
  }
}