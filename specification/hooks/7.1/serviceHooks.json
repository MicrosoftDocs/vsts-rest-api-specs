{
  "swagger": "2.0",
  "info": {
    "title": "ServiceHooks",
    "description": "",
    "termsOfService": "https://go.microsoft.com/fwlink/?LinkId=329770",
    "contact": {
      "name": "nugetvss",
      "email": "nugetvss@microsoft.com"
    },
    "license": {
      "name": "MICROSOFT SOFTWARE LICENSE TERMS",
      "url": "https://go.microsoft.com/fwlink/?LinkId=329770"
    },
    "version": "7.1"
  },
  "host": "dev.azure.com",
  "x-ms-vss-area": "ServiceHooks",
  "basePath": "/",
  "tags": [
    {
      "name": "Consumers"
    },
    {
      "name": "Diagnostics"
    },
    {
      "name": "Notifications"
    },
    {
      "name": "Publishers"
    },
    {
      "name": "Subscriptions"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/{organization}/_apis/hooks/consumers": {
      "get": {
        "tags": [
          "Consumers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "consumers",
        "x-ms-vss-method": "ListConsumers",
        "description": "Get a list of available service hook consumer services. Optionally filter by consumers that support at least one event type from the specific publisher.",
        "operationId": "Consumers_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "publisherId",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Consumer"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.work",
              "vso.build",
              "vso.code"
            ]
          }
        ],
        "x-ms-examples": {
          "": {
            "$ref": "./httpExamples/Consumers/GET__hooks_consumers.json"
          }
        }
      }
    },
    "/{organization}/_apis/hooks/consumers/{consumerId}": {
      "get": {
        "tags": [
          "Consumers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "consumers",
        "x-ms-vss-method": "GetConsumer",
        "description": "Get a specific consumer service. Optionally filter out consumer actions that do not support any event types for the specified publisher.",
        "operationId": "Consumers_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "consumerId",
            "description": "ID for a consumer.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "publisherId",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Consumer"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.work",
              "vso.build",
              "vso.code"
            ]
          }
        ],
        "x-ms-examples": {
          "": {
            "$ref": "./httpExamples/Consumers/GET__hooks_consumers__consumerId_.json"
          }
        }
      }
    },
    "/{organization}/_apis/hooks/consumers/{consumerId}/actions": {
      "get": {
        "tags": [
          "Consumers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "actions",
        "x-ms-vss-method": "ListConsumerActions",
        "description": "Get a list of consumer actions for a specific consumer.",
        "operationId": "Consumers_List Consumer Actions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "consumerId",
            "description": "ID for a consumer.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "publisherId",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConsumerAction"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.work",
              "vso.build",
              "vso.code"
            ]
          }
        ],
        "x-ms-examples": {
          "": {
            "$ref": "./httpExamples/Actions/GET__hooks_consumers__consumerId__actions.json"
          }
        }
      }
    },
    "/{organization}/_apis/hooks/consumers/{consumerId}/actions/{consumerActionId}": {
      "get": {
        "tags": [
          "Consumers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "actions",
        "x-ms-vss-method": "GetConsumerAction",
        "description": "Get details about a specific consumer action.",
        "operationId": "Consumers_Get Consumer Action",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "consumerId",
            "description": "ID for a consumer.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "consumerActionId",
            "description": "ID for a consumerActionId.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "publisherId",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ConsumerAction"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.work",
              "vso.build",
              "vso.code"
            ]
          }
        ],
        "x-ms-examples": {
          "": {
            "$ref": "./httpExamples/Actions/GET__hooks_consumers__consumerId__actions__consumerActionId_.json"
          }
        }
      }
    },
    "/{organization}/_apis/hooks/notificationsquery": {
      "post": {
        "tags": [
          "Notifications"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "notificationsQuery",
        "x-ms-vss-method": "QueryNotifications",
        "description": "Query for notifications. A notification includes details about the event, the request to and the response from the consumer service.",
        "operationId": "Notifications_Query",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationsQuery"
            }
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NotificationsQuery"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.work",
              "vso.build",
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/_apis/hooks/publishers": {
      "get": {
        "tags": [
          "Publishers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "publishers",
        "x-ms-vss-method": "ListPublishers",
        "description": "Get a list of publishers.",
        "operationId": "Publishers_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Publisher"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.work",
              "vso.build",
              "vso.code"
            ]
          }
        ],
        "x-ms-examples": {
          "": {
            "$ref": "./httpExamples/Publishers/GET__hooks_publishers.json"
          }
        }
      }
    },
    "/{organization}/_apis/hooks/publishers/{publisherId}": {
      "get": {
        "tags": [
          "Publishers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "publishers",
        "x-ms-vss-method": "GetPublisher",
        "description": "Get a specific service hooks publisher.",
        "operationId": "Publishers_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "publisherId",
            "description": "ID for a publisher.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Publisher"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.work",
              "vso.build",
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/_apis/hooks/publishers/{publisherId}/eventtypes": {
      "get": {
        "tags": [
          "Publishers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "eventTypes",
        "x-ms-vss-method": "ListEventTypes",
        "description": "Get the event types for a specific publisher.",
        "operationId": "Publishers_List Event Types",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "publisherId",
            "description": "ID for a publisher.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EventTypeDescriptor"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.work",
              "vso.build",
              "vso.code"
            ]
          }
        ],
        "x-ms-examples": {
          "": {
            "$ref": "./httpExamples/EventTypes/GET__hooks_publishers__publisherId__eventTypes.json"
          }
        }
      }
    },
    "/{organization}/_apis/hooks/publishers/{publisherId}/eventtypes/{eventTypeId}": {
      "get": {
        "tags": [
          "Publishers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "eventTypes",
        "x-ms-vss-method": "GetEventType",
        "description": "Get a specific event type.",
        "operationId": "Publishers_Get Event Type",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "publisherId",
            "description": "ID for a publisher.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "eventTypeId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EventTypeDescriptor"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.work",
              "vso.build",
              "vso.code"
            ]
          }
        ],
        "x-ms-examples": {
          "": {
            "$ref": "./httpExamples/EventTypes/GET__hooks_publishers__publisherId__eventTypes__eventTypeId_.json"
          }
        }
      }
    },
    "/{organization}/_apis/hooks/publishers/{publisherId}/inputValuesQuery": {
      "post": {
        "tags": [
          "Publishers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "publisherInputValuesQuery",
        "x-ms-vss-method": "QueryInputValues",
        "description": "",
        "operationId": "Publishers_Query Input Values",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InputValuesQuery"
            }
          },
          {
            "in": "path",
            "name": "publisherId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/InputValuesQuery"
            }
          }
        }
      }
    },
    "/{organization}/_apis/hooks/publishersquery": {
      "post": {
        "tags": [
          "Publishers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "publishersQuery",
        "x-ms-vss-method": "QueryPublishers",
        "description": "Query for service hook publishers.",
        "operationId": "Publishers_Query Publishers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PublishersQuery"
            }
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PublishersQuery"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.work",
              "vso.build",
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/_apis/hooks/subscriptions": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "subscriptions",
        "x-ms-vss-method": "CreateSubscription",
        "description": "Create a subscription.",
        "operationId": "Subscriptions_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Subscription to be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.work",
              "vso.build",
              "vso.code"
            ]
          }
        ],
        "x-ms-examples": {
          "": {
            "$ref": "./httpExamples/Subscriptions/PUT__hooks_subscriptions__newSubscriptionId_.json"
          }
        }
      },
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "subscriptions",
        "x-ms-vss-method": "ListSubscriptions",
        "description": "Get a list of subscriptions.",
        "operationId": "Subscriptions_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "publisherId",
            "description": "ID for a subscription.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "eventType",
            "description": "The event type to filter on (if any).",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "consumerId",
            "description": "ID for a consumer.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "consumerActionId",
            "description": "ID for a consumerActionId.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Subscription"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.work",
              "vso.build",
              "vso.code"
            ]
          }
        ],
        "x-ms-examples": {
          "": {
            "$ref": "./httpExamples/Subscriptions/GET__hooks_subscriptions_.json"
          }
        }
      }
    },
    "/{organization}/_apis/hooks/subscriptions/{subscriptionId}": {
      "delete": {
        "tags": [
          "Subscriptions"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "subscriptions",
        "x-ms-vss-method": "DeleteSubscription",
        "description": "Delete a specific service hooks subscription.",
        "operationId": "Subscriptions_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "ID for a subscription.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.work",
              "vso.build",
              "vso.code"
            ]
          }
        ],
        "x-ms-examples": {
          "": {
            "$ref": "./httpExamples/Subscriptions/DELETE__hooks_subscriptions__newSubscriptionId_.json"
          }
        }
      },
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "subscriptions",
        "x-ms-vss-method": "GetSubscription",
        "description": "Get a specific service hooks subscription.",
        "operationId": "Subscriptions_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "ID for a subscription.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.work",
              "vso.build",
              "vso.code"
            ]
          }
        ],
        "x-ms-examples": {
          "": {
            "$ref": "./httpExamples/Subscriptions/GET__hooks_subscriptions__subscriptionId_.json"
          }
        }
      },
      "put": {
        "tags": [
          "Subscriptions"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "subscriptions",
        "x-ms-vss-method": "ReplaceSubscription",
        "description": "Update a subscription. <param name=\"subscriptionId\">ID for a subscription that you wish to update.</param>",
        "operationId": "Subscriptions_Replace Subscription",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "",
            "required": true,
            "x-ms-required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.work",
              "vso.build",
              "vso.code"
            ]
          }
        ],
        "x-ms-examples": {
          "": {
            "$ref": "./httpExamples/Subscriptions/POST__hooks_subscriptions.json"
          }
        }
      }
    },
    "/{organization}/_apis/hooks/subscriptions/{subscriptionId}/diagnostics": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "diagnostics",
        "x-ms-vss-method": "GetSubscriptionDiagnostics",
        "description": "",
        "operationId": "Diagnostics_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionDiagnostics"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.work",
              "vso.build",
              "vso.code"
            ]
          }
        ],
        "x-ms-examples": {
          "": {
            "$ref": "./httpExamples/Diagnostics/GET__notification_diagnostics.json"
          }
        }
      },
      "put": {
        "tags": [
          "Diagnostics"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "diagnostics",
        "x-ms-vss-method": "UpdateSubscriptionDiagnostics",
        "description": "",
        "operationId": "Diagnostics_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateSubscripitonDiagnosticsParameters"
            }
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionDiagnostics"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.work",
              "vso.build",
              "vso.code"
            ]
          }
        ],
        "x-ms-examples": {
          "": {
            "$ref": "./httpExamples/Diagnostics/PUT__notification_diagnostics.json"
          }
        }
      }
    },
    "/{organization}/_apis/hooks/subscriptions/{subscriptionId}/notifications": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "notifications",
        "x-ms-vss-method": "GetNotifications",
        "description": "Get a list of notifications for a specific subscription. A notification includes details about the event, the request to and the response from the consumer service.",
        "operationId": "Notifications_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "ID for a subscription.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "query",
            "name": "maxResults",
            "description": "Maximum number of notifications to return. Default is **100**.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "status",
            "description": "Get only notifications with this status.",
            "required": false,
            "type": "string",
            "enum": [
              "queued",
              "processing",
              "requestInProgress",
              "completed"
            ],
            "x-ms-enum": {
              "name": "NotificationStatus",
              "values": [
                {
                  "value": "queued",
                  "description": "The notification has been queued"
                },
                {
                  "value": "processing",
                  "description": "The notification has been dequeued and has begun processing."
                },
                {
                  "value": "requestInProgress",
                  "description": "The consumer action has processed the notification. The request is in progress."
                },
                {
                  "value": "completed",
                  "description": "The request completed"
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "result",
            "description": "Get only notifications with this result type.",
            "required": false,
            "type": "string",
            "enum": [
              "pending",
              "succeeded",
              "failed",
              "filtered"
            ],
            "x-ms-enum": {
              "name": "NotificationResult",
              "values": [
                {
                  "value": "pending",
                  "description": "The notification has not yet completed"
                },
                {
                  "value": "succeeded",
                  "description": "The notification was sent successfully"
                },
                {
                  "value": "failed",
                  "description": "The notification failed to be sent successfully to the consumer"
                },
                {
                  "value": "filtered",
                  "description": "The notification was filtered by the Delivery Job"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Notification"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.work",
              "vso.build",
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/_apis/hooks/subscriptions/{subscriptionId}/notifications/{notificationId}": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "notifications",
        "x-ms-vss-method": "GetNotification",
        "description": "Get a specific notification for a subscription.",
        "operationId": "Notifications_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "ID for a subscription.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "notificationId",
            "description": "",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.work",
              "vso.build",
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/_apis/hooks/subscriptionsquery": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "subscriptionsQuery",
        "x-ms-vss-method": "CreateSubscriptionsQuery",
        "description": "Query for service hook subscriptions.",
        "operationId": "Subscriptions_Create Subscriptions Query",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionsQuery"
            }
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionsQuery"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.work",
              "vso.build",
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/_apis/hooks/testnotifications": {
      "post": {
        "tags": [
          "Notifications"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "testNotifications",
        "x-ms-vss-method": "CreateTestNotification",
        "description": "Sends a test notification. This is useful for verifying the configuration of an updated or new service hooks subscription.",
        "operationId": "Notifications_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          },
          {
            "in": "query",
            "name": "useRealData",
            "description": "Only allow testing with real data in existing subscriptions.",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.work",
              "vso.build",
              "vso.code"
            ]
          }
        ]
      }
    }
  },
  "definitions": {
    "Consumer": {
      "description": "Defines the data contract of a consumer.",
      "type": "object",
      "properties": {
        "_links": {
          "description": "Reference Links",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "actions": {
          "description": "Gets this consumer's actions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConsumerAction"
          }
        },
        "authenticationType": {
          "description": "Gets or sets this consumer's authentication type.",
          "enum": [
            "none",
            "oAuth",
            "external"
          ],
          "x-ms-enum": {
            "name": "AuthenticationType",
            "values": [
              {
                "value": "none",
                "description": "No authentication is required."
              },
              {
                "value": "oAuth",
                "description": "OAuth authentication."
              },
              {
                "value": "external",
                "description": "Externally-configured authentication."
              }
            ]
          }
        },
        "description": {
          "description": "Gets or sets this consumer's localized description.",
          "type": "string"
        },
        "externalConfiguration": {
          "description": "Non-null only if subscriptions for this consumer are configured externally.",
          "$ref": "#/definitions/ExternalConfigurationDescriptor"
        },
        "id": {
          "description": "Gets or sets this consumer's identifier.",
          "type": "string"
        },
        "imageUrl": {
          "description": "Gets or sets this consumer's image URL, if any.",
          "type": "string"
        },
        "informationUrl": {
          "description": "Gets or sets this consumer's information URL, if any.",
          "type": "string"
        },
        "inputDescriptors": {
          "description": "Gets or sets this consumer's input descriptors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputDescriptor"
          }
        },
        "name": {
          "description": "Gets or sets this consumer's localized name.",
          "type": "string"
        },
        "url": {
          "description": "The url for this resource",
          "type": "string"
        }
      }
    },
    "ConsumerAction": {
      "description": "Defines the data contract of a consumer action.",
      "type": "object",
      "properties": {
        "_links": {
          "description": "Reference Links",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "allowResourceVersionOverride": {
          "description": "Gets or sets the flag indicating if resource version can be overridden when creating or editing a subscription.",
          "type": "boolean"
        },
        "consumerId": {
          "description": "Gets or sets the identifier of the consumer to which this action belongs.",
          "type": "string"
        },
        "description": {
          "description": "Gets or sets this action's localized description.",
          "type": "string"
        },
        "id": {
          "description": "Gets or sets this action's identifier.",
          "type": "string"
        },
        "inputDescriptors": {
          "description": "Gets or sets this action's input descriptors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputDescriptor"
          }
        },
        "name": {
          "description": "Gets or sets this action's localized name.",
          "type": "string"
        },
        "supportedEventTypes": {
          "description": "Gets or sets this action's supported event identifiers.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "supportedResourceVersions": {
          "description": "Gets or sets this action's supported resource versions.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "url": {
          "description": "The url for this resource",
          "type": "string"
        }
      }
    },
    "Event": {
      "description": "Encapsulates the properties of an event.",
      "type": "object",
      "properties": {
        "createdDate": {
          "description": "Gets or sets the UTC-based date and time that this event was created.",
          "type": "string",
          "format": "date-time"
        },
        "detailedMessage": {
          "description": "Gets or sets the detailed message associated with this event.",
          "$ref": "#/definitions/FormattedEventMessage"
        },
        "eventType": {
          "description": "Gets or sets the type of this event.",
          "type": "string"
        },
        "id": {
          "description": "Gets or sets the unique identifier of this event.",
          "type": "string",
          "format": "uuid"
        },
        "message": {
          "description": "Gets or sets the (brief) message associated with this event.",
          "$ref": "#/definitions/FormattedEventMessage"
        },
        "publisherId": {
          "description": "Gets or sets the identifier of the publisher that raised this event.",
          "type": "string"
        },
        "resource": {
          "description": "Gets or sets the data associated with this event.",
          "type": "object"
        },
        "resourceContainers": {
          "description": "Gets or sets the resource containers.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ResourceContainer"
          }
        },
        "resourceVersion": {
          "description": "Gets or sets the version of the data associated with this event.",
          "type": "string"
        },
        "sessionToken": {
          "description": "Gets or sets the Session Token that can be used in further interactions",
          "$ref": "#/definitions/SessionToken"
        }
      }
    },
    "EventTypeDescriptor": {
      "description": "Describes a type of event",
      "type": "object",
      "properties": {
        "description": {
          "description": "A localized description of the event type",
          "type": "string"
        },
        "id": {
          "description": "A unique id for the event type",
          "type": "string"
        },
        "inputDescriptors": {
          "description": "Event-specific inputs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputDescriptor"
          }
        },
        "name": {
          "description": "A localized friendly name for the event type",
          "type": "string"
        },
        "publisherId": {
          "description": "A unique id for the publisher of this event type",
          "type": "string"
        },
        "supportedResourceVersions": {
          "description": "Supported versions for the event's resource payloads.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "url": {
          "description": "The url for this resource",
          "type": "string"
        }
      }
    },
    "ExternalConfigurationDescriptor": {
      "description": "Describes how to configure a subscription that is managed externally.",
      "type": "object",
      "properties": {
        "createSubscriptionUrl": {
          "description": "Url of the site to create this type of subscription.",
          "type": "string"
        },
        "editSubscriptionPropertyName": {
          "description": "The name of an input property that contains the URL to edit a subscription.",
          "type": "string"
        },
        "hostedOnly": {
          "description": "True if the external configuration applies only to hosted.",
          "type": "boolean"
        }
      }
    },
    "FormattedEventMessage": {
      "description": "Provides different formats of an event message",
      "type": "object",
      "properties": {
        "html": {
          "description": "Gets or sets the html format of the message",
          "type": "string"
        },
        "markdown": {
          "description": "Gets or sets the markdown format of the message",
          "type": "string"
        },
        "text": {
          "description": "Gets or sets the raw text of the message",
          "type": "string"
        }
      }
    },
    "GraphSubjectBase": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "description": "This field contains zero or more interesting links about the graph subject. These links may be invoked to obtain additional relationships or more detailed information about this graph subject.",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "descriptor": {
          "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.",
          "type": "string"
        },
        "displayName": {
          "description": "This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.",
          "type": "string"
        },
        "url": {
          "description": "This url is the full route to the source resource of this graph subject.",
          "type": "string"
        }
      }
    },
    "IdentityRef": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GraphSubjectBase"
        }
      ],
      "properties": {
        "directoryAlias": {
          "description": "Deprecated - Can be retrieved by querying the Graph user referenced in the \"self\" entry of the IdentityRef \"_links\" dictionary",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "imageUrl": {
          "description": "Deprecated - Available in the \"avatar\" entry of the IdentityRef \"_links\" dictionary",
          "type": "string"
        },
        "inactive": {
          "description": "Deprecated - Can be retrieved by querying the Graph membership state referenced in the \"membershipState\" entry of the GraphUser \"_links\" dictionary",
          "type": "boolean"
        },
        "isAadIdentity": {
          "description": "Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsAadUserType/Descriptor.IsAadGroupType)",
          "type": "boolean"
        },
        "isContainer": {
          "description": "Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsGroupType)",
          "type": "boolean"
        },
        "isDeletedInOrigin": {
          "type": "boolean"
        },
        "profileUrl": {
          "description": "Deprecated - not in use in most preexisting implementations of ToIdentityRef",
          "type": "string"
        },
        "uniqueName": {
          "description": "Deprecated - use Domain+PrincipalName instead",
          "type": "string"
        }
      }
    },
    "InputDescriptor": {
      "description": "Describes an input for subscriptions.",
      "type": "object",
      "properties": {
        "dependencyInputIds": {
          "description": "The ids of all inputs that the value of this input is dependent on.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "description": "Description of what this input is used for",
          "type": "string"
        },
        "groupName": {
          "description": "The group localized name to which this input belongs and can be shown as a header for the container that will include all the inputs in the group.",
          "type": "string"
        },
        "hasDynamicValueInformation": {
          "description": "If true, the value information for this input is dynamic and should be fetched when the value of dependency inputs change.",
          "type": "boolean"
        },
        "id": {
          "description": "Identifier for the subscription input",
          "type": "string"
        },
        "inputMode": {
          "description": "Mode in which the value of this input should be entered",
          "enum": [
            "none",
            "textBox",
            "passwordBox",
            "combo",
            "radioButtons",
            "checkBox",
            "textArea"
          ],
          "x-ms-enum": {
            "name": "InputMode",
            "values": [
              {
                "value": "none",
                "description": "This input should not be shown in the UI"
              },
              {
                "value": "textBox",
                "description": "An input text box should be shown"
              },
              {
                "value": "passwordBox",
                "description": "An password input box should be shown"
              },
              {
                "value": "combo",
                "description": "A select/combo control should be shown"
              },
              {
                "value": "radioButtons",
                "description": "Radio buttons should be shown"
              },
              {
                "value": "checkBox",
                "description": "Checkbox should be shown(for true/false values)"
              },
              {
                "value": "textArea",
                "description": "A multi-line text area should be shown"
              }
            ]
          }
        },
        "isConfidential": {
          "description": "Gets whether this input is confidential, such as for a password or application key",
          "type": "boolean"
        },
        "name": {
          "description": "Localized name which can be shown as a label for the subscription input",
          "type": "string"
        },
        "properties": {
          "description": "Custom properties for the input which can be used by the service provider",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "type": {
          "description": "Underlying data type for the input value. When this value is specified, InputMode, Validation and Values are optional.",
          "type": "string"
        },
        "useInDefaultDescription": {
          "description": "Gets whether this input is included in the default generated action description.",
          "type": "boolean"
        },
        "validation": {
          "description": "Information to use to validate this input's value",
          "$ref": "#/definitions/InputValidation"
        },
        "valueHint": {
          "description": "A hint for input value. It can be used in the UI as the input placeholder.",
          "type": "string"
        },
        "values": {
          "description": "Information about possible values for this input",
          "$ref": "#/definitions/InputValues"
        }
      }
    },
    "InputFilter": {
      "description": "Defines a filter for subscription inputs. The filter matches a set of inputs if any (one or more) of the groups evaluates to true.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Groups of input filter expressions. This filter matches a set of inputs if any (one or more) of the groups evaluates to true.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputFilterCondition"
          }
        }
      }
    },
    "InputFilterCondition": {
      "description": "An expression which can be applied to filter a list of subscription inputs",
      "type": "object",
      "properties": {
        "caseSensitive": {
          "description": "Whether or not to do a case sensitive match",
          "type": "boolean"
        },
        "inputId": {
          "description": "The Id of the input to filter on",
          "type": "string"
        },
        "inputValue": {
          "description": "The \"expected\" input value to compare with the actual input value",
          "type": "string"
        },
        "operator": {
          "description": "The operator applied between the expected and actual input value",
          "enum": [
            "equals",
            "notEquals"
          ],
          "x-ms-enum": {
            "name": "InputFilterOperator",
            "values": [
              {
                "value": "equals",
                "description": ""
              },
              {
                "value": "notEquals",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "InputValidation": {
      "description": "Describes what values are valid for a subscription input",
      "type": "object",
      "properties": {
        "dataType": {
          "description": "Gets or sets the data type to validate.",
          "enum": [
            "none",
            "string",
            "number",
            "boolean",
            "guid",
            "uri"
          ],
          "x-ms-enum": {
            "name": "InputDataType",
            "values": [
              {
                "value": "none",
                "description": "No data type is specified."
              },
              {
                "value": "string",
                "description": "Represents a textual value."
              },
              {
                "value": "number",
                "description": "Represents a numeric value."
              },
              {
                "value": "boolean",
                "description": "Represents a value of true or false."
              },
              {
                "value": "guid",
                "description": "Represents a Guid."
              },
              {
                "value": "uri",
                "description": "Represents a URI."
              }
            ]
          }
        },
        "isRequired": {
          "description": "Gets or sets if this is a required field.",
          "type": "boolean"
        },
        "maxLength": {
          "description": "Gets or sets the maximum length of this descriptor.",
          "type": "integer",
          "format": "int32"
        },
        "maxValue": {
          "description": "Gets or sets the minimum value for this descriptor.",
          "type": "string",
          "format": "decimal"
        },
        "minLength": {
          "description": "Gets or sets the minimum length of this descriptor.",
          "type": "integer",
          "format": "int32"
        },
        "minValue": {
          "description": "Gets or sets the minimum value for this descriptor.",
          "type": "string",
          "format": "decimal"
        },
        "pattern": {
          "description": "Gets or sets the pattern to validate.",
          "type": "string"
        },
        "patternMismatchErrorMessage": {
          "description": "Gets or sets the error on pattern mismatch.",
          "type": "string"
        }
      }
    },
    "InputValue": {
      "description": "Information about a single value for an input",
      "type": "object",
      "properties": {
        "data": {
          "description": "Any other data about this input",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "displayValue": {
          "description": "The text to show for the display of this value",
          "type": "string"
        },
        "value": {
          "description": "The value to store for this input",
          "type": "string"
        }
      }
    },
    "InputValues": {
      "description": "Information about the possible/allowed values for a given subscription input",
      "type": "object",
      "properties": {
        "defaultValue": {
          "description": "The default value to use for this input",
          "type": "string"
        },
        "error": {
          "description": "Errors encountered while computing dynamic values.",
          "$ref": "#/definitions/InputValuesError"
        },
        "inputId": {
          "description": "The id of the input",
          "type": "string"
        },
        "isDisabled": {
          "description": "Should this input be disabled",
          "type": "boolean"
        },
        "isLimitedToPossibleValues": {
          "description": "Should the value be restricted to one of the values in the PossibleValues (True) or are the values in PossibleValues just a suggestion (False)",
          "type": "boolean"
        },
        "isReadOnly": {
          "description": "Should this input be made read-only",
          "type": "boolean"
        },
        "possibleValues": {
          "description": "Possible values that this input can take",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputValue"
          }
        }
      }
    },
    "InputValuesError": {
      "description": "Error information related to a subscription input value.",
      "type": "object",
      "properties": {
        "message": {
          "description": "The error message.",
          "type": "string"
        }
      }
    },
    "InputValuesQuery": {
      "description": "",
      "type": "object",
      "properties": {
        "currentValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "inputValues": {
          "description": "The input values to return on input, and the result from the consumer on output.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputValues"
          }
        },
        "resource": {
          "description": "Subscription containing information about the publisher/consumer and the current input values",
          "type": "object"
        }
      }
    },
    "Notification": {
      "description": "Defines the data contract of the result of processing an event for a subscription.",
      "type": "object",
      "properties": {
        "createdDate": {
          "description": "Gets or sets date and time that this result was created.",
          "type": "string",
          "format": "date-time"
        },
        "details": {
          "description": "Details about this notification (if available)",
          "$ref": "#/definitions/NotificationDetails"
        },
        "eventId": {
          "description": "The event id associated with this notification",
          "type": "string",
          "format": "uuid"
        },
        "id": {
          "description": "The notification id",
          "type": "integer",
          "format": "int32"
        },
        "modifiedDate": {
          "description": "Gets or sets date and time that this result was last modified.",
          "type": "string",
          "format": "date-time"
        },
        "result": {
          "description": "Result of the notification",
          "enum": [
            "pending",
            "succeeded",
            "failed",
            "filtered"
          ],
          "x-ms-enum": {
            "name": "NotificationResult",
            "values": [
              {
                "value": "pending",
                "description": "The notification has not yet completed"
              },
              {
                "value": "succeeded",
                "description": "The notification was sent successfully"
              },
              {
                "value": "failed",
                "description": "The notification failed to be sent successfully to the consumer"
              },
              {
                "value": "filtered",
                "description": "The notification was filtered by the Delivery Job"
              }
            ]
          }
        },
        "status": {
          "description": "Status of the notification",
          "enum": [
            "queued",
            "processing",
            "requestInProgress",
            "completed"
          ],
          "x-ms-enum": {
            "name": "NotificationStatus",
            "values": [
              {
                "value": "queued",
                "description": "The notification has been queued"
              },
              {
                "value": "processing",
                "description": "The notification has been dequeued and has begun processing."
              },
              {
                "value": "requestInProgress",
                "description": "The consumer action has processed the notification. The request is in progress."
              },
              {
                "value": "completed",
                "description": "The request completed"
              }
            ]
          }
        },
        "subscriberId": {
          "description": "The subscriber Id  associated with this notification. This is the last identity who touched in the subscription. In case of test notifications it can be the tester if the subscription is not created yet.",
          "type": "string",
          "format": "uuid"
        },
        "subscriptionId": {
          "description": "The subscription id associated with this notification",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "NotificationDetails": {
      "description": "Defines the data contract of notification details.",
      "type": "object",
      "properties": {
        "completedDate": {
          "description": "Gets or sets the time that this notification was completed (response received from the consumer)",
          "type": "string",
          "format": "date-time"
        },
        "consumerActionId": {
          "description": "Gets or sets this notification detail's consumer action identifier.",
          "type": "string"
        },
        "consumerId": {
          "description": "Gets or sets this notification detail's consumer identifier.",
          "type": "string"
        },
        "consumerInputs": {
          "description": "Gets or sets this notification detail's consumer inputs.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "dequeuedDate": {
          "description": "Gets or sets the time that this notification was dequeued for processing",
          "type": "string",
          "format": "date-time"
        },
        "errorDetail": {
          "description": "Gets or sets this notification detail's error detail.",
          "type": "string"
        },
        "errorMessage": {
          "description": "Gets or sets this notification detail's error message.",
          "type": "string"
        },
        "event": {
          "description": "Gets or sets this notification detail's event content.",
          "$ref": "#/definitions/Event"
        },
        "eventType": {
          "description": "Gets or sets this notification detail's event type.",
          "type": "string"
        },
        "processedDate": {
          "description": "Gets or sets the time that this notification was finished processing (just before the request is sent to the consumer)",
          "type": "string",
          "format": "date-time"
        },
        "publisherId": {
          "description": "Gets or sets this notification detail's publisher identifier.",
          "type": "string"
        },
        "publisherInputs": {
          "description": "Gets or sets this notification detail's publisher inputs.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "queuedDate": {
          "description": "Gets or sets the time that this notification was queued (created)",
          "type": "string",
          "format": "date-time"
        },
        "request": {
          "description": "Gets or sets this notification detail's request.",
          "type": "string"
        },
        "requestAttempts": {
          "description": "Number of requests attempted to be sent to the consumer",
          "type": "integer",
          "format": "int32"
        },
        "requestDuration": {
          "description": "Duration of the request to the consumer in seconds",
          "type": "number",
          "format": "double"
        },
        "response": {
          "description": "Gets or sets this notification detail's response.",
          "type": "string"
        }
      }
    },
    "NotificationResultsSummaryDetail": {
      "description": "Summary of a particular result and count.",
      "type": "object",
      "properties": {
        "notificationCount": {
          "description": "Count of notification sent out with a matching result.",
          "type": "integer",
          "format": "int32"
        },
        "result": {
          "description": "Result of the notification",
          "enum": [
            "pending",
            "succeeded",
            "failed",
            "filtered"
          ],
          "x-ms-enum": {
            "name": "NotificationResult",
            "values": [
              {
                "value": "pending",
                "description": "The notification has not yet completed"
              },
              {
                "value": "succeeded",
                "description": "The notification was sent successfully"
              },
              {
                "value": "failed",
                "description": "The notification failed to be sent successfully to the consumer"
              },
              {
                "value": "filtered",
                "description": "The notification was filtered by the Delivery Job"
              }
            ]
          }
        }
      }
    },
    "NotificationsQuery": {
      "description": "Defines a query for service hook notifications.",
      "type": "object",
      "properties": {
        "associatedSubscriptions": {
          "description": "The subscriptions associated with the notifications returned from the query",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Subscription"
          }
        },
        "includeDetails": {
          "description": "If true, we will return all notification history for the query provided; otherwise, the summary is returned.",
          "type": "boolean"
        },
        "maxCreatedDate": {
          "description": "Optional maximum date at which the notification was created",
          "type": "string",
          "format": "date-time"
        },
        "maxResults": {
          "description": "Optional maximum number of overall results to include",
          "type": "integer",
          "format": "int32"
        },
        "maxResultsPerSubscription": {
          "description": "Optional maximum number of results for each subscription. Only takes effect when a list of subscription ids is supplied in the query.",
          "type": "integer",
          "format": "int32"
        },
        "minCreatedDate": {
          "description": "Optional minimum date at which the notification was created",
          "type": "string",
          "format": "date-time"
        },
        "publisherId": {
          "description": "Optional publisher id to restrict the results to",
          "type": "string"
        },
        "results": {
          "description": "Results from the query",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Notification"
          }
        },
        "resultType": {
          "description": "Optional notification result type to filter results to",
          "enum": [
            "pending",
            "succeeded",
            "failed",
            "filtered"
          ],
          "x-ms-enum": {
            "name": "NotificationResult",
            "values": [
              {
                "value": "pending",
                "description": "The notification has not yet completed"
              },
              {
                "value": "succeeded",
                "description": "The notification was sent successfully"
              },
              {
                "value": "failed",
                "description": "The notification failed to be sent successfully to the consumer"
              },
              {
                "value": "filtered",
                "description": "The notification was filtered by the Delivery Job"
              }
            ]
          }
        },
        "status": {
          "description": "Optional notification status to filter results to",
          "enum": [
            "queued",
            "processing",
            "requestInProgress",
            "completed"
          ],
          "x-ms-enum": {
            "name": "NotificationStatus",
            "values": [
              {
                "value": "queued",
                "description": "The notification has been queued"
              },
              {
                "value": "processing",
                "description": "The notification has been dequeued and has begun processing."
              },
              {
                "value": "requestInProgress",
                "description": "The consumer action has processed the notification. The request is in progress."
              },
              {
                "value": "completed",
                "description": "The request completed"
              }
            ]
          }
        },
        "subscriptionIds": {
          "description": "Optional list of subscription ids to restrict the results to",
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "summary": {
          "description": "Summary of notifications - the count of each result type (success, fail, ..).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationSummary"
          }
        }
      }
    },
    "NotificationSummary": {
      "description": "Summary of the notifications for a subscription.",
      "type": "object",
      "properties": {
        "results": {
          "description": "The notification results for this particular subscription.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationResultsSummaryDetail"
          }
        },
        "subscriptionId": {
          "description": "The subscription id associated with this notification",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "Publisher": {
      "description": "Defines the data contract of an event publisher.",
      "type": "object",
      "properties": {
        "_links": {
          "description": "Reference Links",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "description": {
          "description": "Gets this publisher's localized description.",
          "type": "string"
        },
        "id": {
          "description": "Gets this publisher's identifier.",
          "type": "string"
        },
        "inputDescriptors": {
          "description": "Publisher-specific inputs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputDescriptor"
          }
        },
        "name": {
          "description": "Gets this publisher's localized name.",
          "type": "string"
        },
        "serviceInstanceType": {
          "description": "The service instance type of the first party publisher.",
          "type": "string"
        },
        "supportedEvents": {
          "description": "Gets this publisher's supported event types.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventTypeDescriptor"
          }
        },
        "url": {
          "description": "The url for this resource",
          "type": "string"
        }
      }
    },
    "PublisherEvent": {
      "description": "Wrapper around an event which is being published",
      "type": "object",
      "properties": {
        "diagnostics": {
          "description": "Add key/value pairs which will be stored with a published notification in the SH service DB.  This key/value pairs are for diagnostic purposes only and will have not effect on the delivery of a notification.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "event": {
          "description": "The event being published",
          "$ref": "#/definitions/Event"
        },
        "isFilteredEvent": {
          "description": "Gets or sets flag for filtered events",
          "type": "boolean"
        },
        "notificationData": {
          "description": "Additional data that needs to be sent as part of notification to complement the Resource data in the Event",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "otherResourceVersions": {
          "description": "Gets or sets the array of older supported resource versions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VersionedResource"
          }
        },
        "publisherInputFilters": {
          "description": "Optional publisher-input filters which restricts the set of subscriptions which are triggered by the event",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputFilter"
          }
        },
        "subscription": {
          "description": "Gets or sets matched hooks subscription which caused this event.",
          "$ref": "#/definitions/Subscription"
        }
      }
    },
    "PublishersQuery": {
      "description": "Defines a query for service hook publishers.",
      "type": "object",
      "properties": {
        "publisherIds": {
          "description": "Optional list of publisher ids to restrict the results to",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publisherInputs": {
          "description": "Filter for publisher inputs",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "results": {
          "description": "Results from the query",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Publisher"
          }
        }
      }
    },
    "ReferenceLinks": {
      "description": "The class to represent a collection of REST reference links.",
      "type": "object",
      "properties": {
        "links": {
          "description": "The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ResourceContainer": {
      "description": "The base class for all resource containers, i.e. Account, Collection, Project",
      "type": "object",
      "properties": {
        "baseUrl": {
          "description": "Gets or sets the container's base URL, i.e. the URL of the host (collection, application, or deployment) containing the container resource.",
          "type": "string"
        },
        "id": {
          "description": "Gets or sets the container's specific Id.",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "Gets or sets the container's name.",
          "type": "string"
        },
        "url": {
          "description": "Gets or sets the container's REST API URL.",
          "type": "string"
        }
      }
    },
    "SessionToken": {
      "description": "Represents a session token to be attached in Events for Consumer actions that need it.",
      "type": "object",
      "properties": {
        "error": {
          "description": "The error message in case of error",
          "type": "string"
        },
        "token": {
          "description": "The access token",
          "type": "string"
        },
        "validTo": {
          "description": "The expiration date in UTC",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Subscription": {
      "description": "Encapsulates an event subscription.",
      "type": "object",
      "properties": {
        "_links": {
          "description": "Reference Links",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "actionDescription": {
          "type": "string"
        },
        "consumerActionId": {
          "type": "string"
        },
        "consumerId": {
          "type": "string"
        },
        "consumerInputs": {
          "description": "Consumer input values",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "createdBy": {
          "$ref": "#/definitions/IdentityRef"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "eventDescription": {
          "type": "string"
        },
        "eventType": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "lastProbationRetryDate": {
          "type": "string",
          "format": "date-time"
        },
        "modifiedBy": {
          "$ref": "#/definitions/IdentityRef"
        },
        "modifiedDate": {
          "type": "string",
          "format": "date-time"
        },
        "probationRetries": {
          "type": "string",
          "format": "byte"
        },
        "publisherId": {
          "type": "string"
        },
        "publisherInputs": {
          "description": "Publisher input values",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "resourceVersion": {
          "type": "string"
        },
        "status": {
          "enum": [
            "enabled",
            "onProbation",
            "disabledByUser",
            "disabledBySystem",
            "disabledByInactiveIdentity"
          ],
          "x-ms-enum": {
            "name": "SubscriptionStatus",
            "values": [
              {
                "value": "enabled",
                "description": "The subscription is enabled."
              },
              {
                "value": "onProbation",
                "description": "The subscription is temporarily on probation by the system."
              },
              {
                "value": "disabledByUser",
                "description": "The subscription is disabled by a user."
              },
              {
                "value": "disabledBySystem",
                "description": "The subscription is disabled by the system."
              },
              {
                "value": "disabledByInactiveIdentity",
                "description": "The subscription is disabled because the owner is inactive or is missing permissions."
              }
            ]
          }
        },
        "subscriber": {
          "$ref": "#/definitions/IdentityRef"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "SubscriptionDiagnostics": {
      "description": "Contains all the diagnostics settings for a subscription.",
      "type": "object",
      "properties": {
        "deliveryResults": {
          "description": "Diagnostics settings for retaining delivery results.  Used for Service Hooks subscriptions.",
          "$ref": "#/definitions/SubscriptionTracing"
        },
        "deliveryTracing": {
          "description": "Diagnostics settings for troubleshooting notification delivery.",
          "$ref": "#/definitions/SubscriptionTracing"
        },
        "evaluationTracing": {
          "description": "Diagnostics settings for troubleshooting event matching.",
          "$ref": "#/definitions/SubscriptionTracing"
        }
      }
    },
    "SubscriptionInputValuesQuery": {
      "description": "Query for obtaining information about the possible/allowed values for one or more subscription inputs",
      "type": "object",
      "properties": {
        "inputValues": {
          "description": "The input values to return on input, and the result from the consumer on output.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputValues"
          }
        },
        "scope": {
          "description": "The scope at which the properties to query belong",
          "enum": [
            "publisher",
            "consumer"
          ],
          "x-ms-enum": {
            "name": "SubscriptionInputScope",
            "values": [
              {
                "value": "publisher",
                "description": "An input defined and consumed by a Publisher or Publisher Event Type"
              },
              {
                "value": "consumer",
                "description": "An input defined and consumed by a Consumer or Consumer Action"
              }
            ]
          }
        },
        "subscription": {
          "description": "Subscription containing information about the publisher/consumer and the current input values",
          "$ref": "#/definitions/Subscription"
        }
      }
    },
    "SubscriptionsQuery": {
      "description": "Defines a query for service hook subscriptions.",
      "type": "object",
      "properties": {
        "consumerActionId": {
          "description": "Optional consumer action id to restrict the results to (null for any)",
          "type": "string"
        },
        "consumerId": {
          "description": "Optional consumer id to restrict the results to (null for any)",
          "type": "string"
        },
        "consumerInputFilters": {
          "description": "Filter for subscription consumer inputs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputFilter"
          }
        },
        "eventType": {
          "description": "Optional event type id to restrict the results to (null for any)",
          "type": "string"
        },
        "publisherId": {
          "description": "Optional publisher id to restrict the results to (null for any)",
          "type": "string"
        },
        "publisherInputFilters": {
          "description": "Filter for subscription publisher inputs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputFilter"
          }
        },
        "results": {
          "description": "Results from the query",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Subscription"
          }
        },
        "subscriberId": {
          "description": "Optional subscriber filter.",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "SubscriptionTracing": {
      "description": "Data controlling a single diagnostic setting for a subscription.",
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Indicates whether the diagnostic tracing is enabled or not.",
          "type": "boolean"
        },
        "endDate": {
          "description": "Trace until the specified end date.",
          "type": "string",
          "format": "date-time"
        },
        "maxTracedEntries": {
          "description": "The maximum number of result details to trace.",
          "type": "integer",
          "format": "int32"
        },
        "startDate": {
          "description": "The date and time tracing started.",
          "type": "string",
          "format": "date-time"
        },
        "tracedEntries": {
          "description": "Trace until remaining count reaches 0.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "UpdateSubscripitonDiagnosticsParameters": {
      "description": "Parameters to update diagnostics settings for a subscription.",
      "type": "object",
      "properties": {
        "deliveryResults": {
          "description": "Diagnostics settings for retaining delivery results.  Used for Service Hooks subscriptions.",
          "$ref": "#/definitions/UpdateSubscripitonTracingParameters"
        },
        "deliveryTracing": {
          "description": "Diagnostics settings for troubleshooting notification delivery.",
          "$ref": "#/definitions/UpdateSubscripitonTracingParameters"
        },
        "evaluationTracing": {
          "description": "Diagnostics settings for troubleshooting event matching.",
          "$ref": "#/definitions/UpdateSubscripitonTracingParameters"
        }
      }
    },
    "UpdateSubscripitonTracingParameters": {
      "description": "Parameters to update a specific diagnostic setting.",
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Indicates whether to enable to disable the diagnostic tracing.",
          "type": "boolean"
        }
      }
    },
    "VersionedResource": {
      "description": "Encapsulates the resource version and its data or reference to the compatible version. Only one of the two last fields should be not null.",
      "type": "object",
      "properties": {
        "compatibleWith": {
          "description": "Gets or sets the reference to the compatible version.",
          "type": "string"
        },
        "resource": {
          "description": "Gets or sets the resource data.",
          "type": "object"
        },
        "resourceVersion": {
          "description": "Gets or sets the version of the resource data.",
          "type": "string"
        }
      }
    },
    "VssJsonCollectionWrapper": {
      "description": "This class is used to serialize collections as a single JSON object on the wire.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/VssJsonCollectionWrapperBase"
        }
      ],
      "properties": {
        "value": {
          "description": "The serialized item.",
          "type": "string",
          "format": "T"
        }
      }
    },
    "VssJsonCollectionWrapperBase": {
      "description": "",
      "type": "object",
      "properties": {
        "count": {
          "description": "The number of serialized items.",
          "type": "integer",
          "format": "int32"
        }
      }
    }
  },
  "parameters": {
    "api-Version": {
      "name": "api-version",
      "in": "query",
      "description": "Version of the API to use.  This should be set to '7.1' to use this version of the api.",
      "required": true,
      "type": "string"
    }
  },
  "securityDefinitions": {
    "accessToken": {
      "type": "basic",
      "description": "Personal access token. Use any value for the user name and the token as the password."
    },
    "oauth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://app.vssps.visualstudio.com/oauth2/authorize&response_type=Assertion",
      "tokenUrl": "https://app.vssps.visualstudio.com/oauth2/token?client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer&grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer",
      "scopes": {
        "vso.work": "Grants the ability to read work items, queries, boards, area and iterations paths, and other work item tracking related metadata. Also grants the ability to execute queries, search work items and to receive notifications about work item events via service hooks.",
        "vso.build": "Grants the ability to access build artifacts, including build results, definitions, and requests, and the ability to receive notifications about build events via service hooks.",
        "vso.code": "Grants the ability to read source code and metadata about commits, changesets, branches, and other version control artifacts. Also grants the ability to search code and get notified about version control events via service hooks."
      }
    }
  },
  "security": [
    {
      "accessToken": []
    }
  ],
  "externalDocs": {
    "description": "Azure DevOps REST APIs",
    "url": "https://aka.ms/azure-devops-rest-apis"
  }
}