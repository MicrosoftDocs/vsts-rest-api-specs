{
  "swagger": "2.0",
  "info": {
    "title": "Release",
    "description": "",
    "termsOfService": "https://go.microsoft.com/fwlink/?LinkId=329770",
    "contact": {
      "name": "nugetvss",
      "email": "nugetvss@microsoft.com"
    },
    "license": {
      "name": "MICROSOFT SOFTWARE LICENSE TERMS",
      "url": "https://go.microsoft.com/fwlink/?LinkId=329770"
    },
    "version": "7.1"
  },
  "host": "vsrm.dev.azure.com",
  "x-ms-vss-area": "Release",
  "x-ms-vss-resource-area-id": "efc2f575-36ef-48e9-b672-0c6fb4a48ac5",
  "basePath": "/",
  "tags": [
    {
      "name": "Approvals"
    },
    {
      "name": "Attachments"
    },
    {
      "name": "Definitions"
    },
    {
      "name": "Deployments"
    },
    {
      "name": "Folders",
      "description": "Controller to handle all REST calls against folders."
    },
    {
      "name": "Gates"
    },
    {
      "name": "Manual Interventions"
    },
    {
      "name": "Releases"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/{organization}/{project}/_apis/release/approvals": {
      "get": {
        "tags": [
          "Approvals"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "approvals",
        "x-ms-vss-method": "GetApprovals",
        "description": "Get a list of approvals",
        "operationId": "Approvals_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "assignedToFilter",
            "description": "Approvals assigned to this user.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "statusFilter",
            "description": "Approvals with this status. Default is 'pending'.",
            "required": false,
            "type": "string",
            "enum": [
              "undefined",
              "pending",
              "approved",
              "rejected",
              "reassigned",
              "canceled",
              "skipped"
            ],
            "x-ms-enum": {
              "name": "ApprovalStatus",
              "values": [
                {
                  "value": "undefined",
                  "description": "Indicates the approval does not have the status set."
                },
                {
                  "value": "pending",
                  "description": "Indicates the approval is pending."
                },
                {
                  "value": "approved",
                  "description": "Indicates the approval is approved."
                },
                {
                  "value": "rejected",
                  "description": "Indicates the approval is rejected."
                },
                {
                  "value": "reassigned",
                  "description": "Indicates the approval is reassigned."
                },
                {
                  "value": "canceled",
                  "description": "Indicates the approval is canceled."
                },
                {
                  "value": "skipped",
                  "description": "Indicates the approval is skipped."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "releaseIdsFilter",
            "description": "Approvals for release id(s) mentioned in the filter. Multiple releases can be mentioned by separating them with ',' e.g. releaseIdsFilter=1,2,3,4.",
            "required": false,
            "type": "string",
            "format": "array (int32)"
          },
          {
            "in": "query",
            "name": "typeFilter",
            "description": "Approval with this type.",
            "required": false,
            "type": "string",
            "enum": [
              "undefined",
              "preDeploy",
              "postDeploy",
              "all"
            ],
            "x-ms-enum": {
              "name": "ApprovalType",
              "values": [
                {
                  "value": "undefined",
                  "description": "Indicates the approval type does not set."
                },
                {
                  "value": "preDeploy",
                  "description": "Indicates the approvals which executed before deployment."
                },
                {
                  "value": "postDeploy",
                  "description": "Indicates the approvals which executed after deployment."
                },
                {
                  "value": "all",
                  "description": "Indicates all approvals."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "top",
            "description": "Number of approvals to get. Default is 50.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "Gets the approvals after the continuation token provided.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "queryOrder",
            "description": "Gets the results in the defined order of created approvals. Default is 'descending'.",
            "required": false,
            "type": "string",
            "enum": [
              "descending",
              "ascending"
            ],
            "x-ms-enum": {
              "name": "ReleaseQueryOrder",
              "values": [
                {
                  "value": "descending",
                  "description": "Return results in descending order."
                },
                {
                  "value": "ascending",
                  "description": "Return results in ascending order."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "includeMyGroupApprovals",
            "description": "'true' to include my group approvals. Default is 'false'.",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReleaseApproval"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release"
            ]
          }
        ],
        "x-ms-examples": {
          "Pending for all users": {
            "$ref": "./httpExamples/approvals/GET__ListAllPendingApprovals.json"
          },
          "Pending for a specific user": {
            "$ref": "./httpExamples/approvals/GET__ListPendingApprovalsForASpecificUser.json"
          },
          "Pending for a specific release": {
            "$ref": "./httpExamples/approvals/GET__ListPendingApprovalsForASpecificARelease.json"
          }
        }
      }
    },
    "/{organization}/{project}/_apis/release/approvals/{approvalId}": {
      "patch": {
        "tags": [
          "Approvals"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "approvals",
        "x-ms-vss-method": "UpdateReleaseApproval",
        "description": "Update status of an approval",
        "operationId": "Approvals_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "ReleaseApproval object having status, approver and comments.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseApproval"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "approvalId",
            "description": "Id of the approval.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReleaseApproval"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release_manage"
            ]
          }
        ],
        "x-ms-examples": {
          "Approve a release": {
            "$ref": "./httpExamples/approvals/PATCH__UpdateStatusOfAnApprovalFromPendingToApproved.json"
          }
        }
      }
    },
    "/{organization}/{project}/_apis/release/definitions": {
      "post": {
        "tags": [
          "Definitions"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "definitions",
        "x-ms-vss-method": "CreateReleaseDefinition",
        "description": "Create a release definition",
        "operationId": "Definitions_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "release definition object to create.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseDefinition"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReleaseDefinition"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release_execute"
            ]
          }
        ],
        "x-ms-examples": {
          "Create release definition": {
            "$ref": "./httpExamples/definitions/POST__CreateReleaseDefinition.json"
          }
        }
      },
      "get": {
        "tags": [
          "Definitions"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "definitions",
        "x-ms-vss-method": "GetReleaseDefinitions",
        "description": "Get a list of release definitions.",
        "operationId": "Definitions_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "searchText",
            "description": "Get release definitions with names containing searchText.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The properties that should be expanded in the list of Release definitions.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "environments",
              "artifacts",
              "triggers",
              "variables",
              "tags",
              "lastRelease"
            ],
            "x-ms-enum": {
              "name": "ReleaseDefinitionExpands",
              "values": [
                {
                  "value": "none",
                  "description": "Returns top level properties of object."
                },
                {
                  "value": "environments",
                  "description": "Include environments in return object."
                },
                {
                  "value": "artifacts",
                  "description": "Include artifacts in return object."
                },
                {
                  "value": "triggers",
                  "description": "Include triggers in return object."
                },
                {
                  "value": "variables",
                  "description": "Include variables in return object."
                },
                {
                  "value": "tags",
                  "description": "Include tags in return object."
                },
                {
                  "value": "lastRelease",
                  "description": "Include last release in return object."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "artifactType",
            "description": "Release definitions with given artifactType will be returned. Values can be Build, Jenkins, GitHub, Nuget, Team Build (external), ExternalTFSBuild, Git, TFVC, ExternalTfsXamlBuild.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "artifactSourceId",
            "description": "Release definitions with given artifactSourceId will be returned. e.g. For build it would be {projectGuid}:{BuildDefinitionId}, for Jenkins it would be {JenkinsConnectionId}:{JenkinsDefinitionId}, for TfsOnPrem it would be {TfsOnPremConnectionId}:{ProjectName}:{TfsOnPremDefinitionId}. For third-party artifacts e.g. TeamCity, BitBucket you may refer 'uniqueSourceIdentifier' inside vss-extension.json at https://github.com/Microsoft/vsts-rm-extensions/blob/master/Extensions.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "$top",
            "description": "Number of release definitions to get.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "Gets the release definitions after the continuation token provided.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "queryOrder",
            "description": "Gets the results in the defined order. Default is 'IdAscending'.",
            "required": false,
            "type": "string",
            "enum": [
              "idAscending",
              "idDescending",
              "nameAscending",
              "nameDescending"
            ],
            "x-ms-enum": {
              "name": "ReleaseDefinitionQueryOrder",
              "values": [
                {
                  "value": "idAscending",
                  "description": "Return results based on release definition Id ascending order."
                },
                {
                  "value": "idDescending",
                  "description": "Return results based on release definition Id descending order."
                },
                {
                  "value": "nameAscending",
                  "description": "Return results based on release definition name ascending order."
                },
                {
                  "value": "nameDescending",
                  "description": "Return results based on release definition name descending order."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "path",
            "description": "Gets the release definitions under the specified path.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "isExactNameMatch",
            "description": "'true'to gets the release definitions with exact match as specified in searchText. Default is 'false'.",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "tagFilter",
            "description": "A comma-delimited list of tags. Only release definitions with these tags will be returned.",
            "required": false,
            "type": "string",
            "format": "array (string)"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "A comma-delimited list of extended properties to be retrieved. If set, the returned Release Definitions will contain values for the specified property Ids (if they exist). If not set, properties will not be included. Note that this will not filter out any Release Definition from results irrespective of whether it has property set or not.",
            "required": false,
            "type": "string",
            "format": "array (string)"
          },
          {
            "in": "query",
            "name": "definitionIdFilter",
            "description": "A comma-delimited list of release definitions to retrieve.",
            "required": false,
            "type": "string",
            "format": "array (string)"
          },
          {
            "in": "query",
            "name": "isDeleted",
            "description": "'true' to get release definitions that has been deleted. Default is 'false'",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "searchTextContainsFolderName",
            "description": "'true' to get the release definitions under the folder with name as specified in searchText. Default is 'false'.",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReleaseDefinition"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release"
            ]
          }
        ],
        "x-ms-examples": {
          "": {
            "$ref": "./httpExamples/definitions/GET__ListAllReleaseDefinitions.json"
          },
          "With environments details expanded": {
            "$ref": "./httpExamples/definitions/GET__ListAllReleaseDefinitionsWithEnvironmentsExpanded.json"
          },
          "With artifacts details expanded": {
            "$ref": "./httpExamples/definitions/GET_ListAllReleaseDefinitionsWithArtifactsExpanded.json"
          }
        }
      },
      "put": {
        "tags": [
          "Definitions"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "definitions",
        "x-ms-vss-method": "UpdateReleaseDefinition",
        "description": "Update a release definition.",
        "operationId": "Definitions_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Release definition object to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseDefinition"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReleaseDefinition"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release_execute"
            ]
          }
        ],
        "x-ms-examples": {
          "Update the release definition": {
            "$ref": "./httpExamples/definitions/PUT__UpdateReleaseDefinition.json"
          }
        }
      }
    },
    "/{organization}/{project}/_apis/release/definitions/{definitionId}": {
      "delete": {
        "tags": [
          "Definitions"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "definitions",
        "x-ms-vss-method": "DeleteReleaseDefinition",
        "description": "Delete a release definition.",
        "operationId": "Definitions_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "definitionId",
            "description": "Id of the release definition.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "comment",
            "description": "Comment for deleting a release definition.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "forceDelete",
            "description": "'true' to automatically cancel any in-progress release deployments and proceed with release definition deletion . Default is 'false'.",
            "required": false,
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release_manage"
            ]
          }
        ],
        "x-ms-examples": {
          "Delete a release definition": {
            "$ref": "./httpExamples/definitions/DELETE__DeleteReleaseDefinition.json"
          }
        }
      },
      "get": {
        "tags": [
          "Definitions"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "definitions",
        "x-ms-vss-method": "GetReleaseDefinition",
        "description": "Get a release definition.",
        "operationId": "Definitions_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "definitionId",
            "description": "Id of the release definition.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "A comma-delimited list of extended properties to be retrieved. If set, the returned Release Definition will contain values for the specified property Ids (if they exist). If not set, properties will not be included.",
            "required": false,
            "type": "string",
            "format": "array (string)"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReleaseDefinition"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release"
            ]
          }
        ],
        "x-ms-examples": {
          "Get a release definition": {
            "$ref": "./httpExamples/definitions/GET__GetReleaseDefinition.json"
          }
        }
      }
    },
    "/{organization}/{project}/_apis/Release/definitions/{definitionId}/revisions": {
      "get": {
        "tags": [
          "Definitions"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "revisions",
        "x-ms-vss-method": "GetReleaseDefinitionHistory",
        "description": "Get revision history for a release definition",
        "operationId": "Definitions_Get Release Definition History",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "definitionId",
            "description": "Id of the definition.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReleaseDefinitionRevision"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release"
            ]
          }
        ],
        "x-ms-examples": {
          "": {
            "$ref": "./httpExamples/revisions/GET__GetReleaseDefinitionRevision.json"
          }
        }
      }
    },
    "/{organization}/{project}/_apis/Release/definitions/{definitionId}/revisions/{revision}": {
      "get": {
        "tags": [
          "Definitions"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "revisions",
        "x-ms-vss-method": "GetDefinitionRevision",
        "description": "Get release definition for a given definitionId and revision",
        "operationId": "Definitions_Get Definition Revision",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "definitionId",
            "description": "Id of the definition.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "revision",
            "description": "Id of the revision.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "Stream"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/release/deployments": {
      "get": {
        "tags": [
          "Deployments"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "deployments",
        "x-ms-vss-method": "GetDeployments",
        "description": "",
        "operationId": "Deployments_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "definitionId",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "definitionEnvironmentId",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "createdBy",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "minModifiedTime",
            "description": "",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxModifiedTime",
            "description": "",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "deploymentStatus",
            "description": "",
            "required": false,
            "type": "string",
            "enum": [
              "undefined",
              "notDeployed",
              "inProgress",
              "succeeded",
              "partiallySucceeded",
              "failed",
              "all"
            ],
            "x-ms-enum": {
              "name": "DeploymentStatus",
              "values": [
                {
                  "value": "undefined",
                  "description": "The deployment status is undefined."
                },
                {
                  "value": "notDeployed",
                  "description": "The deployment status is not deployed."
                },
                {
                  "value": "inProgress",
                  "description": "The deployment status is in progress."
                },
                {
                  "value": "succeeded",
                  "description": "The deployment status is succeeded."
                },
                {
                  "value": "partiallySucceeded",
                  "description": "The deployment status is partiallysucceeded."
                },
                {
                  "value": "failed",
                  "description": "The deployment status is failed."
                },
                {
                  "value": "all",
                  "description": "The deployment status is all."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "operationStatus",
            "description": "",
            "required": false,
            "type": "string",
            "enum": [
              "undefined",
              "queued",
              "scheduled",
              "pending",
              "approved",
              "rejected",
              "deferred",
              "queuedForAgent",
              "phaseInProgress",
              "phaseSucceeded",
              "phasePartiallySucceeded",
              "phaseFailed",
              "canceled",
              "phaseCanceled",
              "manualInterventionPending",
              "queuedForPipeline",
              "cancelling",
              "evaluatingGates",
              "gateFailed",
              "all"
            ],
            "x-ms-enum": {
              "name": "DeploymentOperationStatus",
              "values": [
                {
                  "value": "undefined",
                  "description": "The deployment operation status is undefined."
                },
                {
                  "value": "queued",
                  "description": "The deployment operation status is queued."
                },
                {
                  "value": "scheduled",
                  "description": "The deployment operation status is scheduled."
                },
                {
                  "value": "pending",
                  "description": "The deployment operation status is pending."
                },
                {
                  "value": "approved",
                  "description": "The deployment operation status is approved."
                },
                {
                  "value": "rejected",
                  "description": "The deployment operation status is rejected."
                },
                {
                  "value": "deferred",
                  "description": "The deployment operation status is deferred."
                },
                {
                  "value": "queuedForAgent",
                  "description": "The deployment operation status is queued for agent."
                },
                {
                  "value": "phaseInProgress",
                  "description": "The deployment operation status is phase in progress."
                },
                {
                  "value": "phaseSucceeded",
                  "description": "The deployment operation status is phase succeeded."
                },
                {
                  "value": "phasePartiallySucceeded",
                  "description": "The deployment operation status is phase partially succeeded."
                },
                {
                  "value": "phaseFailed",
                  "description": "The deployment operation status is phase failed."
                },
                {
                  "value": "canceled",
                  "description": "The deployment operation status is canceled."
                },
                {
                  "value": "phaseCanceled",
                  "description": "The deployment operation status is phase canceled."
                },
                {
                  "value": "manualInterventionPending",
                  "description": "The deployment operation status is manualintervention pending."
                },
                {
                  "value": "queuedForPipeline",
                  "description": "The deployment operation status is queued for pipeline."
                },
                {
                  "value": "cancelling",
                  "description": "The deployment operation status is cancelling."
                },
                {
                  "value": "evaluatingGates",
                  "description": "The deployment operation status is EvaluatingGates."
                },
                {
                  "value": "gateFailed",
                  "description": "The deployment operation status is GateFailed."
                },
                {
                  "value": "all",
                  "description": "The deployment operation status is all."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "latestAttemptsOnly",
            "description": "",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "queryOrder",
            "description": "",
            "required": false,
            "type": "string",
            "enum": [
              "descending",
              "ascending"
            ],
            "x-ms-enum": {
              "name": "ReleaseQueryOrder",
              "values": [
                {
                  "value": "descending",
                  "description": "Return results in descending order."
                },
                {
                  "value": "ascending",
                  "description": "Return results in ascending order."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "$top",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "createdFor",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "minStartedTime",
            "description": "",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxStartedTime",
            "description": "",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "sourceBranch",
            "description": "",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Deployment"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release"
            ]
          }
        ],
        "x-ms-examples": {
          "Get all deployments for a given definition Id": {
            "$ref": "./httpExamples/deployments/GET__ListDeploymentsForAGivenDefinitionId.json"
          },
          "Get all deployments in the project": {
            "$ref": "./httpExamples/deployments/GET__ListDeployments.json"
          }
        }
      }
    },
    "/{organization}/{project}/_apis/release/folders/{path}": {
      "post": {
        "tags": [
          "Folders"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "folders",
        "x-ms-vss-method": "CreateFolder",
        "deprecated": true,
        "description": "This method is no longer supported. Use CreateFolder with folder parameter API.",
        "operationId": "Folders_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "folder.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "path",
            "description": "Path of the folder.",
            "required": true,
            "x-ms-required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release_execute"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Folders"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "folders",
        "x-ms-vss-method": "DeleteFolder",
        "description": "Deletes a definition folder for given folder name and path and all it's existing definitions.",
        "operationId": "Folders_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "path",
            "description": "Path of the folder to delete.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release_manage"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Folders"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "folders",
        "x-ms-vss-method": "GetFolders",
        "description": "Gets folders.",
        "operationId": "Folders_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "path",
            "description": "Path of the folder.",
            "required": true,
            "x-ms-required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "queryOrder",
            "description": "Gets the results in the defined order. Default is 'None'.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "ascending",
              "descending"
            ],
            "x-ms-enum": {
              "name": "FolderPathQueryOrder",
              "values": [
                {
                  "value": "none",
                  "description": "No order."
                },
                {
                  "value": "ascending",
                  "description": "Order by folder name and path ascending."
                },
                {
                  "value": "descending",
                  "description": "Order by folder name and path descending."
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Folder"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Folders"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "folders",
        "x-ms-vss-method": "UpdateFolder",
        "description": "Updates an existing folder at given existing path.",
        "operationId": "Folders_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "folder.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "path",
            "description": "Path of the folder to update.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release_execute"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/release/gates/{gateStepId}": {
      "patch": {
        "tags": [
          "Gates"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "gates",
        "x-ms-vss-method": "UpdateGates",
        "description": "Updates the gate for a deployment.",
        "operationId": "Gates_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Metadata to patch the Release Gates.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GateUpdateMetadata"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "gateStepId",
            "description": "Gate step Id.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReleaseGates"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release_execute"
            ]
          }
        ],
        "x-ms-examples": {
          "Ignore a gate": {
            "$ref": "./httpExamples/gates/PATCH__IgnoreGate.json"
          }
        }
      }
    },
    "/{organization}/{project}/_apis/release/releases": {
      "get": {
        "tags": [
          "Releases"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "releases",
        "x-ms-vss-method": "GetReleases",
        "description": "Get a list of releases",
        "operationId": "Releases_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "definitionId",
            "description": "Releases from this release definition Id.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "definitionEnvironmentId",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "searchText",
            "description": "Releases with names containing searchText.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "createdBy",
            "description": "Releases created by this user.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "statusFilter",
            "description": "Releases that have this status.",
            "required": false,
            "type": "string",
            "enum": [
              "undefined",
              "draft",
              "active",
              "abandoned"
            ],
            "x-ms-enum": {
              "name": "ReleaseStatus",
              "values": [
                {
                  "value": "undefined",
                  "description": "Release status not set."
                },
                {
                  "value": "draft",
                  "description": "Release is in draft state."
                },
                {
                  "value": "active",
                  "description": "Release status is in active."
                },
                {
                  "value": "abandoned",
                  "description": "Release status is in abandoned."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "environmentStatusFilter",
            "description": "",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "minCreatedTime",
            "description": "Releases that were created after this time.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "maxCreatedTime",
            "description": "Releases that were created before this time.",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "in": "query",
            "name": "queryOrder",
            "description": "Gets the results in the defined order of created date for releases. Default is descending.",
            "required": false,
            "type": "string",
            "enum": [
              "descending",
              "ascending"
            ],
            "x-ms-enum": {
              "name": "ReleaseQueryOrder",
              "values": [
                {
                  "value": "descending",
                  "description": "Return results in descending order."
                },
                {
                  "value": "ascending",
                  "description": "Return results in ascending order."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "$top",
            "description": "Number of releases to get. Default is 50.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "Gets the releases after the continuation token provided.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "The property that should be expanded in the list of releases.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "environments",
              "artifacts",
              "approvals",
              "manualInterventions",
              "variables",
              "tags"
            ],
            "x-ms-enum": {
              "name": "ReleaseExpands",
              "values": [
                {
                  "value": "none",
                  "description": ""
                },
                {
                  "value": "environments",
                  "description": ""
                },
                {
                  "value": "artifacts",
                  "description": ""
                },
                {
                  "value": "approvals",
                  "description": ""
                },
                {
                  "value": "manualInterventions",
                  "description": ""
                },
                {
                  "value": "variables",
                  "description": ""
                },
                {
                  "value": "tags",
                  "description": ""
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "artifactTypeId",
            "description": "Releases with given artifactTypeId will be returned. Values can be Build, Jenkins, GitHub, Nuget, Team Build (external), ExternalTFSBuild, Git, TFVC, ExternalTfsXamlBuild.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sourceId",
            "description": "Unique identifier of the artifact used. e.g. For build it would be {projectGuid}:{BuildDefinitionId}, for Jenkins it would be {JenkinsConnectionId}:{JenkinsDefinitionId}, for TfsOnPrem it would be {TfsOnPremConnectionId}:{ProjectName}:{TfsOnPremDefinitionId}. For third-party artifacts e.g. TeamCity, BitBucket you may refer 'uniqueSourceIdentifier' inside vss-extension.json https://github.com/Microsoft/vsts-rm-extensions/blob/master/Extensions.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "artifactVersionId",
            "description": "Releases with given artifactVersionId will be returned. E.g. in case of Build artifactType, it is buildId.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sourceBranchFilter",
            "description": "Releases with given sourceBranchFilter will be returned.",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "isDeleted",
            "description": "Gets the soft deleted releases, if true.",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "tagFilter",
            "description": "A comma-delimited list of tags. Only releases with these tags will be returned.",
            "required": false,
            "type": "string",
            "format": "array (string)"
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "A comma-delimited list of extended properties to be retrieved. If set, the returned Releases will contain values for the specified property Ids (if they exist). If not set, properties will not be included. Note that this will not filter out any Release from results irrespective of whether it has property set or not.",
            "required": false,
            "type": "string",
            "format": "array (string)"
          },
          {
            "in": "query",
            "name": "releaseIdFilter",
            "description": "A comma-delimited list of releases Ids. Only releases with these Ids will be returned.",
            "required": false,
            "type": "string",
            "format": "array (int32)"
          },
          {
            "in": "query",
            "name": "path",
            "description": "Releases under this folder path will be returned",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Release"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release"
            ]
          }
        ],
        "x-ms-examples": {
          "": {
            "$ref": "./httpExamples/releases/Query_ListAllReleases.json"
          },
          "For a release definition": {
            "$ref": "./httpExamples/releases/GET__ListAllReleasesForAReleaseDefinition.json"
          }
        }
      },
      "post": {
        "tags": [
          "Releases"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "releases",
        "x-ms-vss-method": "CreateRelease",
        "description": "Create a release.",
        "operationId": "Releases_Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Metadata to create a release.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseStartMetadata"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Release"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release_execute"
            ]
          }
        ],
        "x-ms-examples": {
          "": {
            "$ref": "./httpExamples/releases/POST__CreateARelease.json"
          }
        }
      }
    },
    "/{organization}/{project}/_apis/release/releases/{releaseId}": {
      "get": {
        "tags": [
          "Releases"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "releases",
        "x-ms-vss-method": "GetReleaseRevision",
        "description": "Get release for a given revision number.",
        "operationId": "Releases_Get Release Revision",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "releaseId",
            "description": "Id of the release.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "definitionSnapshotRevision",
            "description": "Definition snapshot revision number.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "Stream"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release"
            ]
          }
        ],
        "x-ms-examples": {
          "": {
            "$ref": "./httpExamples/releases/GET__GetReleaseRevisionOfRelease.json"
          }
        }
      },
      "put": {
        "tags": [
          "Releases"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "releases",
        "x-ms-vss-method": "UpdateRelease",
        "description": "Update a complete release object.",
        "operationId": "Releases_Update Release",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Release object for update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Release"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "releaseId",
            "description": "Id of the release to update.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Release"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release_execute"
            ]
          }
        ],
        "x-ms-examples": {
          "Update the release": {
            "$ref": "./httpExamples/releases/PUT__UpdateRelease.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Releases"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "releases",
        "x-ms-vss-method": "UpdateReleaseResource",
        "description": "Update few properties of a release.",
        "operationId": "Releases_Update Release Resource",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Properties of release to update.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseUpdateMetadata"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "releaseId",
            "description": "Id of the release to update.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Release"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release_execute"
            ]
          }
        ],
        "x-ms-examples": {
          "Abandoning an active release": {
            "$ref": "./httpExamples/releases/PATCH__AbandonAnActiveRelease.json"
          }
        }
      }
    },
    "/{organization}/{project}/_apis/Release/releases/{releaseId}/environments/{environmentId}": {
      "get": {
        "tags": [
          "Releases"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "environments",
        "x-ms-vss-method": "GetReleaseEnvironment",
        "description": "Get a release environment.",
        "operationId": "Releases_Get Release Environment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "releaseId",
            "description": "Id of the release.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "environmentId",
            "description": "Id of the release environment.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "A property that should be expanded in the environment.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "tasks"
            ],
            "x-ms-enum": {
              "name": "ReleaseEnvironmentExpands",
              "values": [
                {
                  "value": "none",
                  "description": "Return top level properties of object."
                },
                {
                  "value": "tasks",
                  "description": "Expand environment with tasks."
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReleaseEnvironment"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Releases"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "environments",
        "x-ms-vss-method": "UpdateReleaseEnvironment",
        "description": "Update the status of a release environment",
        "operationId": "Releases_Update Release Environment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Environment update meta data.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReleaseEnvironmentUpdateMetadata"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "releaseId",
            "description": "Id of the release.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "environmentId",
            "description": "Id of release environment.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReleaseEnvironment"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release_execute"
            ]
          }
        ],
        "x-ms-examples": {
          "Start deployment on an environment": {
            "$ref": "./httpExamples/environments/PATCH__UpdateReleaseEnvironment.json"
          }
        }
      }
    },
    "/{organization}/{project}/_apis/release/releases/{releaseId}/environments/{environmentId}/attempts/{attemptId}/plan/{planId}/attachments/{type}": {
      "get": {
        "tags": [
          "Attachments"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "attachments",
        "x-ms-vss-method": "GetReleaseTaskAttachments",
        "description": "Get the release task attachments.",
        "operationId": "Attachments_Get Release Task Attachments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "releaseId",
            "description": "Id of the release.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "environmentId",
            "description": "Id of the release environment.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "attemptId",
            "description": "Attempt number of deployment.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "planId",
            "description": "Plan Id of the deploy phase.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "type",
            "description": "Type of the attachment.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReleaseTaskAttachment"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release"
            ]
          }
        ],
        "x-ms-examples": {
          "Get release task attachments": {
            "$ref": "./httpExamples/attachments/GET__GetReleaseAttachment.json"
          }
        }
      }
    },
    "/{organization}/{project}/_apis/release/releases/{releaseId}/environments/{environmentId}/attempts/{attemptId}/plan/{planId}/timelines/{timelineId}/records/{recordId}/attachments/{type}/{name}": {
      "get": {
        "tags": [
          "Attachments"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "attachments",
        "x-ms-vss-method": "GetReleaseTaskAttachmentContent",
        "description": "Get a release task attachment.",
        "operationId": "Attachments_Get Release Task Attachment Content",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "releaseId",
            "description": "Id of the release.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "environmentId",
            "description": "Id of the release environment.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "attemptId",
            "description": "Attempt number of deployment.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "planId",
            "description": "Plan Id of the deploy phase.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "timelineId",
            "description": "Timeline Id of the task.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "recordId",
            "description": "Record Id of attachment.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "type",
            "description": "Type of the attachment.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "name",
            "description": "Name of the attachment.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "Stream"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release"
            ]
          }
        ],
        "x-ms-examples": {
          "Get release task attachment content": {
            "$ref": "./httpExamples/attachments/GET__GetReleaseTaskAttachmentContent.json"
          }
        }
      }
    },
    "/{organization}/{project}/_apis/release/releases/{releaseId}/environments/{environmentId}/attempts/{attemptId}/timelines/{timelineId}/attachments/{type}": {
      "get": {
        "tags": [
          "Attachments"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "attachments",
        "x-ms-vss-method": "GetTaskAttachments",
        "deprecated": true,
        "description": "GetTaskAttachments API is deprecated. Use GetReleaseTaskAttachments API instead.",
        "operationId": "Attachments_Get Task Attachments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "releaseId",
            "description": "Id of the release.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "environmentId",
            "description": "Id of the release environment.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "attemptId",
            "description": "Attempt number of deployment.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "timelineId",
            "description": "Timeline Id of the task.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "type",
            "description": "Type of the attachment.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReleaseTaskAttachment"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/release/releases/{releaseId}/environments/{environmentId}/attempts/{attemptId}/timelines/{timelineId}/records/{recordId}/attachments/{type}/{name}": {
      "get": {
        "tags": [
          "Attachments"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "attachments",
        "x-ms-vss-method": "GetTaskAttachmentContent",
        "deprecated": true,
        "description": "GetTaskAttachmentContent API is deprecated. Use GetReleaseTaskAttachmentContent API instead.",
        "operationId": "Attachments_Get Task Attachment Content",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "releaseId",
            "description": "Id of the release.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "environmentId",
            "description": "Id of the release environment.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "attemptId",
            "description": "Attempt number of deployment.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "timelineId",
            "description": "Timeline Id of the task.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "recordId",
            "description": "Record Id of attachment.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "path",
            "name": "type",
            "description": "Type of the attachment.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "name",
            "description": "Name of the attachment.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "Stream"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/release/releases/{releaseId}/environments/{environmentId}/deployPhases/{releaseDeployPhaseId}/tasks/{taskId}/logs": {
      "get": {
        "tags": [
          "Releases"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "logs",
        "x-ms-vss-method": "GetTaskLog",
        "description": "Gets the task log of a release as a plain text file.",
        "operationId": "Releases_Get Task Log",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "releaseId",
            "description": "Id of the release.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "environmentId",
            "description": "Id of release environment.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "releaseDeployPhaseId",
            "description": "Release deploy phase Id.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "taskId",
            "description": "ReleaseTask Id for the log.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "startLine",
            "description": "Starting line number for logs",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "endLine",
            "description": "Ending line number for logs",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "Stream"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release"
            ]
          }
        ],
        "x-ms-examples": {
          "Get logs of a task": {
            "$ref": "./httpExamples/logs/GET__GetLogsOfReleaseTask.json"
          }
        }
      }
    },
    "/{organization}/{project}/_apis/release/releases/{releaseId}/logs": {
      "get": {
        "tags": [
          "Releases"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "logs",
        "x-ms-vss-method": "GetLogs",
        "description": "Get logs for a release Id.",
        "operationId": "Releases_Get Logs",
        "produces": [
          "application/zip"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "releaseId",
            "description": "Id of the release.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "Stream"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release"
            ]
          }
        ],
        "x-ms-examples": {
          "Get logs of a task": {
            "$ref": "./httpExamples/logs/GET__GetLogsOfReleaseTask.json"
          }
        }
      }
    },
    "/{organization}/{project}/_apis/Release/releases/{releaseId}/manualinterventions": {
      "get": {
        "tags": [
          "Manual Interventions"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "manualInterventions",
        "x-ms-vss-method": "GetManualInterventions",
        "description": "List all manual interventions for a given release.",
        "operationId": "Manual Interventions_List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "releaseId",
            "description": "Id of the release.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ManualIntervention"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release"
            ]
          }
        ],
        "x-ms-examples": {
          "Get manual interventions": {
            "$ref": "./httpExamples/manualInterventions/GET__GetManualInterventions.json"
          }
        }
      }
    },
    "/{organization}/{project}/_apis/Release/releases/{releaseId}/manualinterventions/{manualInterventionId}": {
      "get": {
        "tags": [
          "Manual Interventions"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "manualInterventions",
        "x-ms-vss-method": "GetManualIntervention",
        "description": "Get manual intervention for a given release and manual intervention id.",
        "operationId": "Manual Interventions_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "releaseId",
            "description": "Id of the release.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "manualInterventionId",
            "description": "Id of the manual intervention.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ManualIntervention"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release"
            ]
          }
        ],
        "x-ms-examples": {
          "Get manual intervention": {
            "$ref": "./httpExamples/manualInterventions/GET__GetManualIntervention.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Manual Interventions"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "manualInterventions",
        "x-ms-vss-method": "UpdateManualIntervention",
        "description": "Update manual intervention.",
        "operationId": "Manual Interventions_Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Meta data to update manual intervention.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ManualInterventionUpdateMetadata"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "releaseId",
            "description": "Id of the release.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "path",
            "name": "manualInterventionId",
            "description": "Id of the manual intervention.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ManualIntervention"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release_execute"
            ]
          }
        ],
        "x-ms-examples": {
          "Resume manual intervention": {
            "$ref": "./httpExamples/manualInterventions/PATCH__ResumeManualIntervention.json"
          },
          "Reject manual intervention": {
            "$ref": "./httpExamples/manualInterventions/PATCH__RejectManualIntervention.json"
          }
        }
      }
    }
  },
  "x-ms-paths": {
    "/{organization}/{project}/_apis/release/releases/{releaseId}?": {
      "get": {
        "tags": [
          "Releases"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "releases",
        "x-ms-vss-method": "GetRelease",
        "description": "Get a Release",
        "operationId": "Releases_Get Release",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "releaseId",
            "description": "Id of the release.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "approvalFilters",
            "description": "A filter which would allow fetching approval steps selectively based on whether it is automated, or manual. This would also decide whether we should fetch pre and post approval snapshots. Assumes All by default",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "manualApprovals",
              "automatedApprovals",
              "approvalSnapshots",
              "all"
            ],
            "x-ms-enum": {
              "name": "ApprovalFilters",
              "values": [
                {
                  "value": "none",
                  "description": "No approvals or approval snapshots."
                },
                {
                  "value": "manualApprovals",
                  "description": "Manual approval steps but no approval snapshots (Use with ApprovalSnapshots for snapshots)."
                },
                {
                  "value": "automatedApprovals",
                  "description": "Automated approval steps but no approval snapshots (Use with ApprovalSnapshots for snapshots)."
                },
                {
                  "value": "approvalSnapshots",
                  "description": "No approval steps, but approval snapshots (Use with either ManualApprovals or AutomatedApprovals for approval steps)."
                },
                {
                  "value": "all",
                  "description": "All approval steps and approval snapshots."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "propertyFilters",
            "description": "A comma-delimited list of extended properties to be retrieved. If set, the returned Release will contain values for the specified property Ids (if they exist). If not set, properties will not be included.",
            "required": false,
            "type": "string",
            "format": "array (string)"
          },
          {
            "in": "query",
            "name": "$expand",
            "description": "A property that should be expanded in the release.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "tasks"
            ],
            "x-ms-enum": {
              "name": "SingleReleaseExpands",
              "values": [
                {
                  "value": "none",
                  "description": "Return top level properties of object."
                },
                {
                  "value": "tasks",
                  "description": "Expand release with tasks."
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "$topGateRecords",
            "description": "Number of release gate records to get. Default is 5.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Release"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.release"
            ]
          }
        ],
        "x-ms-examples": {
          "": {
            "$ref": "./httpExamples/releases/GET__GetARelease.json"
          }
        }
      }
    }
  },
  "definitions": {
    "AgentArtifactDefinition": {
      "description": "",
      "type": "object",
      "properties": {
        "alias": {
          "description": "Gets or sets the artifact definition alias.",
          "type": "string"
        },
        "artifactType": {
          "description": "Gets or sets the artifact type.",
          "enum": [
            "xamlBuild",
            "build",
            "jenkins",
            "fileShare",
            "nuget",
            "tfsOnPrem",
            "gitHub",
            "tfGit",
            "externalTfsBuild",
            "custom",
            "tfvc"
          ],
          "x-ms-enum": {
            "name": "AgentArtifactType",
            "values": [
              {
                "value": "xamlBuild",
                "description": "Indicates XamlBuild artifact"
              },
              {
                "value": "build",
                "description": "Indicates Build artifact"
              },
              {
                "value": "jenkins",
                "description": "Indicates Jenkins artifact"
              },
              {
                "value": "fileShare",
                "description": "Indicates FileShare artifact"
              },
              {
                "value": "nuget",
                "description": "Indicates Nuget artifact"
              },
              {
                "value": "tfsOnPrem",
                "description": "Indicates TfsOnPrem artifact"
              },
              {
                "value": "gitHub",
                "description": "Indicates GitHub artifact"
              },
              {
                "value": "tfGit",
                "description": "Indicates TFGit artifact"
              },
              {
                "value": "externalTfsBuild",
                "description": "Indicates ExternalTfsBuild artifact"
              },
              {
                "value": "custom",
                "description": "Indicates Custom artifact"
              },
              {
                "value": "tfvc",
                "description": "Indicates Tfvc artifact"
              }
            ]
          }
        },
        "details": {
          "description": "Gets or sets the artifact definition details.",
          "type": "string"
        },
        "name": {
          "description": "Gets or sets the name of artifact definition.",
          "type": "string"
        },
        "version": {
          "description": "Gets or sets the version of artifact definition.",
          "type": "string"
        }
      }
    },
    "AgentBasedDeployPhase": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DeployPhase"
        }
      ],
      "properties": {
        "deploymentInput": {
          "description": "Gets and sets the agent job deployment input",
          "$ref": "#/definitions/AgentDeploymentInput"
        }
      }
    },
    "AgentDeploymentInput": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DeploymentInput"
        }
      ],
      "properties": {
        "agentSpecification": {
          "description": "Specification for an agent on which a job gets executed.",
          "$ref": "#/definitions/AgentSpecification"
        },
        "imageId": {
          "description": "Gets or sets the image ID.",
          "type": "integer",
          "format": "int32"
        },
        "parallelExecution": {
          "description": "Gets or sets the parallel execution input.",
          "$ref": "#/definitions/ExecutionInput"
        }
      }
    },
    "AgentPoolQueueReference": {
      "description": "Represents a reference to an agent queue.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ResourceReference"
        }
      ],
      "properties": {
        "id": {
          "description": "The ID of the queue.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AgentSpecification": {
      "description": "Specification of the agent defined by the pool provider.",
      "type": "object",
      "properties": {
        "identifier": {
          "description": "Agent specification unique identifier.",
          "type": "string"
        }
      }
    },
    "ApprovalOptions": {
      "description": "",
      "type": "object",
      "properties": {
        "autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped": {
          "description": "Specify whether the approval can be skipped if the same approver approved the previous stage.",
          "type": "boolean"
        },
        "enforceIdentityRevalidation": {
          "description": "Specify whether revalidate identity of approver before completing the approval.",
          "type": "boolean"
        },
        "executionOrder": {
          "description": "Approvals execution order.",
          "enum": [
            "beforeGates",
            "afterSuccessfulGates",
            "afterGatesAlways"
          ],
          "x-ms-enum": {
            "name": "ApprovalExecutionOrder",
            "values": [
              {
                "value": "beforeGates",
                "description": "Approvals shown before gates."
              },
              {
                "value": "afterSuccessfulGates",
                "description": "Approvals shown after successful execution of gates."
              },
              {
                "value": "afterGatesAlways",
                "description": "Approvals shown always after execution of gates."
              }
            ]
          }
        },
        "releaseCreatorCanBeApprover": {
          "description": "Specify whether the user requesting a release or deployment should allow to approver.",
          "type": "boolean"
        },
        "requiredApproverCount": {
          "description": "The number of approvals required to move release forward. '0' means all approvals required.",
          "type": "integer",
          "format": "int32"
        },
        "timeoutInMinutes": {
          "description": "Approval timeout. Approval default timeout is 30 days. Maximum allowed timeout is 365 days. '0' means default timeout i.e 30 days.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Artifact": {
      "description": "",
      "type": "object",
      "properties": {
        "alias": {
          "description": "Gets or sets alias.",
          "type": "string"
        },
        "definitionReference": {
          "description": "Gets or sets definition reference. e.g. {\"project\":{\"id\":\"fed755ea-49c5-4399-acea-fd5b5aa90a6c\",\"name\":\"myProject\"},\"definition\":{\"id\":\"1\",\"name\":\"mybuildDefinition\"},\"connection\":{\"id\":\"1\",\"name\":\"myConnection\"}}.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ArtifactSourceReference"
          }
        },
        "isPrimary": {
          "description": "Indicates whether artifact is primary or not.",
          "type": "boolean"
        },
        "isRetained": {
          "description": "Indicates whether artifact is retained by release or not.",
          "type": "boolean"
        },
        "type": {
          "description": "Gets or sets type. It can have value as 'Build', 'Jenkins', 'GitHub', 'Nuget', 'Team Build (external)', 'ExternalTFSBuild', 'Git', 'TFVC', 'ExternalTfsXamlBuild'.",
          "type": "string"
        }
      }
    },
    "ArtifactContributionDefinition": {
      "description": "",
      "type": "object",
      "properties": {
        "artifactTriggerConfiguration": {
          "$ref": "#/definitions/ArtifactTriggerConfiguration"
        },
        "artifactType": {
          "type": "string"
        },
        "artifactTypeStreamMapping": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "browsableArtifactTypeMapping": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "dataSourceBindings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataSourceBinding"
          }
        },
        "displayName": {
          "type": "string"
        },
        "downloadTaskId": {
          "type": "string"
        },
        "endpointTypeId": {
          "type": "string"
        },
        "inputDescriptors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputDescriptor"
          }
        },
        "isCommitsTraceabilitySupported": {
          "type": "boolean"
        },
        "isWorkitemsTraceabilitySupported": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "taskInputMapping": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "uniqueSourceIdentifier": {
          "type": "string"
        }
      }
    },
    "ArtifactDownloadInputBase": {
      "description": "",
      "type": "object",
      "properties": {
        "alias": {
          "description": "Gets or sets the alias of artifact.",
          "type": "string"
        },
        "artifactDownloadMode": {
          "description": "Gets or sets the name of artifact definition. Valid values are 'Skip', 'Selective', 'All'.",
          "type": "string"
        },
        "artifactItems": {
          "description": "Gets or sets the artifact items of the input.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "artifactType": {
          "description": "Gets or sets the type of artifact.",
          "type": "string"
        }
      }
    },
    "ArtifactFilter": {
      "description": "",
      "type": "object",
      "properties": {
        "createReleaseOnBuildTagging": {
          "description": "Gets or sets whether a release should be created on build tagging.",
          "type": "boolean"
        },
        "sourceBranch": {
          "description": "Gets or sets the branch for the filter.",
          "type": "string"
        },
        "tagFilter": {
          "description": "Gets or sets the regex based tag filter.",
          "$ref": "#/definitions/TagFilter"
        },
        "tags": {
          "description": "Gets or sets the list of tags for the filter.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "useBuildDefinitionBranch": {
          "description": "Gets or sets whether filter should default to build definition branch.",
          "type": "boolean"
        }
      }
    },
    "ArtifactInstanceData": {
      "description": "",
      "type": "object",
      "properties": {
        "accountName": {
          "type": "string"
        },
        "authenticationToken": {
          "type": "string"
        },
        "tfsUrl": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "ArtifactMetadata": {
      "description": "",
      "type": "object",
      "properties": {
        "alias": {
          "description": "Sets alias of artifact.",
          "type": "string"
        },
        "instanceReference": {
          "description": "Sets instance reference of artifact. e.g. for build artifact it is build number.",
          "$ref": "#/definitions/BuildVersion"
        }
      }
    },
    "ArtifactProvider": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "description": "Gets or sets the id of artifact provider.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Gets or sets the name of artifact provider.",
          "type": "string"
        },
        "sourceUri": {
          "description": "Gets or sets the link of artifact provider.",
          "type": "string"
        },
        "version": {
          "description": "Gets or sets the version of artifact provider.",
          "type": "string"
        }
      }
    },
    "ArtifactsDownloadInput": {
      "description": "",
      "type": "object",
      "properties": {
        "downloadInputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArtifactDownloadInputBase"
          }
        }
      }
    },
    "ArtifactSourceId": {
      "description": "",
      "type": "object",
      "properties": {
        "artifactTypeId": {
          "description": "Gets or sets the artifact type of artifact source.",
          "type": "string"
        },
        "sourceIdInputs": {
          "description": "Gets or sets the list of sourceIdInput of artifact source.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceIdInput"
          }
        }
      }
    },
    "ArtifactSourceIdsQueryResult": {
      "description": "",
      "type": "object",
      "properties": {
        "artifactSourceIds": {
          "description": "Gets or sets the list of artifactsourceIds.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArtifactSourceId"
          }
        }
      }
    },
    "ArtifactSourceReference": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the artifact source.",
          "type": "string"
        },
        "name": {
          "description": "Name of the artifact source.",
          "type": "string"
        }
      }
    },
    "ArtifactSourceTrigger": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ReleaseTriggerBase"
        }
      ],
      "properties": {
        "artifactAlias": {
          "description": "Artifact source alias for Artifact Source trigger type",
          "type": "string"
        },
        "triggerConditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArtifactFilter"
          }
        }
      }
    },
    "ArtifactTriggerConfiguration": {
      "description": "",
      "type": "object",
      "properties": {
        "isTriggerSupported": {
          "description": "Gets or sets the whether trigger is supported or not.",
          "type": "boolean"
        },
        "isTriggerSupportedOnlyInHosted": {
          "description": "Gets or sets the whether trigger is supported only on hosted environment.",
          "type": "boolean"
        },
        "isWebhookSupportedAtServerLevel": {
          "description": "Gets or sets the whether webhook is supported at server level.",
          "type": "boolean"
        },
        "payloadHashHeaderName": {
          "description": "Gets or sets the payload hash header name for the artifact trigger configuration.",
          "type": "string"
        },
        "resources": {
          "description": "Gets or sets the resources for artifact trigger configuration.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "webhookPayloadMapping": {
          "description": "Gets or sets the webhook payload mapping for artifact trigger configuration.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ArtifactTypeDefinition": {
      "description": "",
      "type": "object",
      "properties": {
        "artifactTriggerConfiguration": {
          "description": "Gets or sets the artifact trigger configuration of artifact type definition.",
          "$ref": "#/definitions/ArtifactTriggerConfiguration"
        },
        "artifactType": {
          "description": "Gets or sets the artifact type of artifact type definition. Valid values are 'Build', 'Package', 'Source' or 'ContainerImage'.",
          "type": "string"
        },
        "displayName": {
          "description": "Gets or sets the display name of artifact type definition.",
          "type": "string"
        },
        "endpointTypeId": {
          "description": "Gets or sets the endpoint type id of artifact type definition.",
          "type": "string"
        },
        "inputDescriptors": {
          "description": "Gets or sets the input descriptors of artifact type definition.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputDescriptor"
          }
        },
        "isCommitsTraceabilitySupported": {
          "description": "Gets or sets the is commits tracebility supported value of artifact type defintion.",
          "type": "boolean"
        },
        "isWorkitemsTraceabilitySupported": {
          "description": "Gets or sets the is workitems tracebility supported value of artifact type defintion.",
          "type": "boolean"
        },
        "name": {
          "description": "Gets or sets the name of artifact type definition.",
          "type": "string"
        },
        "uniqueSourceIdentifier": {
          "description": "Gets or sets the unique source identifier of artifact type definition.",
          "type": "string"
        }
      }
    },
    "ArtifactVersion": {
      "description": "",
      "type": "object",
      "properties": {
        "alias": {
          "description": "Gets or sets the alias of artifact.",
          "type": "string"
        },
        "defaultVersion": {
          "description": "Gets or sets the default version of artifact.",
          "$ref": "#/definitions/BuildVersion"
        },
        "errorMessage": {
          "description": "Gets or sets the error message encountered during querying of versions for artifact.",
          "type": "string"
        },
        "versions": {
          "description": "Gets or sets the list of build versions of artifact.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BuildVersion"
          }
        }
      }
    },
    "ArtifactVersionQueryResult": {
      "description": "",
      "type": "object",
      "properties": {
        "artifactVersions": {
          "description": "Gets or sets the list for artifact versions of artifact version query result.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArtifactVersion"
          }
        }
      }
    },
    "AuthorizationHeader": {
      "description": "",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "AutoTriggerIssue": {
      "description": "",
      "type": "object",
      "properties": {
        "issue": {
          "$ref": "#/definitions/Issue"
        },
        "issueSource": {
          "enum": [
            "none",
            "user",
            "system"
          ],
          "x-ms-enum": {
            "name": "IssueSource",
            "values": [
              {
                "value": "none",
                "description": ""
              },
              {
                "value": "user",
                "description": ""
              },
              {
                "value": "system",
                "description": ""
              }
            ]
          }
        },
        "project": {
          "$ref": "#/definitions/ProjectReference"
        },
        "releaseDefinitionReference": {
          "$ref": "#/definitions/ReleaseDefinitionShallowReference"
        },
        "releaseTriggerType": {
          "enum": [
            "undefined",
            "artifactSource",
            "schedule",
            "sourceRepo",
            "containerImage",
            "package",
            "pullRequest"
          ],
          "x-ms-enum": {
            "name": "ReleaseTriggerType",
            "values": [
              {
                "value": "undefined",
                "description": "Release trigger type not set."
              },
              {
                "value": "artifactSource",
                "description": "Artifact based release trigger."
              },
              {
                "value": "schedule",
                "description": "Schedule based release trigger."
              },
              {
                "value": "sourceRepo",
                "description": "Source repository based release trigger."
              },
              {
                "value": "containerImage",
                "description": "Container image based release trigger."
              },
              {
                "value": "package",
                "description": "Package based release trigger."
              },
              {
                "value": "pullRequest",
                "description": "Pull request based release trigger."
              }
            ]
          }
        }
      }
    },
    "AzureKeyVaultVariableGroupProviderData": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/VariableGroupProviderData"
        }
      ],
      "properties": {
        "lastRefreshedOn": {
          "description": "Gets or sets last refreshed time.",
          "type": "string",
          "format": "date-time"
        },
        "serviceEndpointId": {
          "description": "Gets or sets the service endpoint ID.",
          "type": "string",
          "format": "uuid"
        },
        "vault": {
          "description": "Gets or sets the vault name.",
          "type": "string"
        }
      }
    },
    "AzureKeyVaultVariableValue": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/VariableValue"
        }
      ],
      "properties": {
        "contentType": {
          "description": "Gets or sets the content type of key vault variable value.",
          "type": "string"
        },
        "enabled": {
          "description": "Indicates the vault variable value enabled or not.",
          "type": "boolean"
        },
        "expires": {
          "description": "Gets or sets the expire time of key vault variable value.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "BaseDeploymentInput": {
      "description": "",
      "type": "object",
      "properties": {
        "condition": {
          "description": "Gets or sets the job condition.",
          "type": "string"
        },
        "jobCancelTimeoutInMinutes": {
          "description": "Gets or sets the job cancel timeout in minutes for deployment which are cancelled by user for this release environment.",
          "type": "integer",
          "format": "int32"
        },
        "overrideInputs": {
          "description": "Gets or sets the override inputs.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "timeoutInMinutes": {
          "description": "Gets or sets the job execution timeout in minutes for deployment which are queued against this release environment.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "BuildArtifactDownloadInput": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactDownloadInputBase"
        }
      ],
      "properties": {}
    },
    "BuildVersion": {
      "description": "",
      "type": "object",
      "properties": {
        "commitMessage": {
          "description": "Gets or sets the commit message for the artifact.",
          "type": "string"
        },
        "definitionId": {
          "description": "Gets or sets the definition id.",
          "type": "string"
        },
        "definitionName": {
          "description": "Gets or sets the definition name.",
          "type": "string"
        },
        "id": {
          "description": "Gets or sets the build id.",
          "type": "string"
        },
        "isMultiDefinitionType": {
          "description": "Gets or sets if the artifact supports multiple definitions.",
          "type": "boolean"
        },
        "name": {
          "description": "Gets or sets the build number.",
          "type": "string"
        },
        "sourceBranch": {
          "description": "Gets or sets the source branch for the artifact.",
          "type": "string"
        },
        "sourcePullRequestVersion": {
          "description": "Gets or sets the source pull request version for the artifact.",
          "$ref": "#/definitions/SourcePullRequestVersion"
        },
        "sourceRepositoryId": {
          "description": "Gets or sets the repository id for the artifact.",
          "type": "string"
        },
        "sourceRepositoryType": {
          "description": "Gets or sets the repository type for the artifact.",
          "type": "string"
        },
        "sourceVersion": {
          "description": "Gets or sets the source version for the artifact.",
          "type": "string"
        }
      }
    },
    "Change": {
      "description": "Represents a change associated with a build.",
      "type": "object",
      "properties": {
        "author": {
          "description": "The author of the change.",
          "$ref": "#/definitions/IdentityRef"
        },
        "changeType": {
          "description": "The type of source. \"TfsVersionControl\", \"TfsGit\", etc.",
          "type": "string"
        },
        "displayUri": {
          "description": "The location of a user-friendly representation of the resource.",
          "type": "string"
        },
        "id": {
          "description": "Something that identifies the change. For a commit, this would be the SHA1. For a TFVC changeset, this would be the changeset id.",
          "type": "string"
        },
        "location": {
          "description": "The location of the full representation of the resource.",
          "type": "string"
        },
        "message": {
          "description": "A description of the change. This might be a commit message or changeset description.",
          "type": "string"
        },
        "pushedBy": {
          "description": "The person or process that pushed the change.",
          "$ref": "#/definitions/IdentityRef"
        },
        "timestamp": {
          "description": "A timestamp for the change.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CodeRepositoryReference": {
      "description": "",
      "type": "object",
      "properties": {
        "repositoryReference": {
          "description": "Gets and sets the repository references.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ReleaseManagementInputValue"
          }
        },
        "systemType": {
          "description": "It can have value as ‘GitHub’, ‘Vsts’.",
          "enum": [
            "none",
            "tfsGit",
            "gitHub"
          ],
          "x-ms-enum": {
            "name": "PullRequestSystemType",
            "values": [
              {
                "value": "none",
                "description": ""
              },
              {
                "value": "tfsGit",
                "description": ""
              },
              {
                "value": "gitHub",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "ComplianceSettings": {
      "description": "",
      "type": "object",
      "properties": {
        "checkForCredentialsAndOtherSecrets": {
          "description": "Scan the release definition for secrets",
          "type": "boolean"
        }
      }
    },
    "Condition": {
      "description": "",
      "type": "object",
      "properties": {
        "conditionType": {
          "description": "Gets or sets the condition type.",
          "enum": [
            "undefined",
            "event",
            "environmentState",
            "artifact"
          ],
          "x-ms-enum": {
            "name": "ConditionType",
            "values": [
              {
                "value": "undefined",
                "description": "The condition type is undefined."
              },
              {
                "value": "event",
                "description": "The condition type is event."
              },
              {
                "value": "environmentState",
                "description": "The condition type is environment state."
              },
              {
                "value": "artifact",
                "description": "The condition type is artifact."
              }
            ]
          }
        },
        "name": {
          "description": "Gets or sets the name of the condition. e.g. 'ReleaseStarted'.",
          "type": "string"
        },
        "value": {
          "description": "Gets or set value of the condition.",
          "type": "string"
        }
      }
    },
    "ConfigurationVariableValue": {
      "description": "",
      "type": "object",
      "properties": {
        "allowOverride": {
          "description": "Gets and sets if a variable can be overridden at deployment time or not.",
          "type": "boolean"
        },
        "isSecret": {
          "description": "Gets or sets as variable is secret or not.",
          "type": "boolean"
        },
        "value": {
          "description": "Gets and sets value of the configuration variable.",
          "type": "string"
        }
      }
    },
    "Consumer": {
      "description": "",
      "type": "object",
      "properties": {
        "consumerId": {
          "description": "ID of the consumer.",
          "type": "integer",
          "format": "int32"
        },
        "consumerName": {
          "description": "Name of the consumer.",
          "type": "string"
        }
      }
    },
    "ContainerImageTrigger": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ReleaseTriggerBase"
        }
      ],
      "properties": {
        "alias": {
          "description": "Alias of the trigger.",
          "type": "string"
        },
        "tagFilters": {
          "description": "List tag filters applied while trigger.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagFilter"
          }
        }
      }
    },
    "ContinuousDeploymentTriggerIssue": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/AutoTriggerIssue"
        }
      ],
      "properties": {
        "artifactType": {
          "description": "Artifact type.",
          "type": "string"
        },
        "artifactVersionId": {
          "description": "ArtifactVersion ID.",
          "type": "string"
        },
        "sourceId": {
          "description": "Artifact source ID.",
          "type": "string"
        }
      }
    },
    "ControlOptions": {
      "description": "",
      "type": "object",
      "properties": {
        "alwaysRun": {
          "description": "Always run the job.",
          "type": "boolean"
        },
        "continueOnError": {
          "description": "Indicates whether to continue job on error or not.",
          "type": "boolean"
        },
        "enabled": {
          "description": "Indicates the job enabled or not.",
          "type": "boolean"
        }
      }
    },
    "CustomArtifactDownloadInput": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactDownloadInputBase"
        }
      ],
      "properties": {}
    },
    "DataSourceBinding": {
      "description": "",
      "type": "object",
      "properties": {
        "callbackContextTemplate": {
          "description": "Pagination format supported by this data source(ContinuationToken/SkipTop).",
          "type": "string"
        },
        "callBackRequiredTemplate": {
          "description": "Subsequent calls needed?",
          "type": "string"
        },
        "dataSourceName": {
          "description": "Name of the datasource.",
          "type": "string"
        },
        "endpointId": {
          "description": "Endpoint ID of the datasource.",
          "type": "string"
        },
        "endpointUrl": {
          "description": "Endpoint URL of the datasource.",
          "type": "string"
        },
        "initialContextTemplate": {
          "description": "Defines the initial value of the query params",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters of the datasource.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "requestContent": {
          "description": "Gets or sets http request body",
          "type": "string"
        },
        "requestVerb": {
          "description": "Gets or sets http request verb",
          "type": "string"
        },
        "resultSelector": {
          "description": "Result selector applied on output of datasource result, for example jsonpath:$.value[?(@.properties.isEnabled == true)].",
          "type": "string"
        },
        "resultTemplate": {
          "description": "Format of the return results, for example. { \"Value\" : \"{{{id}}}\", \"DisplayValue\" : \"{{{name}}}\" }.",
          "type": "string"
        },
        "target": {
          "description": "Target of the datasource.",
          "type": "string"
        }
      }
    },
    "DataSourceBindingBase": {
      "description": "Represents binding of data source for the service endpoint request.",
      "type": "object",
      "properties": {
        "callbackContextTemplate": {
          "description": "Pagination format supported by this data source(ContinuationToken/SkipTop).",
          "type": "string"
        },
        "callbackRequiredTemplate": {
          "description": "Subsequent calls needed?",
          "type": "string"
        },
        "dataSourceName": {
          "description": "Gets or sets the name of the data source.",
          "type": "string"
        },
        "endpointId": {
          "description": "Gets or sets the endpoint Id.",
          "type": "string"
        },
        "endpointUrl": {
          "description": "Gets or sets the url of the service endpoint.",
          "type": "string"
        },
        "headers": {
          "description": "Gets or sets the authorization headers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthorizationHeader"
          }
        },
        "initialContextTemplate": {
          "description": "Defines the initial value of the query params",
          "type": "string"
        },
        "parameters": {
          "description": "Gets or sets the parameters for the data source.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "requestContent": {
          "description": "Gets or sets http request body",
          "type": "string"
        },
        "requestVerb": {
          "description": "Gets or sets http request verb",
          "type": "string"
        },
        "resultSelector": {
          "description": "Gets or sets the result selector.",
          "type": "string"
        },
        "resultTemplate": {
          "description": "Gets or sets the result template.",
          "type": "string"
        },
        "target": {
          "description": "Gets or sets the target of the data source.",
          "type": "string"
        }
      }
    },
    "DefinitionEnvironmentReference": {
      "description": "",
      "type": "object",
      "properties": {
        "definitionEnvironmentId": {
          "description": "Definition environment ID.",
          "type": "integer",
          "format": "int32"
        },
        "definitionEnvironmentName": {
          "description": "Definition environment name.",
          "type": "string"
        },
        "releaseDefinitionId": {
          "description": "ReleaseDefinition ID.",
          "type": "integer",
          "format": "int32"
        },
        "releaseDefinitionName": {
          "description": "ReleaseDefinition name.",
          "type": "string"
        }
      }
    },
    "Demand": {
      "description": "",
      "type": "object",
      "properties": {
        "name": {
          "description": "Gets and sets the name of demand.",
          "type": "string"
        },
        "value": {
          "description": "Gets and sets the value of demand.",
          "type": "string"
        }
      }
    },
    "Deployment": {
      "description": "",
      "type": "object",
      "properties": {
        "attempt": {
          "description": "Gets attempt number.",
          "type": "integer",
          "format": "int32"
        },
        "completedOn": {
          "description": "Gets the date on which deployment is complete.",
          "type": "string",
          "format": "date-time"
        },
        "conditions": {
          "description": "Gets the list of condition associated with deployment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Condition"
          }
        },
        "definitionEnvironmentId": {
          "description": "Gets release definition environment id.",
          "type": "integer",
          "format": "int32"
        },
        "deploymentStatus": {
          "description": "Gets status of the deployment.",
          "enum": [
            "undefined",
            "notDeployed",
            "inProgress",
            "succeeded",
            "partiallySucceeded",
            "failed",
            "all"
          ],
          "x-ms-enum": {
            "name": "DeploymentStatus",
            "values": [
              {
                "value": "undefined",
                "description": "The deployment status is undefined."
              },
              {
                "value": "notDeployed",
                "description": "The deployment status is not deployed."
              },
              {
                "value": "inProgress",
                "description": "The deployment status is in progress."
              },
              {
                "value": "succeeded",
                "description": "The deployment status is succeeded."
              },
              {
                "value": "partiallySucceeded",
                "description": "The deployment status is partiallysucceeded."
              },
              {
                "value": "failed",
                "description": "The deployment status is failed."
              },
              {
                "value": "all",
                "description": "The deployment status is all."
              }
            ]
          }
        },
        "id": {
          "description": "Gets the unique identifier for deployment.",
          "type": "integer",
          "format": "int32"
        },
        "lastModifiedBy": {
          "description": "Gets the identity who last modified the deployment.",
          "$ref": "#/definitions/IdentityRef"
        },
        "lastModifiedOn": {
          "description": "Gets the date on which deployment is last modified.",
          "type": "string",
          "format": "date-time"
        },
        "operationStatus": {
          "description": "Gets operation status of deployment.",
          "enum": [
            "undefined",
            "queued",
            "scheduled",
            "pending",
            "approved",
            "rejected",
            "deferred",
            "queuedForAgent",
            "phaseInProgress",
            "phaseSucceeded",
            "phasePartiallySucceeded",
            "phaseFailed",
            "canceled",
            "phaseCanceled",
            "manualInterventionPending",
            "queuedForPipeline",
            "cancelling",
            "evaluatingGates",
            "gateFailed",
            "all"
          ],
          "x-ms-enum": {
            "name": "DeploymentOperationStatus",
            "values": [
              {
                "value": "undefined",
                "description": "The deployment operation status is undefined."
              },
              {
                "value": "queued",
                "description": "The deployment operation status is queued."
              },
              {
                "value": "scheduled",
                "description": "The deployment operation status is scheduled."
              },
              {
                "value": "pending",
                "description": "The deployment operation status is pending."
              },
              {
                "value": "approved",
                "description": "The deployment operation status is approved."
              },
              {
                "value": "rejected",
                "description": "The deployment operation status is rejected."
              },
              {
                "value": "deferred",
                "description": "The deployment operation status is deferred."
              },
              {
                "value": "queuedForAgent",
                "description": "The deployment operation status is queued for agent."
              },
              {
                "value": "phaseInProgress",
                "description": "The deployment operation status is phase in progress."
              },
              {
                "value": "phaseSucceeded",
                "description": "The deployment operation status is phase succeeded."
              },
              {
                "value": "phasePartiallySucceeded",
                "description": "The deployment operation status is phase partially succeeded."
              },
              {
                "value": "phaseFailed",
                "description": "The deployment operation status is phase failed."
              },
              {
                "value": "canceled",
                "description": "The deployment operation status is canceled."
              },
              {
                "value": "phaseCanceled",
                "description": "The deployment operation status is phase canceled."
              },
              {
                "value": "manualInterventionPending",
                "description": "The deployment operation status is manualintervention pending."
              },
              {
                "value": "queuedForPipeline",
                "description": "The deployment operation status is queued for pipeline."
              },
              {
                "value": "cancelling",
                "description": "The deployment operation status is cancelling."
              },
              {
                "value": "evaluatingGates",
                "description": "The deployment operation status is EvaluatingGates."
              },
              {
                "value": "gateFailed",
                "description": "The deployment operation status is GateFailed."
              },
              {
                "value": "all",
                "description": "The deployment operation status is all."
              }
            ]
          }
        },
        "postDeployApprovals": {
          "description": "Gets list of PostDeployApprovals.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseApproval"
          }
        },
        "preDeployApprovals": {
          "description": "Gets list of PreDeployApprovals.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseApproval"
          }
        },
        "projectReference": {
          "description": "Gets or sets project reference.",
          "$ref": "#/definitions/ProjectReference"
        },
        "queuedOn": {
          "description": "Gets the date on which deployment is queued.",
          "type": "string",
          "format": "date-time"
        },
        "reason": {
          "description": "Gets reason of deployment.",
          "enum": [
            "none",
            "manual",
            "automated",
            "scheduled",
            "redeployTrigger"
          ],
          "x-ms-enum": {
            "name": "DeploymentReason",
            "values": [
              {
                "value": "none",
                "description": "The deployment reason is none."
              },
              {
                "value": "manual",
                "description": "The deployment reason is manual."
              },
              {
                "value": "automated",
                "description": "The deployment reason is automated."
              },
              {
                "value": "scheduled",
                "description": "The deployment reason is scheduled."
              },
              {
                "value": "redeployTrigger",
                "description": "The deployment reason is RedeployTrigger."
              }
            ]
          }
        },
        "release": {
          "description": "Gets the reference of release.",
          "$ref": "#/definitions/ReleaseReference"
        },
        "releaseDefinition": {
          "description": "Gets releaseDefinitionReference which specifies the reference of the release definition to which the deployment is associated.",
          "$ref": "#/definitions/ReleaseDefinitionShallowReference"
        },
        "releaseEnvironment": {
          "description": "Gets releaseEnvironmentReference which specifies the reference of the release environment to which the deployment is associated.",
          "$ref": "#/definitions/ReleaseEnvironmentShallowReference"
        },
        "requestedBy": {
          "description": "Gets the identity who requested.",
          "$ref": "#/definitions/IdentityRef"
        },
        "requestedFor": {
          "description": "Gets the identity for whom deployment is requested.",
          "$ref": "#/definitions/IdentityRef"
        },
        "scheduledDeploymentTime": {
          "description": "Gets the date on which deployment is scheduled.",
          "type": "string",
          "format": "date-time"
        },
        "startedOn": {
          "description": "Gets the date on which deployment is started.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "DeploymentApprovalCompletedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DeploymentEvent"
        }
      ],
      "properties": {
        "approval": {
          "$ref": "#/definitions/ReleaseApproval"
        },
        "project": {
          "$ref": "#/definitions/ProjectReference"
        },
        "release": {
          "$ref": "#/definitions/Release"
        }
      }
    },
    "DeploymentApprovalPendingEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DeploymentEvent"
        }
      ],
      "properties": {
        "approval": {
          "$ref": "#/definitions/ReleaseApproval"
        },
        "approvalOptions": {
          "$ref": "#/definitions/ApprovalOptions"
        },
        "completedApprovals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseApproval"
          }
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "deployment": {
          "$ref": "#/definitions/Deployment"
        },
        "isMultipleRankApproval": {
          "type": "boolean"
        },
        "pendingApprovals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseApproval"
          }
        },
        "project": {
          "$ref": "#/definitions/ProjectReference"
        },
        "release": {
          "$ref": "#/definitions/Release"
        }
      }
    },
    "DeploymentAttempt": {
      "description": "",
      "type": "object",
      "properties": {
        "attempt": {
          "description": "Deployment attempt.",
          "type": "integer",
          "format": "int32"
        },
        "deploymentId": {
          "description": "ID of the deployment.",
          "type": "integer",
          "format": "int32"
        },
        "hasStarted": {
          "description": "Specifies whether deployment has started or not.",
          "type": "boolean"
        },
        "id": {
          "description": "ID of deployment.",
          "type": "integer",
          "format": "int32"
        },
        "issues": {
          "description": "All the issues related to the deployment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Issue"
          }
        },
        "lastModifiedBy": {
          "description": "Identity who last modified this deployment.",
          "$ref": "#/definitions/IdentityRef"
        },
        "lastModifiedOn": {
          "description": "Time when this deployment last modified.",
          "type": "string",
          "format": "date-time"
        },
        "operationStatus": {
          "description": "Deployment operation status.",
          "enum": [
            "undefined",
            "queued",
            "scheduled",
            "pending",
            "approved",
            "rejected",
            "deferred",
            "queuedForAgent",
            "phaseInProgress",
            "phaseSucceeded",
            "phasePartiallySucceeded",
            "phaseFailed",
            "canceled",
            "phaseCanceled",
            "manualInterventionPending",
            "queuedForPipeline",
            "cancelling",
            "evaluatingGates",
            "gateFailed",
            "all"
          ],
          "x-ms-enum": {
            "name": "DeploymentOperationStatus",
            "values": [
              {
                "value": "undefined",
                "description": "The deployment operation status is undefined."
              },
              {
                "value": "queued",
                "description": "The deployment operation status is queued."
              },
              {
                "value": "scheduled",
                "description": "The deployment operation status is scheduled."
              },
              {
                "value": "pending",
                "description": "The deployment operation status is pending."
              },
              {
                "value": "approved",
                "description": "The deployment operation status is approved."
              },
              {
                "value": "rejected",
                "description": "The deployment operation status is rejected."
              },
              {
                "value": "deferred",
                "description": "The deployment operation status is deferred."
              },
              {
                "value": "queuedForAgent",
                "description": "The deployment operation status is queued for agent."
              },
              {
                "value": "phaseInProgress",
                "description": "The deployment operation status is phase in progress."
              },
              {
                "value": "phaseSucceeded",
                "description": "The deployment operation status is phase succeeded."
              },
              {
                "value": "phasePartiallySucceeded",
                "description": "The deployment operation status is phase partially succeeded."
              },
              {
                "value": "phaseFailed",
                "description": "The deployment operation status is phase failed."
              },
              {
                "value": "canceled",
                "description": "The deployment operation status is canceled."
              },
              {
                "value": "phaseCanceled",
                "description": "The deployment operation status is phase canceled."
              },
              {
                "value": "manualInterventionPending",
                "description": "The deployment operation status is manualintervention pending."
              },
              {
                "value": "queuedForPipeline",
                "description": "The deployment operation status is queued for pipeline."
              },
              {
                "value": "cancelling",
                "description": "The deployment operation status is cancelling."
              },
              {
                "value": "evaluatingGates",
                "description": "The deployment operation status is EvaluatingGates."
              },
              {
                "value": "gateFailed",
                "description": "The deployment operation status is GateFailed."
              },
              {
                "value": "all",
                "description": "The deployment operation status is all."
              }
            ]
          }
        },
        "postDeploymentGates": {
          "description": "Post deployment gates that executed in this deployment.",
          "$ref": "#/definitions/ReleaseGates"
        },
        "preDeploymentGates": {
          "description": "Pre deployment gates that executed in this deployment.",
          "$ref": "#/definitions/ReleaseGates"
        },
        "queuedOn": {
          "description": "When this deployment queued on.",
          "type": "string",
          "format": "date-time"
        },
        "reason": {
          "description": "Reason for the deployment.",
          "enum": [
            "none",
            "manual",
            "automated",
            "scheduled",
            "redeployTrigger"
          ],
          "x-ms-enum": {
            "name": "DeploymentReason",
            "values": [
              {
                "value": "none",
                "description": "The deployment reason is none."
              },
              {
                "value": "manual",
                "description": "The deployment reason is manual."
              },
              {
                "value": "automated",
                "description": "The deployment reason is automated."
              },
              {
                "value": "scheduled",
                "description": "The deployment reason is scheduled."
              },
              {
                "value": "redeployTrigger",
                "description": "The deployment reason is RedeployTrigger."
              }
            ]
          }
        },
        "releaseDeployPhases": {
          "description": "List of release deployphases executed in this deployment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseDeployPhase"
          }
        },
        "requestedBy": {
          "description": "Identity who requested this deployment.",
          "$ref": "#/definitions/IdentityRef"
        },
        "requestedFor": {
          "description": "Identity for this deployment requested.",
          "$ref": "#/definitions/IdentityRef"
        },
        "status": {
          "description": "status of the deployment.",
          "enum": [
            "undefined",
            "notDeployed",
            "inProgress",
            "succeeded",
            "partiallySucceeded",
            "failed",
            "all"
          ],
          "x-ms-enum": {
            "name": "DeploymentStatus",
            "values": [
              {
                "value": "undefined",
                "description": "The deployment status is undefined."
              },
              {
                "value": "notDeployed",
                "description": "The deployment status is not deployed."
              },
              {
                "value": "inProgress",
                "description": "The deployment status is in progress."
              },
              {
                "value": "succeeded",
                "description": "The deployment status is succeeded."
              },
              {
                "value": "partiallySucceeded",
                "description": "The deployment status is partiallysucceeded."
              },
              {
                "value": "failed",
                "description": "The deployment status is failed."
              },
              {
                "value": "all",
                "description": "The deployment status is all."
              }
            ]
          }
        }
      }
    },
    "DeploymentAuthorizationInfo": {
      "description": "",
      "type": "object",
      "properties": {
        "authorizationHeaderFor": {
          "description": "Authorization header type, typically either RevalidateApproverIdentity or OnBehalfOf.",
          "enum": [
            "revalidateApproverIdentity",
            "onBehalfOf"
          ],
          "x-ms-enum": {
            "name": "AuthorizationHeaderFor",
            "values": [
              {
                "value": "revalidateApproverIdentity",
                "description": ""
              },
              {
                "value": "onBehalfOf",
                "description": ""
              }
            ]
          }
        },
        "resources": {
          "description": "List of resources.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tenantId": {
          "description": "ID of the tenant.",
          "type": "string"
        },
        "vstsAccessTokenKey": {
          "description": "Access token key.",
          "type": "string"
        }
      }
    },
    "DeploymentCompletedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DeploymentEvent"
        }
      ],
      "properties": {
        "comment": {
          "type": "string"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "deployment": {
          "$ref": "#/definitions/Deployment"
        },
        "environment": {
          "$ref": "#/definitions/ReleaseEnvironment"
        },
        "project": {
          "$ref": "#/definitions/ProjectReference"
        }
      }
    },
    "DeploymentEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ReleaseEvent"
        }
      ],
      "properties": {
        "attemptId": {
          "type": "integer",
          "format": "int32"
        },
        "stageName": {
          "type": "string"
        }
      }
    },
    "DeploymentInput": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseDeploymentInput"
        }
      ],
      "properties": {
        "artifactsDownloadInput": {
          "description": "Artifacts that downloaded during job execution.",
          "$ref": "#/definitions/ArtifactsDownloadInput"
        },
        "demands": {
          "description": "List demands that needs to meet to execute the job.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Demand"
          }
        },
        "enableAccessToken": {
          "description": "Indicates whether to include access token in deployment job or not.",
          "type": "boolean"
        },
        "queueId": {
          "description": "Id of the pool on which job get executed.",
          "type": "integer",
          "format": "int32"
        },
        "skipArtifactsDownload": {
          "description": "Indicates whether artifacts downloaded while job execution or not.",
          "type": "boolean"
        }
      }
    },
    "DeploymentJob": {
      "description": "",
      "type": "object",
      "properties": {
        "job": {
          "description": "Parent task of all executed tasks.",
          "$ref": "#/definitions/ReleaseTask"
        },
        "tasks": {
          "description": "List of  executed tasks with in job.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseTask"
          }
        }
      }
    },
    "DeploymentManualInterventionPendingEvent": {
      "description": "",
      "type": "object",
      "properties": {
        "approval": {
          "$ref": "#/definitions/ReleaseApproval"
        },
        "deployment": {
          "$ref": "#/definitions/Deployment"
        },
        "emailRecipients": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        },
        "environmentOwner": {
          "$ref": "#/definitions/IdentityRef"
        },
        "manualIntervention": {
          "$ref": "#/definitions/ManualIntervention"
        },
        "project": {
          "$ref": "#/definitions/ProjectReference"
        },
        "release": {
          "$ref": "#/definitions/Release"
        }
      }
    },
    "DeploymentQueryParameters": {
      "description": "",
      "type": "object",
      "properties": {
        "artifactSourceId": {
          "description": "Query deployments based specified artifact source id.",
          "type": "string"
        },
        "artifactTypeId": {
          "description": "Query deployments based specified artifact type id.",
          "type": "string"
        },
        "artifactVersions": {
          "description": "Query deployments based specified artifact versions.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deploymentsPerEnvironment": {
          "description": "Query deployments number of deployments per environment.",
          "type": "integer",
          "format": "int32"
        },
        "deploymentStatus": {
          "description": "Query deployment based on deployment status.",
          "enum": [
            "undefined",
            "notDeployed",
            "inProgress",
            "succeeded",
            "partiallySucceeded",
            "failed",
            "all"
          ],
          "x-ms-enum": {
            "name": "DeploymentStatus",
            "values": [
              {
                "value": "undefined",
                "description": "The deployment status is undefined."
              },
              {
                "value": "notDeployed",
                "description": "The deployment status is not deployed."
              },
              {
                "value": "inProgress",
                "description": "The deployment status is in progress."
              },
              {
                "value": "succeeded",
                "description": "The deployment status is succeeded."
              },
              {
                "value": "partiallySucceeded",
                "description": "The deployment status is partiallysucceeded."
              },
              {
                "value": "failed",
                "description": "The deployment status is failed."
              },
              {
                "value": "all",
                "description": "The deployment status is all."
              }
            ]
          }
        },
        "environments": {
          "description": "Query deployments of specified environments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DefinitionEnvironmentReference"
          }
        },
        "expands": {
          "description": "Query deployments based specified expands.",
          "enum": [
            "all",
            "deploymentOnly",
            "approvals",
            "artifacts"
          ],
          "x-ms-enum": {
            "name": "DeploymentExpands",
            "values": [
              {
                "value": "all",
                "description": ""
              },
              {
                "value": "deploymentOnly",
                "description": ""
              },
              {
                "value": "approvals",
                "description": ""
              },
              {
                "value": "artifacts",
                "description": ""
              }
            ]
          }
        },
        "isDeleted": {
          "description": "Specify deleted deployments should return or not.",
          "type": "boolean"
        },
        "operationStatus": {
          "description": "Query deployment based on deployment operation status.",
          "enum": [
            "undefined",
            "queued",
            "scheduled",
            "pending",
            "approved",
            "rejected",
            "deferred",
            "queuedForAgent",
            "phaseInProgress",
            "phaseSucceeded",
            "phasePartiallySucceeded",
            "phaseFailed",
            "canceled",
            "phaseCanceled",
            "manualInterventionPending",
            "queuedForPipeline",
            "cancelling",
            "evaluatingGates",
            "gateFailed",
            "all"
          ],
          "x-ms-enum": {
            "name": "DeploymentOperationStatus",
            "values": [
              {
                "value": "undefined",
                "description": "The deployment operation status is undefined."
              },
              {
                "value": "queued",
                "description": "The deployment operation status is queued."
              },
              {
                "value": "scheduled",
                "description": "The deployment operation status is scheduled."
              },
              {
                "value": "pending",
                "description": "The deployment operation status is pending."
              },
              {
                "value": "approved",
                "description": "The deployment operation status is approved."
              },
              {
                "value": "rejected",
                "description": "The deployment operation status is rejected."
              },
              {
                "value": "deferred",
                "description": "The deployment operation status is deferred."
              },
              {
                "value": "queuedForAgent",
                "description": "The deployment operation status is queued for agent."
              },
              {
                "value": "phaseInProgress",
                "description": "The deployment operation status is phase in progress."
              },
              {
                "value": "phaseSucceeded",
                "description": "The deployment operation status is phase succeeded."
              },
              {
                "value": "phasePartiallySucceeded",
                "description": "The deployment operation status is phase partially succeeded."
              },
              {
                "value": "phaseFailed",
                "description": "The deployment operation status is phase failed."
              },
              {
                "value": "canceled",
                "description": "The deployment operation status is canceled."
              },
              {
                "value": "phaseCanceled",
                "description": "The deployment operation status is phase canceled."
              },
              {
                "value": "manualInterventionPending",
                "description": "The deployment operation status is manualintervention pending."
              },
              {
                "value": "queuedForPipeline",
                "description": "The deployment operation status is queued for pipeline."
              },
              {
                "value": "cancelling",
                "description": "The deployment operation status is cancelling."
              },
              {
                "value": "evaluatingGates",
                "description": "The deployment operation status is EvaluatingGates."
              },
              {
                "value": "gateFailed",
                "description": "The deployment operation status is GateFailed."
              },
              {
                "value": "all",
                "description": "The deployment operation status is all."
              }
            ]
          }
        },
        "queryType": {
          "description": "Query deployments based query type.",
          "enum": [
            "regular",
            "failingSince"
          ],
          "x-ms-enum": {
            "name": "DeploymentsQueryType",
            "values": [
              {
                "value": "regular",
                "description": ""
              },
              {
                "value": "failingSince",
                "description": ""
              }
            ]
          }
        },
        "sourceBranch": {
          "description": "Query deployments based specified source branch.",
          "type": "string"
        }
      }
    },
    "DeploymentStartedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DeploymentEvent"
        }
      ],
      "properties": {
        "environment": {
          "$ref": "#/definitions/ReleaseEnvironment"
        },
        "project": {
          "$ref": "#/definitions/ProjectReference"
        },
        "release": {
          "$ref": "#/definitions/Release"
        }
      }
    },
    "DeployPhase": {
      "description": "",
      "type": "object",
      "properties": {
        "name": {
          "description": "Gets and sets the name of deploy phase.",
          "type": "string"
        },
        "phaseType": {
          "description": "Indicates the deploy phase type.",
          "enum": [
            "undefined",
            "agentBasedDeployment",
            "runOnServer",
            "machineGroupBasedDeployment",
            "deploymentGates"
          ],
          "x-ms-enum": {
            "name": "DeployPhaseTypes",
            "values": [
              {
                "value": "undefined",
                "description": "Phase type not defined. Don't use this."
              },
              {
                "value": "agentBasedDeployment",
                "description": "Phase type which contains tasks executed on agent."
              },
              {
                "value": "runOnServer",
                "description": "Phase type which contains tasks executed by server."
              },
              {
                "value": "machineGroupBasedDeployment",
                "description": "Phase type which contains tasks executed on deployment group machines."
              },
              {
                "value": "deploymentGates",
                "description": "Phase type which contains tasks which acts as Gates for the deployment to go forward."
              }
            ]
          }
        },
        "rank": {
          "description": "Gets and sets the rank of deploy phase.",
          "type": "integer",
          "format": "int32"
        },
        "refName": {
          "description": "Gets and sets the reference name of deploy phase.",
          "type": "string"
        },
        "workflowTasks": {
          "description": "Gets and sets the workflow tasks for the deploy phase.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkflowTask"
          }
        }
      }
    },
    "EmailRecipients": {
      "description": "",
      "type": "object",
      "properties": {
        "emailAddresses": {
          "description": "List of email addresses.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tfsIds": {
          "description": "List of TFS IDs guids.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    },
    "EnvironmentExecutionPolicy": {
      "description": "Defines policy on environment queuing at Release Management side queue. We will send to Environment Runner [creating pre-deploy and other steps] only when the policies mentioned are satisfied.",
      "type": "object",
      "properties": {
        "concurrencyCount": {
          "description": "This policy decides, how many environments would be with Environment Runner.",
          "type": "integer",
          "format": "int32"
        },
        "queueDepthCount": {
          "description": "Queue depth in the EnvironmentQueue table, this table keeps the environment entries till Environment Runner is free [as per it's policy] to take another environment for running.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "EnvironmentOptions": {
      "description": "",
      "type": "object",
      "properties": {
        "autoLinkWorkItems": {
          "description": "Gets and sets as the auto link workitems or not.",
          "type": "boolean"
        },
        "badgeEnabled": {
          "description": "Gets and sets as the badge enabled or not.",
          "type": "boolean"
        },
        "publishDeploymentStatus": {
          "description": "Gets and sets as the publish deployment status or not.",
          "type": "boolean"
        },
        "pullRequestDeploymentEnabled": {
          "description": "Gets and sets as the.pull request deployment enabled or not.",
          "type": "boolean"
        }
      }
    },
    "EnvironmentRetentionPolicy": {
      "description": "",
      "type": "object",
      "properties": {
        "daysToKeep": {
          "description": "Gets and sets the number of days to keep environment.",
          "type": "integer",
          "format": "int32"
        },
        "releasesToKeep": {
          "description": "Gets and sets the number of releases to keep.",
          "type": "integer",
          "format": "int32"
        },
        "retainBuild": {
          "description": "Gets and sets as the build to be retained or not.",
          "type": "boolean"
        }
      }
    },
    "EnvironmentTrigger": {
      "description": "",
      "type": "object",
      "properties": {
        "definitionEnvironmentId": {
          "description": "Definition environment ID on which this trigger applicable.",
          "type": "integer",
          "format": "int32"
        },
        "releaseDefinitionId": {
          "description": "ReleaseDefinition ID on which this trigger applicable.",
          "type": "integer",
          "format": "int32"
        },
        "triggerContent": {
          "description": "Gets or sets the trigger content.",
          "type": "string"
        },
        "triggerType": {
          "description": "Gets or sets the trigger type.",
          "enum": [
            "undefined",
            "deploymentGroupRedeploy",
            "rollbackRedeploy"
          ],
          "x-ms-enum": {
            "name": "EnvironmentTriggerType",
            "values": [
              {
                "value": "undefined",
                "description": "Environment trigger type undefined."
              },
              {
                "value": "deploymentGroupRedeploy",
                "description": "Environment trigger type is deployment group redeploy."
              },
              {
                "value": "rollbackRedeploy",
                "description": "Environment trigger type is Rollback."
              }
            ]
          }
        }
      }
    },
    "EnvironmentTriggerContent": {
      "description": "",
      "type": "object",
      "properties": {
        "action": {
          "description": "Gets or sets action.",
          "type": "string"
        },
        "eventTypes": {
          "description": "Gets or sets list of event types.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ExecutionInput": {
      "description": "",
      "type": "object",
      "properties": {
        "parallelExecutionType": {
          "description": "Parallel execution type, for example MultiConfiguration or MultiMachine.",
          "enum": [
            "none",
            "multiConfiguration",
            "multiMachine"
          ],
          "x-ms-enum": {
            "name": "ParallelExecutionTypes",
            "values": [
              {
                "value": "none",
                "description": ""
              },
              {
                "value": "multiConfiguration",
                "description": ""
              },
              {
                "value": "multiMachine",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "FavoriteItem": {
      "description": "Class to represent favorite entry.",
      "type": "object",
      "properties": {
        "data": {
          "description": "Application specific data for the entry.",
          "type": "string"
        },
        "id": {
          "description": "Unique Id of the entry.",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "Display text for favorite entry.",
          "type": "string"
        },
        "type": {
          "description": "Application specific favorite entry type. Empty or Null represents that Favorite item is a Folder.",
          "type": "string"
        }
      }
    },
    "Folder": {
      "description": "",
      "type": "object",
      "properties": {
        "createdBy": {
          "description": "Identity who created this folder.",
          "$ref": "#/definitions/IdentityRef"
        },
        "createdOn": {
          "description": "Time when this folder created.",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "Description of the folder.",
          "type": "string"
        },
        "lastChangedBy": {
          "description": "Identity who last changed this folder.",
          "$ref": "#/definitions/IdentityRef"
        },
        "lastChangedDate": {
          "description": "Time when this folder last changed.",
          "type": "string",
          "format": "date-time"
        },
        "path": {
          "description": "path of the folder.",
          "type": "string"
        }
      }
    },
    "GatesDeploymentInput": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseDeploymentInput"
        }
      ],
      "properties": {
        "minimumSuccessDuration": {
          "description": "Gates minimum success duration.",
          "type": "integer",
          "format": "int32"
        },
        "samplingInterval": {
          "description": "Gates sampling interval.",
          "type": "integer",
          "format": "int32"
        },
        "stabilizationTime": {
          "description": "Gates stabilization time.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "GatesDeployPhase": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DeployPhase"
        }
      ],
      "properties": {
        "deploymentInput": {
          "description": "Gets and sets the gate job input.",
          "$ref": "#/definitions/GatesDeploymentInput"
        }
      }
    },
    "GateUpdateMetadata": {
      "description": "",
      "type": "object",
      "properties": {
        "comment": {
          "description": "Comment.",
          "type": "string"
        },
        "gatesToIgnore": {
          "description": "Name of gate to be ignored.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GitArtifactDownloadInput": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactDownloadInputBase"
        }
      ],
      "properties": {}
    },
    "GitHubArtifactDownloadInput": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactDownloadInputBase"
        }
      ],
      "properties": {}
    },
    "GraphSubjectBase": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "description": "This field contains zero or more interesting links about the graph subject. These links may be invoked to obtain additional relationships or more detailed information about this graph subject.",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "descriptor": {
          "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.",
          "type": "string"
        },
        "displayName": {
          "description": "This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.",
          "type": "string"
        },
        "url": {
          "description": "This url is the full route to the source resource of this graph subject.",
          "type": "string"
        }
      }
    },
    "IdentityRef": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GraphSubjectBase"
        }
      ],
      "properties": {
        "directoryAlias": {
          "description": "Deprecated - Can be retrieved by querying the Graph user referenced in the \"self\" entry of the IdentityRef \"_links\" dictionary",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "imageUrl": {
          "description": "Deprecated - Available in the \"avatar\" entry of the IdentityRef \"_links\" dictionary",
          "type": "string"
        },
        "inactive": {
          "description": "Deprecated - Can be retrieved by querying the Graph membership state referenced in the \"membershipState\" entry of the GraphUser \"_links\" dictionary",
          "type": "boolean"
        },
        "isAadIdentity": {
          "description": "Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsAadUserType/Descriptor.IsAadGroupType)",
          "type": "boolean"
        },
        "isContainer": {
          "description": "Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsGroupType)",
          "type": "boolean"
        },
        "isDeletedInOrigin": {
          "type": "boolean"
        },
        "profileUrl": {
          "description": "Deprecated - not in use in most preexisting implementations of ToIdentityRef",
          "type": "string"
        },
        "uniqueName": {
          "description": "Deprecated - use Domain+PrincipalName instead",
          "type": "string"
        }
      }
    },
    "IgnoredGate": {
      "description": "",
      "type": "object",
      "properties": {
        "lastModifiedOn": {
          "description": "Gets the date on which gate is last ignored.",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "Name of gate ignored.",
          "type": "string"
        }
      }
    },
    "InputDescriptor": {
      "description": "Describes an input for subscriptions.",
      "type": "object",
      "properties": {
        "dependencyInputIds": {
          "description": "The ids of all inputs that the value of this input is dependent on.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "description": "Description of what this input is used for",
          "type": "string"
        },
        "groupName": {
          "description": "The group localized name to which this input belongs and can be shown as a header for the container that will include all the inputs in the group.",
          "type": "string"
        },
        "hasDynamicValueInformation": {
          "description": "If true, the value information for this input is dynamic and should be fetched when the value of dependency inputs change.",
          "type": "boolean"
        },
        "id": {
          "description": "Identifier for the subscription input",
          "type": "string"
        },
        "inputMode": {
          "description": "Mode in which the value of this input should be entered",
          "enum": [
            "none",
            "textBox",
            "passwordBox",
            "combo",
            "radioButtons",
            "checkBox",
            "textArea"
          ],
          "x-ms-enum": {
            "name": "InputMode",
            "values": [
              {
                "value": "none",
                "description": "This input should not be shown in the UI"
              },
              {
                "value": "textBox",
                "description": "An input text box should be shown"
              },
              {
                "value": "passwordBox",
                "description": "An password input box should be shown"
              },
              {
                "value": "combo",
                "description": "A select/combo control should be shown"
              },
              {
                "value": "radioButtons",
                "description": "Radio buttons should be shown"
              },
              {
                "value": "checkBox",
                "description": "Checkbox should be shown(for true/false values)"
              },
              {
                "value": "textArea",
                "description": "A multi-line text area should be shown"
              }
            ]
          }
        },
        "isConfidential": {
          "description": "Gets whether this input is confidential, such as for a password or application key",
          "type": "boolean"
        },
        "name": {
          "description": "Localized name which can be shown as a label for the subscription input",
          "type": "string"
        },
        "properties": {
          "description": "Custom properties for the input which can be used by the service provider",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "type": {
          "description": "Underlying data type for the input value. When this value is specified, InputMode, Validation and Values are optional.",
          "type": "string"
        },
        "useInDefaultDescription": {
          "description": "Gets whether this input is included in the default generated action description.",
          "type": "boolean"
        },
        "validation": {
          "description": "Information to use to validate this input's value",
          "$ref": "#/definitions/InputValidation"
        },
        "valueHint": {
          "description": "A hint for input value. It can be used in the UI as the input placeholder.",
          "type": "string"
        },
        "values": {
          "description": "Information about possible values for this input",
          "$ref": "#/definitions/InputValues"
        }
      }
    },
    "InputValidation": {
      "description": "Describes what values are valid for a subscription input",
      "type": "object",
      "properties": {
        "dataType": {
          "description": "Gets or sets the data type to validate.",
          "enum": [
            "none",
            "string",
            "number",
            "boolean",
            "guid",
            "uri"
          ],
          "x-ms-enum": {
            "name": "InputDataType",
            "values": [
              {
                "value": "none",
                "description": "No data type is specified."
              },
              {
                "value": "string",
                "description": "Represents a textual value."
              },
              {
                "value": "number",
                "description": "Represents a numeric value."
              },
              {
                "value": "boolean",
                "description": "Represents a value of true or false."
              },
              {
                "value": "guid",
                "description": "Represents a Guid."
              },
              {
                "value": "uri",
                "description": "Represents a URI."
              }
            ]
          }
        },
        "isRequired": {
          "description": "Gets or sets if this is a required field.",
          "type": "boolean"
        },
        "maxLength": {
          "description": "Gets or sets the maximum length of this descriptor.",
          "type": "integer",
          "format": "int32"
        },
        "maxValue": {
          "description": "Gets or sets the minimum value for this descriptor.",
          "type": "string",
          "format": "decimal"
        },
        "minLength": {
          "description": "Gets or sets the minimum length of this descriptor.",
          "type": "integer",
          "format": "int32"
        },
        "minValue": {
          "description": "Gets or sets the minimum value for this descriptor.",
          "type": "string",
          "format": "decimal"
        },
        "pattern": {
          "description": "Gets or sets the pattern to validate.",
          "type": "string"
        },
        "patternMismatchErrorMessage": {
          "description": "Gets or sets the error on pattern mismatch.",
          "type": "string"
        }
      }
    },
    "InputValue": {
      "description": "Information about a single value for an input",
      "type": "object",
      "properties": {
        "data": {
          "description": "Any other data about this input",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "displayValue": {
          "description": "The text to show for the display of this value",
          "type": "string"
        },
        "value": {
          "description": "The value to store for this input",
          "type": "string"
        }
      }
    },
    "InputValues": {
      "description": "Information about the possible/allowed values for a given subscription input",
      "type": "object",
      "properties": {
        "defaultValue": {
          "description": "The default value to use for this input",
          "type": "string"
        },
        "error": {
          "description": "Errors encountered while computing dynamic values.",
          "$ref": "#/definitions/InputValuesError"
        },
        "inputId": {
          "description": "The id of the input",
          "type": "string"
        },
        "isDisabled": {
          "description": "Should this input be disabled",
          "type": "boolean"
        },
        "isLimitedToPossibleValues": {
          "description": "Should the value be restricted to one of the values in the PossibleValues (True) or are the values in PossibleValues just a suggestion (False)",
          "type": "boolean"
        },
        "isReadOnly": {
          "description": "Should this input be made read-only",
          "type": "boolean"
        },
        "possibleValues": {
          "description": "Possible values that this input can take",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputValue"
          }
        }
      }
    },
    "InputValuesError": {
      "description": "Error information related to a subscription input value.",
      "type": "object",
      "properties": {
        "message": {
          "description": "The error message.",
          "type": "string"
        }
      }
    },
    "InputValuesQuery": {
      "description": "",
      "type": "object",
      "properties": {
        "currentValues": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "inputValues": {
          "description": "The input values to return on input, and the result from the consumer on output.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputValues"
          }
        },
        "resource": {
          "description": "Subscription containing information about the publisher/consumer and the current input values",
          "type": "object"
        }
      }
    },
    "Issue": {
      "description": "",
      "type": "object",
      "properties": {
        "data": {
          "description": "Issue data.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "issueType": {
          "description": "Issue type, for example error, warning or info.",
          "type": "string"
        },
        "message": {
          "description": "Issue message.",
          "type": "string"
        }
      }
    },
    "JenkinsArtifactDownloadInput": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactDownloadInputBase"
        }
      ],
      "properties": {}
    },
    "MachineGroupBasedDeployPhase": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DeployPhase"
        }
      ],
      "properties": {
        "deploymentInput": {
          "description": "Gets and sets the deployment group job input",
          "$ref": "#/definitions/MachineGroupDeploymentInput"
        }
      }
    },
    "MachineGroupDeploymentInput": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DeploymentInput"
        }
      ],
      "properties": {
        "deploymentHealthOption": {
          "description": "Deployment group health option.",
          "type": "string"
        },
        "healthPercent": {
          "description": "Minimum percentage of the targets guaranteed to be healthy.",
          "type": "integer",
          "format": "int32"
        },
        "tags": {
          "description": "Deployment target tag filter.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "MailMessage": {
      "description": "",
      "type": "object",
      "properties": {
        "body": {
          "description": "Body of mail.",
          "type": "string"
        },
        "cc": {
          "description": "Mail CC recipients.",
          "$ref": "#/definitions/EmailRecipients"
        },
        "inReplyTo": {
          "description": "Reply to.",
          "type": "string"
        },
        "messageId": {
          "description": "Message ID of the mail.",
          "type": "string"
        },
        "replyBy": {
          "description": "Data when should be replied to mail.",
          "type": "string",
          "format": "date-time"
        },
        "replyTo": {
          "description": "Reply to Email recipients.",
          "$ref": "#/definitions/EmailRecipients"
        },
        "sections": {
          "description": "List of mail section types.",
          "type": "array",
          "items": {
            "enum": [
              "details",
              "environments",
              "issues",
              "testResults",
              "workItems",
              "releaseInfo"
            ],
            "x-ms-enum": {
              "name": "MailSectionType",
              "values": [
                {
                  "value": "details",
                  "description": ""
                },
                {
                  "value": "environments",
                  "description": ""
                },
                {
                  "value": "issues",
                  "description": ""
                },
                {
                  "value": "testResults",
                  "description": ""
                },
                {
                  "value": "workItems",
                  "description": ""
                },
                {
                  "value": "releaseInfo",
                  "description": ""
                }
              ]
            }
          }
        },
        "senderType": {
          "description": "Mail sender type.",
          "enum": [
            "serviceAccount",
            "requestingUser"
          ],
          "x-ms-enum": {
            "name": "SenderType",
            "values": [
              {
                "value": "serviceAccount",
                "description": ""
              },
              {
                "value": "requestingUser",
                "description": ""
              }
            ]
          }
        },
        "subject": {
          "description": "Subject of the mail.",
          "type": "string"
        },
        "to": {
          "description": "Mail To recipients.",
          "$ref": "#/definitions/EmailRecipients"
        }
      }
    },
    "ManualIntervention": {
      "description": "",
      "type": "object",
      "properties": {
        "approver": {
          "description": "Gets or sets the identity who should approve.",
          "$ref": "#/definitions/IdentityRef"
        },
        "comments": {
          "description": "Gets or sets comments for approval.",
          "type": "string"
        },
        "createdOn": {
          "description": "Gets date on which it got created.",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "Gets the unique identifier for manual intervention.",
          "type": "integer",
          "format": "int32"
        },
        "instructions": {
          "description": "Gets or sets instructions for approval.",
          "type": "string"
        },
        "modifiedOn": {
          "description": "Gets date on which it got modified.",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "Gets or sets the name.",
          "type": "string"
        },
        "release": {
          "description": "Gets releaseReference for manual intervention.",
          "$ref": "#/definitions/ReleaseShallowReference"
        },
        "releaseDefinition": {
          "description": "Gets releaseDefinitionReference for manual intervention.",
          "$ref": "#/definitions/ReleaseDefinitionShallowReference"
        },
        "releaseEnvironment": {
          "description": "Gets releaseEnvironmentReference for manual intervention.",
          "$ref": "#/definitions/ReleaseEnvironmentShallowReference"
        },
        "status": {
          "description": "Gets or sets the status of the manual intervention.",
          "enum": [
            "unknown",
            "pending",
            "rejected",
            "approved",
            "canceled"
          ],
          "x-ms-enum": {
            "name": "ManualInterventionStatus",
            "values": [
              {
                "value": "unknown",
                "description": "The manual intervention does not have the status set."
              },
              {
                "value": "pending",
                "description": "The manual intervention is pending."
              },
              {
                "value": "rejected",
                "description": "The manual intervention is rejected."
              },
              {
                "value": "approved",
                "description": "The manual intervention is approved."
              },
              {
                "value": "canceled",
                "description": "The manual intervention is canceled."
              }
            ]
          }
        },
        "taskInstanceId": {
          "description": "Get task instance identifier.",
          "type": "string",
          "format": "uuid"
        },
        "url": {
          "description": "Gets url to access the manual intervention.",
          "type": "string"
        }
      }
    },
    "ManualInterventionUpdateMetadata": {
      "description": "",
      "type": "object",
      "properties": {
        "comment": {
          "description": "Sets the comment for manual intervention update.",
          "type": "string"
        },
        "status": {
          "description": "Sets the status of the manual intervention.",
          "enum": [
            "unknown",
            "pending",
            "rejected",
            "approved",
            "canceled"
          ],
          "x-ms-enum": {
            "name": "ManualInterventionStatus",
            "values": [
              {
                "value": "unknown",
                "description": "The manual intervention does not have the status set."
              },
              {
                "value": "pending",
                "description": "The manual intervention is pending."
              },
              {
                "value": "rejected",
                "description": "The manual intervention is rejected."
              },
              {
                "value": "approved",
                "description": "The manual intervention is approved."
              },
              {
                "value": "canceled",
                "description": "The manual intervention is canceled."
              }
            ]
          }
        }
      }
    },
    "MappingDetails": {
      "description": "",
      "type": "object",
      "properties": {
        "mappings": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/InputValue"
          }
        }
      }
    },
    "Metric": {
      "description": "",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the Metric.",
          "type": "string"
        },
        "value": {
          "description": "Value of the Metric.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "MultiConfigInput": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ParallelExecutionInputBase"
        }
      ],
      "properties": {
        "multipliers": {
          "description": "Multipliers for parallel execution of deployment, for example x86,x64.",
          "type": "string"
        }
      }
    },
    "MultiMachineInput": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ParallelExecutionInputBase"
        }
      ],
      "properties": {}
    },
    "OrgPipelineReleaseSettings": {
      "description": "",
      "type": "object",
      "properties": {
        "hasManagePipelinePoliciesPermission": {
          "description": "Defines whether user can manage pipeline settings.",
          "type": "boolean"
        },
        "orgEnforceJobAuthScope": {
          "description": "EnforceJobAuthScope setting at organisaion level. If enabled, scope of access for all release pipelines in the organisation reduces to the current project.",
          "type": "boolean"
        }
      }
    },
    "OrgPipelineReleaseSettingsUpdateParameters": {
      "description": "",
      "type": "object",
      "properties": {
        "orgEnforceJobAuthScope": {
          "description": "EnforceJobAuthScope setting at organisaion level. If enabled, scope of access for all release pipelines in the organisation reduces to the current project.",
          "type": "boolean"
        }
      }
    },
    "PackageTrigger": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ReleaseTriggerBase"
        }
      ],
      "properties": {
        "alias": {
          "description": "Package trigger alias.",
          "type": "string"
        }
      }
    },
    "ParallelExecutionInputBase": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ExecutionInput"
        }
      ],
      "properties": {
        "continueOnError": {
          "description": "Indicate whether continue execution of deployment on error or not.",
          "type": "boolean"
        },
        "maxNumberOfAgents": {
          "description": "Maximum number of agents used while parallel execution.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PipelineProcess": {
      "description": "",
      "type": "object",
      "properties": {
        "type": {
          "description": "Pipeline process type.",
          "enum": [
            "designer",
            "yaml"
          ],
          "x-ms-enum": {
            "name": "PipelineProcessTypes",
            "values": [
              {
                "value": "designer",
                "description": ""
              },
              {
                "value": "yaml",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "ProcessParameters": {
      "description": "",
      "type": "object",
      "properties": {
        "dataSourceBindings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataSourceBindingBase"
          }
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskInputDefinitionBase"
          }
        },
        "sourceDefinitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskSourceDefinitionBase"
          }
        }
      }
    },
    "ProjectPipelineReleaseSettings": {
      "description": "",
      "type": "object",
      "properties": {
        "enforceJobAuthScope": {
          "description": "EnforceJobAuthScope setting at project level. If enabled, scope of access for all release pipelines reduces to the current project.",
          "type": "boolean"
        },
        "hasManageSettingsPermission": {
          "description": "Defines whether user can manage pipeline settings.",
          "type": "boolean"
        },
        "orgEnforceJobAuthScope": {
          "description": "EnforceJobAuthScope setting at organisaion level. If enabled, scope of access for all release pipelines in the organisation reduces to the current project.",
          "type": "boolean"
        },
        "publicProject": {
          "description": "Defines whether project is public.",
          "type": "boolean"
        }
      }
    },
    "ProjectPipelineReleaseSettingsUpdateParameters": {
      "description": "",
      "type": "object",
      "properties": {
        "enforceJobAuthScope": {
          "description": "EnforceJobAuthScope setting at project level. If enabled, scope of access for all release pipelines reduces to the current project.",
          "type": "boolean"
        }
      }
    },
    "ProjectReference": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "description": "Gets the unique identifier of this field.",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "Gets name of project.",
          "type": "string"
        }
      }
    },
    "PropertiesCollection": {
      "description": "The class represents a property bag as a collection of key-value pairs. Values of all primitive types (any type with a `TypeCode != TypeCode.Object`) except for `DBNull` are accepted. Values of type Byte[], Int32, Double, DateType and String preserve their type, other primitives are retuned as a String. Byte[] expected as base64 encoded string.",
      "type": "object",
      "properties": {
        "count": {
          "description": "The count of properties in the collection.",
          "type": "integer",
          "format": "int32"
        },
        "item": {
          "type": "object"
        },
        "keys": {
          "description": "The set of keys in the collection.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "values": {
          "description": "The set of values in the collection.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PropertySelector": {
      "description": "",
      "type": "object",
      "properties": {
        "properties": {
          "description": "List of properties.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "selectorType": {
          "description": "Property selector type.",
          "enum": [
            "inclusion",
            "exclusion"
          ],
          "x-ms-enum": {
            "name": "PropertySelectorType",
            "values": [
              {
                "value": "inclusion",
                "description": "Include in property selector."
              },
              {
                "value": "exclusion",
                "description": "Exclude in property selector."
              }
            ]
          }
        }
      }
    },
    "PullRequestConfiguration": {
      "description": "",
      "type": "object",
      "properties": {
        "codeRepositoryReference": {
          "description": "Code repository reference.",
          "$ref": "#/definitions/CodeRepositoryReference"
        },
        "useArtifactReference": {
          "description": "In case of Source based artifacts, Code reference will be present in Artifact details.",
          "type": "boolean"
        }
      }
    },
    "PullRequestFilter": {
      "description": "",
      "type": "object",
      "properties": {
        "tags": {
          "description": "List of tags.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "targetBranch": {
          "description": "Target branch of pull request.",
          "type": "string"
        }
      }
    },
    "PullRequestTrigger": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ReleaseTriggerBase"
        }
      ],
      "properties": {
        "artifactAlias": {
          "description": "Artifact alias trigger is linked to.",
          "type": "string"
        },
        "pullRequestConfiguration": {
          "description": "Code reference details of pull request.",
          "$ref": "#/definitions/PullRequestConfiguration"
        },
        "statusPolicyName": {
          "description": "Policy name using which status will be published to pull request.",
          "type": "string"
        },
        "triggerConditions": {
          "description": "List of filters applied while trigger.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PullRequestFilter"
          }
        }
      }
    },
    "QueuedReleaseData": {
      "description": "",
      "type": "object",
      "properties": {
        "projectId": {
          "description": "Project ID of the release.",
          "type": "string",
          "format": "uuid"
        },
        "queuePosition": {
          "description": "Release queue position.",
          "type": "integer",
          "format": "int32"
        },
        "releaseId": {
          "description": "Queued release ID.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "RealtimeReleaseDefinitionEvent": {
      "description": "",
      "type": "object",
      "properties": {
        "definitionId": {
          "type": "integer",
          "format": "int32"
        },
        "projectId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "RealtimeReleaseEvent": {
      "description": "",
      "type": "object",
      "properties": {
        "environmentId": {
          "type": "integer",
          "format": "int32"
        },
        "projectId": {
          "type": "string",
          "format": "uuid"
        },
        "releaseId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ReferenceLinks": {
      "description": "The class to represent a collection of REST reference links.",
      "type": "object",
      "properties": {
        "links": {
          "description": "The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "Release": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "description": "Gets links to access the release.",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "artifacts": {
          "description": "Gets or sets the list of artifacts.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Artifact"
          }
        },
        "comment": {
          "description": "Gets or sets comment.",
          "type": "string"
        },
        "createdBy": {
          "description": "Gets or sets the identity who created.",
          "$ref": "#/definitions/IdentityRef"
        },
        "createdFor": {
          "description": "Gets or sets the identity for whom release was created.",
          "$ref": "#/definitions/IdentityRef"
        },
        "createdOn": {
          "description": "Gets date on which it got created.",
          "type": "string",
          "format": "date-time"
        },
        "definitionSnapshotRevision": {
          "description": "Gets revision number of definition snapshot.",
          "type": "integer",
          "format": "int32"
        },
        "description": {
          "description": "Gets or sets description of release.",
          "type": "string"
        },
        "environments": {
          "description": "Gets list of environments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseEnvironment"
          }
        },
        "id": {
          "description": "Gets the unique identifier of this field.",
          "type": "integer",
          "format": "int32"
        },
        "keepForever": {
          "description": "Whether to exclude the release from retention policies.",
          "type": "boolean"
        },
        "logsContainerUrl": {
          "description": "Gets logs container url.",
          "type": "string"
        },
        "modifiedBy": {
          "description": "Gets or sets the identity who modified.",
          "$ref": "#/definitions/IdentityRef"
        },
        "modifiedOn": {
          "description": "Gets date on which it got modified.",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "Gets name.",
          "type": "string"
        },
        "poolName": {
          "description": "Gets pool name.",
          "type": "string"
        },
        "projectReference": {
          "description": "Gets or sets project reference.",
          "$ref": "#/definitions/ProjectReference"
        },
        "properties": {
          "$ref": "#/definitions/PropertiesCollection"
        },
        "reason": {
          "description": "Gets reason of release.",
          "enum": [
            "none",
            "manual",
            "continuousIntegration",
            "schedule",
            "pullRequest"
          ],
          "x-ms-enum": {
            "name": "ReleaseReason",
            "values": [
              {
                "value": "none",
                "description": "Indicates the release triggered reason not set."
              },
              {
                "value": "manual",
                "description": "Indicates the release triggered manually."
              },
              {
                "value": "continuousIntegration",
                "description": "Indicates the release triggered by continuous integration."
              },
              {
                "value": "schedule",
                "description": "Indicates the release triggered by schedule."
              },
              {
                "value": "pullRequest",
                "description": "Indicates the release triggered by PullRequest."
              }
            ]
          }
        },
        "releaseDefinition": {
          "description": "Gets releaseDefinitionReference which specifies the reference of the release definition to which this release is associated.",
          "$ref": "#/definitions/ReleaseDefinitionShallowReference"
        },
        "releaseDefinitionRevision": {
          "description": "Gets or sets the release definition revision.",
          "type": "integer",
          "format": "int32"
        },
        "releaseNameFormat": {
          "description": "Gets release name format.",
          "type": "string"
        },
        "status": {
          "description": "Gets status.",
          "enum": [
            "undefined",
            "draft",
            "active",
            "abandoned"
          ],
          "x-ms-enum": {
            "name": "ReleaseStatus",
            "values": [
              {
                "value": "undefined",
                "description": "Release status not set."
              },
              {
                "value": "draft",
                "description": "Release is in draft state."
              },
              {
                "value": "active",
                "description": "Release status is in active."
              },
              {
                "value": "abandoned",
                "description": "Release status is in abandoned."
              }
            ]
          }
        },
        "tags": {
          "description": "Gets or sets list of tags.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "triggeringArtifactAlias": {
          "type": "string"
        },
        "variableGroups": {
          "description": "Gets the list of variable groups.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariableGroup"
          }
        },
        "variables": {
          "description": "Gets or sets the dictionary of variables.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ConfigurationVariableValue"
          }
        }
      }
    },
    "ReleaseAbandonedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ReleaseEvent"
        }
      ],
      "properties": {
        "project": {
          "$ref": "#/definitions/ProjectReference"
        },
        "release": {
          "$ref": "#/definitions/Release"
        }
      }
    },
    "ReleaseApproval": {
      "description": "",
      "type": "object",
      "properties": {
        "approvalType": {
          "description": "Gets or sets the type of approval.",
          "enum": [
            "undefined",
            "preDeploy",
            "postDeploy",
            "all"
          ],
          "x-ms-enum": {
            "name": "ApprovalType",
            "values": [
              {
                "value": "undefined",
                "description": "Indicates the approval type does not set."
              },
              {
                "value": "preDeploy",
                "description": "Indicates the approvals which executed before deployment."
              },
              {
                "value": "postDeploy",
                "description": "Indicates the approvals which executed after deployment."
              },
              {
                "value": "all",
                "description": "Indicates all approvals."
              }
            ]
          }
        },
        "approvedBy": {
          "description": "Gets the identity who approved.",
          "$ref": "#/definitions/IdentityRef"
        },
        "approver": {
          "description": "Gets or sets the identity who should approve.",
          "$ref": "#/definitions/IdentityRef"
        },
        "attempt": {
          "description": "Gets or sets attempt which specifies as which deployment attempt it belongs.",
          "type": "integer",
          "format": "int32"
        },
        "comments": {
          "description": "Gets or sets comments for approval.",
          "type": "string"
        },
        "createdOn": {
          "description": "Gets date on which it got created.",
          "type": "string",
          "format": "date-time"
        },
        "history": {
          "description": "Gets history which specifies all approvals associated with this approval.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseApprovalHistory"
          }
        },
        "id": {
          "description": "Gets the unique identifier of this field.",
          "type": "integer",
          "format": "int32"
        },
        "isAutomated": {
          "description": "Gets or sets as approval is automated or not.",
          "type": "boolean"
        },
        "modifiedOn": {
          "description": "Gets date on which it got modified.",
          "type": "string",
          "format": "date-time"
        },
        "rank": {
          "description": "Gets or sets rank which specifies the order of the approval. e.g. Same rank denotes parallel approval.",
          "type": "integer",
          "format": "int32"
        },
        "release": {
          "description": "Gets releaseReference which specifies the reference of the release to which this approval is associated.",
          "$ref": "#/definitions/ReleaseShallowReference"
        },
        "releaseDefinition": {
          "description": "Gets releaseDefinitionReference which specifies the reference of the release definition to which this approval is associated.",
          "$ref": "#/definitions/ReleaseDefinitionShallowReference"
        },
        "releaseEnvironment": {
          "description": "Gets releaseEnvironmentReference which specifies the reference of the release environment to which this approval is associated.",
          "$ref": "#/definitions/ReleaseEnvironmentShallowReference"
        },
        "revision": {
          "description": "Gets the revision number.",
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "description": "Gets or sets the status of the approval.",
          "enum": [
            "undefined",
            "pending",
            "approved",
            "rejected",
            "reassigned",
            "canceled",
            "skipped"
          ],
          "x-ms-enum": {
            "name": "ApprovalStatus",
            "values": [
              {
                "value": "undefined",
                "description": "Indicates the approval does not have the status set."
              },
              {
                "value": "pending",
                "description": "Indicates the approval is pending."
              },
              {
                "value": "approved",
                "description": "Indicates the approval is approved."
              },
              {
                "value": "rejected",
                "description": "Indicates the approval is rejected."
              },
              {
                "value": "reassigned",
                "description": "Indicates the approval is reassigned."
              },
              {
                "value": "canceled",
                "description": "Indicates the approval is canceled."
              },
              {
                "value": "skipped",
                "description": "Indicates the approval is skipped."
              }
            ]
          }
        },
        "url": {
          "description": "Gets url to access the approval.",
          "type": "string"
        }
      }
    },
    "ReleaseApprovalHistory": {
      "description": "",
      "type": "object",
      "properties": {
        "approver": {
          "description": "Identity of the approver.",
          "$ref": "#/definitions/IdentityRef"
        },
        "changedBy": {
          "description": "Identity of the object who changed approval.",
          "$ref": "#/definitions/IdentityRef"
        },
        "comments": {
          "description": "Approval history comments.",
          "type": "string"
        },
        "createdOn": {
          "description": "Time when this approval created.",
          "type": "string",
          "format": "date-time"
        },
        "modifiedOn": {
          "description": "Time when this approval modified.",
          "type": "string",
          "format": "date-time"
        },
        "revision": {
          "description": "Approval history revision.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ReleaseApprovalPendingEvent": {
      "description": "",
      "type": "object",
      "properties": {
        "approval": {
          "$ref": "#/definitions/ReleaseApproval"
        },
        "approvalOptions": {
          "$ref": "#/definitions/ApprovalOptions"
        },
        "completedApprovals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseApproval"
          }
        },
        "definitionName": {
          "type": "string"
        },
        "deployment": {
          "$ref": "#/definitions/Deployment"
        },
        "environmentId": {
          "type": "integer",
          "format": "int32"
        },
        "environmentName": {
          "type": "string"
        },
        "environments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseEnvironment"
          }
        },
        "isMultipleRankApproval": {
          "type": "boolean"
        },
        "pendingApprovals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseApproval"
          }
        },
        "releaseCreator": {
          "type": "string"
        },
        "releaseName": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "webAccessUri": {
          "type": "string"
        }
      }
    },
    "ReleaseArtifact": {
      "description": "",
      "type": "object",
      "properties": {
        "artifactProvider": {
          "description": "Gets or sets the artifact provider of ReleaseArtifact.",
          "$ref": "#/definitions/ArtifactProvider"
        },
        "artifactType": {
          "description": "Gets or sets the artifact type of ReleaseArtifact.",
          "type": "string"
        },
        "definitionData": {
          "description": "Gets or sets the definition json of ReleaseArtifact.",
          "type": "string"
        },
        "definitionId": {
          "description": "Gets or sets the definition id of ReleaseArtifact.",
          "type": "integer",
          "format": "int32"
        },
        "description": {
          "description": "Gets or sets the description of ReleaseArtifact.",
          "type": "string"
        },
        "id": {
          "description": "Gets or sets the id of ReleaseArtifact.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Gets or sets the name of ReleaseArtifact.",
          "type": "string"
        },
        "releaseId": {
          "description": "Gets or sets the release id.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ReleaseCondition": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        }
      ],
      "properties": {
        "result": {
          "description": "The release condition result.",
          "type": "boolean"
        }
      }
    },
    "ReleaseCreatedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ReleaseEvent"
        }
      ],
      "properties": {
        "project": {
          "$ref": "#/definitions/ProjectReference"
        },
        "release": {
          "$ref": "#/definitions/Release"
        }
      }
    },
    "ReleaseDefinition": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ReleaseDefinitionShallowReference"
        }
      ],
      "properties": {
        "artifacts": {
          "description": "Gets or sets the list of artifacts.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Artifact"
          }
        },
        "comment": {
          "description": "Gets or sets comment.",
          "type": "string"
        },
        "createdBy": {
          "description": "Gets or sets the identity who created.",
          "$ref": "#/definitions/IdentityRef"
        },
        "createdOn": {
          "description": "Gets date on which it got created.",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "Gets or sets the description.",
          "type": "string"
        },
        "environments": {
          "description": "Gets or sets the list of environments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseDefinitionEnvironment"
          }
        },
        "isDeleted": {
          "description": "Whether release definition is deleted.",
          "type": "boolean"
        },
        "lastRelease": {
          "description": "Gets the reference of last release.",
          "$ref": "#/definitions/ReleaseReference"
        },
        "modifiedBy": {
          "description": "Gets or sets the identity who modified.",
          "$ref": "#/definitions/IdentityRef"
        },
        "modifiedOn": {
          "description": "Gets date on which it got modified.",
          "type": "string",
          "format": "date-time"
        },
        "properties": {
          "description": "Gets or sets properties.",
          "$ref": "#/definitions/PropertiesCollection"
        },
        "releaseNameFormat": {
          "description": "Gets or sets the release name format.",
          "type": "string"
        },
        "revision": {
          "description": "Gets the revision number.",
          "type": "integer",
          "format": "int32"
        },
        "source": {
          "description": "Gets or sets source of release definition.",
          "enum": [
            "undefined",
            "restApi",
            "userInterface",
            "ibiza",
            "portalExtensionApi"
          ],
          "x-ms-enum": {
            "name": "ReleaseDefinitionSource",
            "values": [
              {
                "value": "undefined",
                "description": "Indicates ReleaseDefinition source not defined."
              },
              {
                "value": "restApi",
                "description": "Indicates ReleaseDefinition created using REST API."
              },
              {
                "value": "userInterface",
                "description": "Indicates ReleaseDefinition created using UI."
              },
              {
                "value": "ibiza",
                "description": "Indicates ReleaseDefinition created from Ibiza."
              },
              {
                "value": "portalExtensionApi",
                "description": "Indicates ReleaseDefinition created from PortalExtension API."
              }
            ]
          }
        },
        "tags": {
          "description": "Gets or sets list of tags.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "triggers": {
          "description": "Gets or sets the list of triggers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseTriggerBase"
          }
        },
        "variableGroups": {
          "description": "Gets or sets the list of variable groups.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "variables": {
          "description": "Gets or sets the dictionary of variables.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ConfigurationVariableValue"
          }
        }
      }
    },
    "ReleaseDefinitionApprovals": {
      "description": "",
      "type": "object",
      "properties": {
        "approvalOptions": {
          "description": "Gets or sets the approval options.",
          "$ref": "#/definitions/ApprovalOptions"
        },
        "approvals": {
          "description": "Gets or sets the approvals.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseDefinitionApprovalStep"
          }
        }
      }
    },
    "ReleaseDefinitionApprovalStep": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ReleaseDefinitionEnvironmentStep"
        }
      ],
      "properties": {
        "approver": {
          "description": "Gets and sets the approver.",
          "$ref": "#/definitions/IdentityRef"
        },
        "isAutomated": {
          "description": "Indicates whether the approval automated.",
          "type": "boolean"
        },
        "isNotificationOn": {
          "description": "Indicates whether the approval notification set.",
          "type": "boolean"
        },
        "rank": {
          "description": "Gets or sets the rank of approval step.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ReleaseDefinitionDeployStep": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ReleaseDefinitionEnvironmentStep"
        }
      ],
      "properties": {
        "tasks": {
          "description": "The list of steps for this definition.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkflowTask"
          }
        }
      }
    },
    "ReleaseDefinitionEnvironment": {
      "description": "",
      "type": "object",
      "properties": {
        "badgeUrl": {
          "description": "Gets or sets the BadgeUrl. BadgeUrl will be used when Badge will be enabled in Release Definition Environment.",
          "type": "string"
        },
        "conditions": {
          "description": "Gets or sets the environment conditions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Condition"
          }
        },
        "currentRelease": {
          "description": "Gets or sets the current release reference.",
          "$ref": "#/definitions/ReleaseShallowReference"
        },
        "demands": {
          "description": "Gets or sets the demands.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Demand"
          }
        },
        "deployPhases": {
          "description": "Gets or sets the deploy phases of environment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeployPhase"
          }
        },
        "deployStep": {
          "description": "Gets or sets the deploystep.",
          "$ref": "#/definitions/ReleaseDefinitionDeployStep"
        },
        "environmentOptions": {
          "description": "Gets or sets the environment options.",
          "$ref": "#/definitions/EnvironmentOptions"
        },
        "environmentTriggers": {
          "description": "Gets or sets the triggers on environment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvironmentTrigger"
          }
        },
        "executionPolicy": {
          "description": "Gets or sets the environment execution policy.",
          "$ref": "#/definitions/EnvironmentExecutionPolicy"
        },
        "id": {
          "description": "Gets and sets the ID of the ReleaseDefinitionEnvironment.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Gets and sets the name of the ReleaseDefinitionEnvironment.",
          "type": "string"
        },
        "owner": {
          "description": "Gets and sets the Owner of the ReleaseDefinitionEnvironment.",
          "$ref": "#/definitions/IdentityRef"
        },
        "postDeployApprovals": {
          "description": "Gets or sets the post deployment approvals.",
          "$ref": "#/definitions/ReleaseDefinitionApprovals"
        },
        "postDeploymentGates": {
          "description": "Gets or sets the post deployment gates.",
          "$ref": "#/definitions/ReleaseDefinitionGatesStep"
        },
        "preDeployApprovals": {
          "description": "Gets or sets the pre deployment approvals.",
          "$ref": "#/definitions/ReleaseDefinitionApprovals"
        },
        "preDeploymentGates": {
          "description": "Gets or sets the pre deployment gates.",
          "$ref": "#/definitions/ReleaseDefinitionGatesStep"
        },
        "processParameters": {
          "description": "Gets or sets the environment process parameters.",
          "$ref": "#/definitions/ProcessParameters"
        },
        "properties": {
          "description": "Gets or sets the properties on environment.",
          "$ref": "#/definitions/PropertiesCollection"
        },
        "queueId": {
          "description": "Gets or sets the queue ID.",
          "type": "integer",
          "format": "int32"
        },
        "rank": {
          "description": "Gets and sets the rank of the ReleaseDefinitionEnvironment.",
          "type": "integer",
          "format": "int32"
        },
        "retentionPolicy": {
          "description": "Gets or sets the environment retention policy.",
          "$ref": "#/definitions/EnvironmentRetentionPolicy"
        },
        "schedules": {
          "description": "Gets or sets the schedules",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseSchedule"
          }
        },
        "variableGroups": {
          "description": "Gets or sets the variable groups.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "variables": {
          "description": "Gets and sets the variables.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ConfigurationVariableValue"
          }
        }
      }
    },
    "ReleaseDefinitionEnvironmentStep": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the approval or deploy step.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ReleaseDefinitionEnvironmentSummary": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of ReleaseDefinition environment summary.",
          "type": "integer",
          "format": "int32"
        },
        "lastReleases": {
          "description": "List of release shallow reference deployed using this ReleaseDefinition.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseShallowReference"
          }
        },
        "name": {
          "description": "Name of ReleaseDefinition environment summary.",
          "type": "string"
        }
      }
    },
    "ReleaseDefinitionEnvironmentTemplate": {
      "description": "",
      "type": "object",
      "properties": {
        "canDelete": {
          "description": "Indicates whether template can be deleted or not.",
          "type": "boolean"
        },
        "category": {
          "description": "Category of the ReleaseDefinition environment template.",
          "type": "string"
        },
        "description": {
          "description": "Description of the ReleaseDefinition environment template.",
          "type": "string"
        },
        "environment": {
          "description": "ReleaseDefinition environment data which used to create this template.",
          "$ref": "#/definitions/ReleaseDefinitionEnvironment"
        },
        "iconTaskId": {
          "description": "ID of the task which used to display icon used for this template.",
          "type": "string",
          "format": "uuid"
        },
        "iconUri": {
          "description": "Icon uri of the template.",
          "type": "string"
        },
        "id": {
          "description": "ID of the ReleaseDefinition environment template.",
          "type": "string",
          "format": "uuid"
        },
        "isDeleted": {
          "description": "Indicates whether template deleted or not.",
          "type": "boolean"
        },
        "name": {
          "description": "Name of the ReleaseDefinition environment template.",
          "type": "string"
        }
      }
    },
    "ReleaseDefinitionGate": {
      "description": "",
      "type": "object",
      "properties": {
        "tasks": {
          "description": "Gets or sets the gates workflow.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkflowTask"
          }
        }
      }
    },
    "ReleaseDefinitionGatesOptions": {
      "description": "",
      "type": "object",
      "properties": {
        "isEnabled": {
          "description": "Gets or sets as the gates enabled or not.",
          "type": "boolean"
        },
        "minimumSuccessDuration": {
          "description": "Gets or sets the minimum duration for steady results after a successful gates evaluation.",
          "type": "integer",
          "format": "int32"
        },
        "samplingInterval": {
          "description": "Gets or sets the time between re-evaluation of gates.",
          "type": "integer",
          "format": "int32"
        },
        "stabilizationTime": {
          "description": "Gets or sets the delay before evaluation.",
          "type": "integer",
          "format": "int32"
        },
        "timeout": {
          "description": "Gets or sets the timeout after which gates fail.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ReleaseDefinitionGatesStep": {
      "description": "",
      "type": "object",
      "properties": {
        "gates": {
          "description": "Gets or sets the gates.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseDefinitionGate"
          }
        },
        "gatesOptions": {
          "description": "Gets or sets the gate options.",
          "$ref": "#/definitions/ReleaseDefinitionGatesOptions"
        },
        "id": {
          "description": "ID of the ReleaseDefinitionGateStep.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ReleaseDefinitionRevision": {
      "description": "",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "Gets api-version for revision object.",
          "type": "string"
        },
        "changedBy": {
          "description": "Gets the identity who did change.",
          "$ref": "#/definitions/IdentityRef"
        },
        "changedDate": {
          "description": "Gets date on which ReleaseDefinition changed.",
          "type": "string",
          "format": "date-time"
        },
        "changeType": {
          "description": "Gets type of change.",
          "enum": [
            "add",
            "update",
            "delete",
            "undelete"
          ],
          "x-ms-enum": {
            "name": "AuditAction",
            "values": [
              {
                "value": "add",
                "description": "Indicates the audit add."
              },
              {
                "value": "update",
                "description": "Indicates the audit update."
              },
              {
                "value": "delete",
                "description": "Indicates the audit delete."
              },
              {
                "value": "undelete",
                "description": "Indicates the audit undelete."
              }
            ]
          }
        },
        "comment": {
          "description": "Gets comments for revision.",
          "type": "string"
        },
        "definitionId": {
          "description": "Get id of the definition.",
          "type": "integer",
          "format": "int32"
        },
        "definitionUrl": {
          "description": "Gets definition URL.",
          "type": "string"
        },
        "revision": {
          "description": "Get revision number of the definition.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ReleaseDefinitionShallowReference": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "description": "Gets the links to related resources, APIs, and views for the release definition.",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "id": {
          "description": "Gets the unique identifier of release definition.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Gets or sets the name of the release definition.",
          "type": "string"
        },
        "path": {
          "description": "Gets or sets the path of the release definition.",
          "type": "string"
        },
        "projectReference": {
          "description": "Gets or sets project reference.",
          "$ref": "#/definitions/ProjectReference"
        },
        "url": {
          "description": "Gets the REST API url to access the release definition.",
          "type": "string"
        }
      }
    },
    "ReleaseDefinitionSummary": {
      "description": "",
      "type": "object",
      "properties": {
        "environments": {
          "description": "List of Release Definition environment summary.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseDefinitionEnvironmentSummary"
          }
        },
        "releaseDefinition": {
          "description": "Release Definition reference.",
          "$ref": "#/definitions/ReleaseDefinitionShallowReference"
        },
        "releases": {
          "description": "List of releases deployed using this Release Definition.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Release"
          }
        }
      }
    },
    "ReleaseDefinitionUndeleteParameter": {
      "description": "",
      "type": "object",
      "properties": {
        "comment": {
          "description": "Gets or sets comment.",
          "type": "string"
        }
      }
    },
    "ReleaseDeployPhase": {
      "description": "",
      "type": "object",
      "properties": {
        "deploymentJobs": {
          "description": "Deployment jobs of the phase.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentJob"
          }
        },
        "errorLog": {
          "description": "Phase execution error logs.",
          "type": "string"
        },
        "manualInterventions": {
          "description": "List of manual intervention tasks execution information in phase.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ManualIntervention"
          }
        },
        "name": {
          "description": "Name of the phase.",
          "type": "string"
        },
        "phaseId": {
          "description": "ID of the phase.",
          "type": "string"
        },
        "phaseType": {
          "description": "Type of the phase.",
          "enum": [
            "undefined",
            "agentBasedDeployment",
            "runOnServer",
            "machineGroupBasedDeployment",
            "deploymentGates"
          ],
          "x-ms-enum": {
            "name": "DeployPhaseTypes",
            "values": [
              {
                "value": "undefined",
                "description": "Phase type not defined. Don't use this."
              },
              {
                "value": "agentBasedDeployment",
                "description": "Phase type which contains tasks executed on agent."
              },
              {
                "value": "runOnServer",
                "description": "Phase type which contains tasks executed by server."
              },
              {
                "value": "machineGroupBasedDeployment",
                "description": "Phase type which contains tasks executed on deployment group machines."
              },
              {
                "value": "deploymentGates",
                "description": "Phase type which contains tasks which acts as Gates for the deployment to go forward."
              }
            ]
          }
        },
        "rank": {
          "description": "Rank of the phase.",
          "type": "integer",
          "format": "int32"
        },
        "runPlanId": {
          "description": "Run Plan ID of the phase.",
          "type": "string",
          "format": "uuid"
        },
        "startedOn": {
          "description": "Phase start time.",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "Status of the phase.",
          "enum": [
            "undefined",
            "notStarted",
            "inProgress",
            "partiallySucceeded",
            "succeeded",
            "failed",
            "canceled",
            "skipped",
            "cancelling"
          ],
          "x-ms-enum": {
            "name": "DeployPhaseStatus",
            "values": [
              {
                "value": "undefined",
                "description": "Phase status not set."
              },
              {
                "value": "notStarted",
                "description": "Phase execution not started."
              },
              {
                "value": "inProgress",
                "description": "Phase execution in progress."
              },
              {
                "value": "partiallySucceeded",
                "description": "Phase execution partially succeeded."
              },
              {
                "value": "succeeded",
                "description": "Phase execution succeeded."
              },
              {
                "value": "failed",
                "description": "Phase execution failed."
              },
              {
                "value": "canceled",
                "description": "Phase execution canceled."
              },
              {
                "value": "skipped",
                "description": "Phase execution skipped."
              },
              {
                "value": "cancelling",
                "description": "Phase is in cancelling state."
              }
            ]
          }
        }
      }
    },
    "ReleaseEnvironment": {
      "description": "",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "Gets list of conditions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseCondition"
          }
        },
        "createdOn": {
          "description": "Gets date on which it got created.",
          "type": "string",
          "format": "date-time"
        },
        "definitionEnvironmentId": {
          "description": "Gets definition environment id.",
          "type": "integer",
          "format": "int32"
        },
        "deployPhasesSnapshot": {
          "description": "Gets list of deploy phases snapshot.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeployPhase"
          }
        },
        "deploySteps": {
          "description": "Gets deploy steps.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentAttempt"
          }
        },
        "environmentOptions": {
          "description": "Gets environment options.",
          "$ref": "#/definitions/EnvironmentOptions"
        },
        "id": {
          "description": "Gets the unique identifier of this field.",
          "type": "integer",
          "format": "int32"
        },
        "modifiedOn": {
          "description": "Gets date on which it got modified.",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "Gets name.",
          "type": "string"
        },
        "nextScheduledUtcTime": {
          "description": "Gets next scheduled UTC time.",
          "type": "string",
          "format": "date-time"
        },
        "owner": {
          "description": "Gets the identity who is owner for release environment.",
          "$ref": "#/definitions/IdentityRef"
        },
        "postApprovalsSnapshot": {
          "description": "Gets list of post deploy approvals snapshot.",
          "$ref": "#/definitions/ReleaseDefinitionApprovals"
        },
        "postDeployApprovals": {
          "description": "Gets list of post deploy approvals.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseApproval"
          }
        },
        "postDeploymentGatesSnapshot": {
          "description": "Post deployment gates snapshot data.",
          "$ref": "#/definitions/ReleaseDefinitionGatesStep"
        },
        "preApprovalsSnapshot": {
          "description": "Gets list of pre deploy approvals snapshot.",
          "$ref": "#/definitions/ReleaseDefinitionApprovals"
        },
        "preDeployApprovals": {
          "description": "Gets list of pre deploy approvals.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseApproval"
          }
        },
        "preDeploymentGatesSnapshot": {
          "description": "Pre deployment gates snapshot data.",
          "$ref": "#/definitions/ReleaseDefinitionGatesStep"
        },
        "processParameters": {
          "description": "Gets process parameters.",
          "$ref": "#/definitions/ProcessParameters"
        },
        "rank": {
          "description": "Gets rank.",
          "type": "integer",
          "format": "int32"
        },
        "release": {
          "description": "Gets release reference which specifies the reference of the release to which this release environment is associated.",
          "$ref": "#/definitions/ReleaseShallowReference"
        },
        "releaseCreatedBy": {
          "description": "Gets the identity who created release.",
          "$ref": "#/definitions/IdentityRef"
        },
        "releaseDefinition": {
          "description": "Gets releaseDefinitionReference which specifies the reference of the release definition to which this release environment is associated.",
          "$ref": "#/definitions/ReleaseDefinitionShallowReference"
        },
        "releaseId": {
          "description": "Gets release id.",
          "type": "integer",
          "format": "int32"
        },
        "scheduledDeploymentTime": {
          "description": "Gets schedule deployment time of release environment.",
          "type": "string",
          "format": "date-time"
        },
        "schedules": {
          "description": "Gets list of schedules.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseSchedule"
          }
        },
        "status": {
          "description": "Gets environment status.",
          "enum": [
            "undefined",
            "notStarted",
            "inProgress",
            "succeeded",
            "canceled",
            "rejected",
            "queued",
            "scheduled",
            "partiallySucceeded"
          ],
          "x-ms-enum": {
            "name": "EnvironmentStatus",
            "values": [
              {
                "value": "undefined",
                "description": "Environment status not set."
              },
              {
                "value": "notStarted",
                "description": "Environment is in not started state."
              },
              {
                "value": "inProgress",
                "description": "Environment is in progress state."
              },
              {
                "value": "succeeded",
                "description": "Environment is in succeeded state."
              },
              {
                "value": "canceled",
                "description": "Environment is in canceled state."
              },
              {
                "value": "rejected",
                "description": "Environment is in rejected state."
              },
              {
                "value": "queued",
                "description": "Environment is in queued state."
              },
              {
                "value": "scheduled",
                "description": "Environment is in scheduled state."
              },
              {
                "value": "partiallySucceeded",
                "description": "Environment is in partially succeeded state."
              }
            ]
          }
        },
        "timeToDeploy": {
          "description": "Gets time to deploy.",
          "type": "number",
          "format": "double"
        },
        "triggerReason": {
          "description": "Gets trigger reason.",
          "type": "string"
        },
        "variableGroups": {
          "description": "Gets the list of variable groups.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariableGroup"
          }
        },
        "variables": {
          "description": "Gets the dictionary of variables.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ConfigurationVariableValue"
          }
        }
      }
    },
    "ReleaseEnvironmentCompletedEvent": {
      "description": "",
      "type": "object",
      "properties": {
        "createdByName": {
          "type": "string"
        },
        "definitionId": {
          "type": "integer",
          "format": "int32"
        },
        "definitionName": {
          "type": "string"
        },
        "environment": {
          "$ref": "#/definitions/ReleaseEnvironment"
        },
        "environmentId": {
          "type": "integer",
          "format": "int32"
        },
        "projectName": {
          "type": "string"
        },
        "reason": {
          "enum": [
            "none",
            "manual",
            "automated",
            "scheduled",
            "redeployTrigger"
          ],
          "x-ms-enum": {
            "name": "DeploymentReason",
            "values": [
              {
                "value": "none",
                "description": "The deployment reason is none."
              },
              {
                "value": "manual",
                "description": "The deployment reason is manual."
              },
              {
                "value": "automated",
                "description": "The deployment reason is automated."
              },
              {
                "value": "scheduled",
                "description": "The deployment reason is scheduled."
              },
              {
                "value": "redeployTrigger",
                "description": "The deployment reason is RedeployTrigger."
              }
            ]
          }
        },
        "releaseCreatedBy": {
          "$ref": "#/definitions/IdentityRef"
        },
        "releaseLogsUri": {
          "type": "string"
        },
        "releaseName": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "webAccessUri": {
          "type": "string"
        }
      }
    },
    "ReleaseEnvironmentShallowReference": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "description": "Gets the links to related resources, APIs, and views for the release environment.",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "id": {
          "description": "Gets the unique identifier of release environment.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Gets or sets the name of the release environment.",
          "type": "string"
        },
        "url": {
          "description": "Gets the REST API url to access the release environment.",
          "type": "string"
        }
      }
    },
    "ReleaseEnvironmentStatusUpdatedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RealtimeReleaseDefinitionEvent"
        }
      ],
      "properties": {
        "environmentId": {
          "type": "integer",
          "format": "int32"
        },
        "environmentStatus": {
          "enum": [
            "undefined",
            "notStarted",
            "inProgress",
            "succeeded",
            "canceled",
            "rejected",
            "queued",
            "scheduled",
            "partiallySucceeded"
          ],
          "x-ms-enum": {
            "name": "EnvironmentStatus",
            "values": [
              {
                "value": "undefined",
                "description": "Environment status not set."
              },
              {
                "value": "notStarted",
                "description": "Environment is in not started state."
              },
              {
                "value": "inProgress",
                "description": "Environment is in progress state."
              },
              {
                "value": "succeeded",
                "description": "Environment is in succeeded state."
              },
              {
                "value": "canceled",
                "description": "Environment is in canceled state."
              },
              {
                "value": "rejected",
                "description": "Environment is in rejected state."
              },
              {
                "value": "queued",
                "description": "Environment is in queued state."
              },
              {
                "value": "scheduled",
                "description": "Environment is in scheduled state."
              },
              {
                "value": "partiallySucceeded",
                "description": "Environment is in partially succeeded state."
              }
            ]
          }
        },
        "latestDeploymentOperationStatus": {
          "enum": [
            "undefined",
            "queued",
            "scheduled",
            "pending",
            "approved",
            "rejected",
            "deferred",
            "queuedForAgent",
            "phaseInProgress",
            "phaseSucceeded",
            "phasePartiallySucceeded",
            "phaseFailed",
            "canceled",
            "phaseCanceled",
            "manualInterventionPending",
            "queuedForPipeline",
            "cancelling",
            "evaluatingGates",
            "gateFailed",
            "all"
          ],
          "x-ms-enum": {
            "name": "DeploymentOperationStatus",
            "values": [
              {
                "value": "undefined",
                "description": "The deployment operation status is undefined."
              },
              {
                "value": "queued",
                "description": "The deployment operation status is queued."
              },
              {
                "value": "scheduled",
                "description": "The deployment operation status is scheduled."
              },
              {
                "value": "pending",
                "description": "The deployment operation status is pending."
              },
              {
                "value": "approved",
                "description": "The deployment operation status is approved."
              },
              {
                "value": "rejected",
                "description": "The deployment operation status is rejected."
              },
              {
                "value": "deferred",
                "description": "The deployment operation status is deferred."
              },
              {
                "value": "queuedForAgent",
                "description": "The deployment operation status is queued for agent."
              },
              {
                "value": "phaseInProgress",
                "description": "The deployment operation status is phase in progress."
              },
              {
                "value": "phaseSucceeded",
                "description": "The deployment operation status is phase succeeded."
              },
              {
                "value": "phasePartiallySucceeded",
                "description": "The deployment operation status is phase partially succeeded."
              },
              {
                "value": "phaseFailed",
                "description": "The deployment operation status is phase failed."
              },
              {
                "value": "canceled",
                "description": "The deployment operation status is canceled."
              },
              {
                "value": "phaseCanceled",
                "description": "The deployment operation status is phase canceled."
              },
              {
                "value": "manualInterventionPending",
                "description": "The deployment operation status is manualintervention pending."
              },
              {
                "value": "queuedForPipeline",
                "description": "The deployment operation status is queued for pipeline."
              },
              {
                "value": "cancelling",
                "description": "The deployment operation status is cancelling."
              },
              {
                "value": "evaluatingGates",
                "description": "The deployment operation status is EvaluatingGates."
              },
              {
                "value": "gateFailed",
                "description": "The deployment operation status is GateFailed."
              },
              {
                "value": "all",
                "description": "The deployment operation status is all."
              }
            ]
          }
        },
        "latestDeploymentStatus": {
          "enum": [
            "undefined",
            "notDeployed",
            "inProgress",
            "succeeded",
            "partiallySucceeded",
            "failed",
            "all"
          ],
          "x-ms-enum": {
            "name": "DeploymentStatus",
            "values": [
              {
                "value": "undefined",
                "description": "The deployment status is undefined."
              },
              {
                "value": "notDeployed",
                "description": "The deployment status is not deployed."
              },
              {
                "value": "inProgress",
                "description": "The deployment status is in progress."
              },
              {
                "value": "succeeded",
                "description": "The deployment status is succeeded."
              },
              {
                "value": "partiallySucceeded",
                "description": "The deployment status is partiallysucceeded."
              },
              {
                "value": "failed",
                "description": "The deployment status is failed."
              },
              {
                "value": "all",
                "description": "The deployment status is all."
              }
            ]
          }
        },
        "releaseId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ReleaseEnvironmentUpdateMetadata": {
      "description": "",
      "type": "object",
      "properties": {
        "comment": {
          "description": "Gets or sets comment.",
          "type": "string"
        },
        "scheduledDeploymentTime": {
          "description": "Gets or sets scheduled deployment time.",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "Gets or sets status of environment.",
          "enum": [
            "undefined",
            "notStarted",
            "inProgress",
            "succeeded",
            "canceled",
            "rejected",
            "queued",
            "scheduled",
            "partiallySucceeded"
          ],
          "x-ms-enum": {
            "name": "EnvironmentStatus",
            "values": [
              {
                "value": "undefined",
                "description": "Environment status not set."
              },
              {
                "value": "notStarted",
                "description": "Environment is in not started state."
              },
              {
                "value": "inProgress",
                "description": "Environment is in progress state."
              },
              {
                "value": "succeeded",
                "description": "Environment is in succeeded state."
              },
              {
                "value": "canceled",
                "description": "Environment is in canceled state."
              },
              {
                "value": "rejected",
                "description": "Environment is in rejected state."
              },
              {
                "value": "queued",
                "description": "Environment is in queued state."
              },
              {
                "value": "scheduled",
                "description": "Environment is in scheduled state."
              },
              {
                "value": "partiallySucceeded",
                "description": "Environment is in partially succeeded state."
              }
            ]
          }
        },
        "variables": {
          "description": "Sets list of environment variables to be overridden at deployment time.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ConfigurationVariableValue"
          }
        }
      }
    },
    "ReleaseEvent": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "ReleaseGates": {
      "description": "",
      "type": "object",
      "properties": {
        "deploymentJobs": {
          "description": "Contains the gates job details of each evaluation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeploymentJob"
          }
        },
        "id": {
          "description": "ID of release gates.",
          "type": "integer",
          "format": "int32"
        },
        "ignoredGates": {
          "description": "List of ignored gates.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IgnoredGate"
          }
        },
        "lastModifiedOn": {
          "description": "Gates last modified time.",
          "type": "string",
          "format": "date-time"
        },
        "runPlanId": {
          "description": "Run plan ID of the gates.",
          "type": "string",
          "format": "uuid"
        },
        "stabilizationCompletedOn": {
          "description": "Gates stabilization completed date and time.",
          "type": "string",
          "format": "date-time"
        },
        "startedOn": {
          "description": "Gates evaluation started time.",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "Status of release gates.",
          "enum": [
            "none",
            "pending",
            "inProgress",
            "succeeded",
            "failed",
            "canceled"
          ],
          "x-ms-enum": {
            "name": "GateStatus",
            "values": [
              {
                "value": "none",
                "description": "The gate does not have the status set."
              },
              {
                "value": "pending",
                "description": "The gate is in pending state."
              },
              {
                "value": "inProgress",
                "description": "The gate is currently in progress."
              },
              {
                "value": "succeeded",
                "description": "The gate completed successfully."
              },
              {
                "value": "failed",
                "description": "The gate execution failed."
              },
              {
                "value": "canceled",
                "description": "The gate execution cancelled."
              }
            ]
          }
        },
        "succeedingSince": {
          "description": "Date and time at which all gates executed successfully.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ReleaseGatesPhase": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ReleaseDeployPhase"
        }
      ],
      "properties": {
        "ignoredGates": {
          "description": "List of ignored gates.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IgnoredGate"
          }
        },
        "stabilizationCompletedOn": {
          "description": "Date and time at which stabilization of gates completed.",
          "type": "string",
          "format": "date-time"
        },
        "succeedingSince": {
          "description": "Date and time at which all gates executed successfully.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ReleaseManagementInputValue": {
      "description": "",
      "type": "object",
      "properties": {
        "displayValue": {
          "description": "The text to show for the display of this value.",
          "type": "string"
        },
        "value": {
          "description": "The value to store for this input.",
          "type": "string"
        }
      }
    },
    "ReleaseNotCreatedEvent": {
      "description": "",
      "type": "object",
      "properties": {
        "definitionReference": {
          "$ref": "#/definitions/ReleaseDefinitionShallowReference"
        },
        "message": {
          "type": "string"
        },
        "releaseReason": {
          "enum": [
            "none",
            "manual",
            "continuousIntegration",
            "schedule",
            "pullRequest"
          ],
          "x-ms-enum": {
            "name": "ReleaseReason",
            "values": [
              {
                "value": "none",
                "description": "Indicates the release triggered reason not set."
              },
              {
                "value": "manual",
                "description": "Indicates the release triggered manually."
              },
              {
                "value": "continuousIntegration",
                "description": "Indicates the release triggered by continuous integration."
              },
              {
                "value": "schedule",
                "description": "Indicates the release triggered by schedule."
              },
              {
                "value": "pullRequest",
                "description": "Indicates the release triggered by PullRequest."
              }
            ]
          }
        },
        "requestedBy": {
          "$ref": "#/definitions/IdentityRef"
        }
      }
    },
    "ReleaseReference": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "description": "Gets links to access the release.",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "artifacts": {
          "description": "Gets list of artifacts.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Artifact"
          }
        },
        "createdBy": {
          "description": "Gets the identity who created release.",
          "$ref": "#/definitions/IdentityRef"
        },
        "createdOn": {
          "description": "Gets date on when this release created.",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "Gets description.",
          "type": "string"
        },
        "id": {
          "description": "ID of the Release.",
          "type": "integer",
          "format": "int32"
        },
        "modifiedBy": {
          "description": "Gets the identity who modified release.",
          "$ref": "#/definitions/IdentityRef"
        },
        "name": {
          "description": "Gets name of release.",
          "type": "string"
        },
        "reason": {
          "description": "Gets reason for release.",
          "enum": [
            "none",
            "manual",
            "continuousIntegration",
            "schedule",
            "pullRequest"
          ],
          "x-ms-enum": {
            "name": "ReleaseReason",
            "values": [
              {
                "value": "none",
                "description": "Indicates the release triggered reason not set."
              },
              {
                "value": "manual",
                "description": "Indicates the release triggered manually."
              },
              {
                "value": "continuousIntegration",
                "description": "Indicates the release triggered by continuous integration."
              },
              {
                "value": "schedule",
                "description": "Indicates the release triggered by schedule."
              },
              {
                "value": "pullRequest",
                "description": "Indicates the release triggered by PullRequest."
              }
            ]
          }
        },
        "releaseDefinition": {
          "description": "Gets release definition shallow reference.",
          "$ref": "#/definitions/ReleaseDefinitionShallowReference"
        }
      }
    },
    "ReleaseRevision": {
      "description": "",
      "type": "object",
      "properties": {
        "changedBy": {
          "description": "Gets or sets the identity who changed.",
          "$ref": "#/definitions/IdentityRef"
        },
        "changedDate": {
          "description": "Change date of the revision.",
          "type": "string",
          "format": "date-time"
        },
        "changeDetails": {
          "description": "Change details of the revision.",
          "type": "string"
        },
        "changeType": {
          "description": "Change details of the revision. Typically ChangeDetails values are Add and Update.",
          "type": "string"
        },
        "comment": {
          "description": "Comment of the revision.",
          "type": "string"
        },
        "definitionSnapshotRevision": {
          "description": "Release ID of which this revision belongs.",
          "type": "integer",
          "format": "int32"
        },
        "releaseId": {
          "description": "Gets or sets the release ID of which this revision belongs.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ReleaseSchedule": {
      "description": "",
      "type": "object",
      "properties": {
        "daysToRelease": {
          "description": "Days of the week to release.",
          "enum": [
            "none",
            "monday",
            "tuesday",
            "wednesday",
            "thursday",
            "friday",
            "saturday",
            "sunday",
            "all"
          ],
          "x-ms-enum": {
            "name": "ScheduleDays",
            "values": [
              {
                "value": "none",
                "description": "Scheduled day not set."
              },
              {
                "value": "monday",
                "description": "Scheduled on Monday."
              },
              {
                "value": "tuesday",
                "description": "Scheduled on Tuesday."
              },
              {
                "value": "wednesday",
                "description": "Scheduled on Wednesday."
              },
              {
                "value": "thursday",
                "description": "Scheduled on Thursday."
              },
              {
                "value": "friday",
                "description": "Scheduled on Friday."
              },
              {
                "value": "saturday",
                "description": "Scheduled on Saturday."
              },
              {
                "value": "sunday",
                "description": "Scheduled on Sunday."
              },
              {
                "value": "all",
                "description": "Scheduled on all the days in week."
              }
            ]
          }
        },
        "jobId": {
          "description": "Team Foundation Job Definition Job Id.",
          "type": "string",
          "format": "uuid"
        },
        "scheduleOnlyWithChanges": {
          "description": "Flag to determine if this schedule should only release if the associated artifact has been changed or release definition changed.",
          "type": "boolean"
        },
        "startHours": {
          "description": "Local time zone hour to start.",
          "type": "integer",
          "format": "int32"
        },
        "startMinutes": {
          "description": "Local time zone minute to start.",
          "type": "integer",
          "format": "int32"
        },
        "timeZoneId": {
          "description": "Time zone Id of release schedule, such as 'UTC'.",
          "type": "string"
        }
      }
    },
    "ReleaseSettings": {
      "description": "",
      "type": "object",
      "properties": {
        "complianceSettings": {
          "description": "Release Compliance settings.",
          "$ref": "#/definitions/ComplianceSettings"
        },
        "retentionSettings": {
          "description": "Release retention settings.",
          "$ref": "#/definitions/RetentionSettings"
        }
      }
    },
    "ReleaseShallowReference": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "description": "Gets the links to related resources, APIs, and views for the release.",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "id": {
          "description": "Gets the unique identifier of release.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Gets or sets the name of the release.",
          "type": "string"
        },
        "url": {
          "description": "Gets the REST API url to access the release.",
          "type": "string"
        }
      }
    },
    "ReleaseStartEnvironmentMetadata": {
      "description": "",
      "type": "object",
      "properties": {
        "definitionEnvironmentId": {
          "description": "Sets release definition environment id.",
          "type": "integer",
          "format": "int32"
        },
        "variables": {
          "description": "Sets list of environments variables to be overridden at deployment time.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ConfigurationVariableValue"
          }
        }
      }
    },
    "ReleaseStartMetadata": {
      "description": "",
      "type": "object",
      "properties": {
        "artifacts": {
          "description": "Sets list of artifact to create a release.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArtifactMetadata"
          }
        },
        "definitionId": {
          "description": "Sets definition Id to create a release.",
          "type": "integer",
          "format": "int32"
        },
        "description": {
          "description": "Sets description to create a release.",
          "type": "string"
        },
        "environmentsMetadata": {
          "description": "Sets list of environments meta data.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseStartEnvironmentMetadata"
          }
        },
        "isDraft": {
          "description": "Sets 'true' to create release in draft mode, 'false' otherwise.",
          "type": "boolean"
        },
        "manualEnvironments": {
          "description": "Sets list of environments to manual as condition.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "properties": {
          "$ref": "#/definitions/PropertiesCollection"
        },
        "reason": {
          "description": "Sets reason to create a release.",
          "enum": [
            "none",
            "manual",
            "continuousIntegration",
            "schedule",
            "pullRequest"
          ],
          "x-ms-enum": {
            "name": "ReleaseReason",
            "values": [
              {
                "value": "none",
                "description": "Indicates the release triggered reason not set."
              },
              {
                "value": "manual",
                "description": "Indicates the release triggered manually."
              },
              {
                "value": "continuousIntegration",
                "description": "Indicates the release triggered by continuous integration."
              },
              {
                "value": "schedule",
                "description": "Indicates the release triggered by schedule."
              },
              {
                "value": "pullRequest",
                "description": "Indicates the release triggered by PullRequest."
              }
            ]
          }
        },
        "variables": {
          "description": "Sets list of release variables to be overridden at deployment time.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ConfigurationVariableValue"
          }
        }
      }
    },
    "ReleaseTask": {
      "description": "",
      "type": "object",
      "properties": {
        "agentName": {
          "description": "Agent name on which task executed.",
          "type": "string"
        },
        "finishTime": {
          "description": "Finish time of the release task.",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "ID of the release task.",
          "type": "integer",
          "format": "int32"
        },
        "issues": {
          "description": "List of issues occurred while execution of task.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Issue"
          }
        },
        "lineCount": {
          "description": "Number of lines log release task has.",
          "type": "integer",
          "format": "int64"
        },
        "logUrl": {
          "description": "Log URL of the task.",
          "type": "string"
        },
        "name": {
          "description": "Name of the task.",
          "type": "string"
        },
        "percentComplete": {
          "description": "Task execution complete precent.",
          "type": "integer",
          "format": "int32"
        },
        "rank": {
          "description": "Rank of the release task.",
          "type": "integer",
          "format": "int32"
        },
        "resultCode": {
          "description": "Result code of the task.",
          "type": "string"
        },
        "startTime": {
          "description": "ID of the release task.",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "Status of release task.",
          "enum": [
            "unknown",
            "pending",
            "inProgress",
            "success",
            "failure",
            "canceled",
            "skipped",
            "succeeded",
            "failed",
            "partiallySucceeded"
          ],
          "x-ms-enum": {
            "name": "TaskStatus",
            "values": [
              {
                "value": "unknown",
                "description": "The task does not have the status set."
              },
              {
                "value": "pending",
                "description": "The task is in pending status."
              },
              {
                "value": "inProgress",
                "description": "The task is currently in progress."
              },
              {
                "value": "success",
                "description": "The task completed successfully."
              },
              {
                "value": "failure",
                "description": "The task execution failed."
              },
              {
                "value": "canceled",
                "description": "The task execution canceled."
              },
              {
                "value": "skipped",
                "description": "The task execution skipped."
              },
              {
                "value": "succeeded",
                "description": "The task completed successfully."
              },
              {
                "value": "failed",
                "description": "The task execution failed."
              },
              {
                "value": "partiallySucceeded",
                "description": "The task execution partially succeeded."
              }
            ]
          }
        },
        "task": {
          "description": "Workflow task reference.",
          "$ref": "#/definitions/WorkflowTaskReference"
        },
        "timelineRecordId": {
          "description": "Timeline record ID of the release task.",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "ReleaseTaskAttachment": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "description": "Reference links of task.",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "createdOn": {
          "description": "Data and time when it created.",
          "type": "string",
          "format": "date-time"
        },
        "modifiedBy": {
          "description": "Identity who modified.",
          "$ref": "#/definitions/IdentityRef"
        },
        "modifiedOn": {
          "description": "Data and time when modified.",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "Name of the task attachment.",
          "type": "string"
        },
        "recordId": {
          "description": "Record ID of the task.",
          "type": "string",
          "format": "uuid"
        },
        "timelineId": {
          "description": "Timeline ID of the task.",
          "type": "string",
          "format": "uuid"
        },
        "type": {
          "description": "Type of task attachment.",
          "type": "string"
        }
      }
    },
    "ReleaseTaskLogUpdatedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RealtimeReleaseEvent"
        }
      ],
      "properties": {
        "lines": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "stepRecordId": {
          "type": "string",
          "format": "uuid"
        },
        "timelineRecordId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "ReleaseTasksUpdatedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RealtimeReleaseEvent"
        }
      ],
      "properties": {
        "job": {
          "$ref": "#/definitions/ReleaseTask"
        },
        "planId": {
          "type": "string",
          "format": "uuid"
        },
        "releaseStepId": {
          "type": "integer",
          "format": "int32"
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReleaseTask"
          }
        }
      }
    },
    "ReleaseTriggerBase": {
      "description": "",
      "type": "object",
      "properties": {
        "triggerType": {
          "description": "Type of release trigger.",
          "enum": [
            "undefined",
            "artifactSource",
            "schedule",
            "sourceRepo",
            "containerImage",
            "package",
            "pullRequest"
          ],
          "x-ms-enum": {
            "name": "ReleaseTriggerType",
            "values": [
              {
                "value": "undefined",
                "description": "Release trigger type not set."
              },
              {
                "value": "artifactSource",
                "description": "Artifact based release trigger."
              },
              {
                "value": "schedule",
                "description": "Schedule based release trigger."
              },
              {
                "value": "sourceRepo",
                "description": "Source repository based release trigger."
              },
              {
                "value": "containerImage",
                "description": "Container image based release trigger."
              },
              {
                "value": "package",
                "description": "Package based release trigger."
              },
              {
                "value": "pullRequest",
                "description": "Pull request based release trigger."
              }
            ]
          }
        }
      }
    },
    "ReleaseUpdatedEvent": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RealtimeReleaseEvent"
        }
      ],
      "properties": {
        "release": {
          "$ref": "#/definitions/Release"
        }
      }
    },
    "ReleaseUpdateMetadata": {
      "description": "",
      "type": "object",
      "properties": {
        "comment": {
          "description": "Sets comment for release.",
          "type": "string"
        },
        "keepForever": {
          "description": "Set 'true' to exclude the release from retention policies.",
          "type": "boolean"
        },
        "manualEnvironments": {
          "description": "Sets list of manual environments.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "Sets name of the release.",
          "type": "string"
        },
        "status": {
          "description": "Sets status of the release.",
          "enum": [
            "undefined",
            "draft",
            "active",
            "abandoned"
          ],
          "x-ms-enum": {
            "name": "ReleaseStatus",
            "values": [
              {
                "value": "undefined",
                "description": "Release status not set."
              },
              {
                "value": "draft",
                "description": "Release is in draft state."
              },
              {
                "value": "active",
                "description": "Release status is in active."
              },
              {
                "value": "abandoned",
                "description": "Release status is in abandoned."
              }
            ]
          }
        }
      }
    },
    "ReleaseWorkItemRef": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "description": "Gets or sets the ID.",
          "type": "string"
        },
        "provider": {
          "description": "Gets or sets the provider.",
          "type": "string"
        },
        "state": {
          "description": "Gets or sets the state.",
          "type": "string"
        },
        "title": {
          "description": "Gets or sets the title.",
          "type": "string"
        },
        "type": {
          "description": "Gets or sets the type.",
          "type": "string"
        },
        "url": {
          "description": "Gets or sets the workitem url.",
          "type": "string"
        }
      }
    },
    "ResourceReference": {
      "description": "Represents a reference to a resource.",
      "type": "object",
      "properties": {
        "alias": {
          "description": "An alias to be used when referencing the resource.",
          "type": "string"
        }
      }
    },
    "RetentionPolicy": {
      "description": "",
      "type": "object",
      "properties": {
        "daysToKeep": {
          "description": "Indicates the number of days to keep deployment.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "RetentionSettings": {
      "description": "",
      "type": "object",
      "properties": {
        "daysToKeepDeletedReleases": {
          "description": "Number of days to keep deleted releases.",
          "type": "integer",
          "format": "int32"
        },
        "defaultEnvironmentRetentionPolicy": {
          "description": "Specifies the default environment retention policy.",
          "$ref": "#/definitions/EnvironmentRetentionPolicy"
        },
        "maximumEnvironmentRetentionPolicy": {
          "description": "Specifies the maximum environment retention policy.",
          "$ref": "#/definitions/EnvironmentRetentionPolicy"
        }
      }
    },
    "RunOnServerDeployPhase": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DeployPhase"
        }
      ],
      "properties": {
        "deploymentInput": {
          "description": "Gets and sets the agentless job input.",
          "$ref": "#/definitions/ServerDeploymentInput"
        }
      }
    },
    "ScheduledReleaseTrigger": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ReleaseTriggerBase"
        }
      ],
      "properties": {
        "schedule": {
          "description": "Release schedule for Scheduled Release trigger type.",
          "$ref": "#/definitions/ReleaseSchedule"
        }
      }
    },
    "ServerDeploymentInput": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/BaseDeploymentInput"
        }
      ],
      "properties": {
        "parallelExecution": {
          "description": "Gets or sets the parallel execution input.",
          "$ref": "#/definitions/ExecutionInput"
        }
      }
    },
    "ServiceEndpointReference": {
      "description": "Represents a reference to a service endpoint.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ResourceReference"
        }
      ],
      "properties": {
        "id": {
          "description": "The ID of the service endpoint.",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "SourceIdInput": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of source.",
          "type": "string"
        },
        "name": {
          "description": "Name of the source.",
          "type": "string"
        }
      }
    },
    "SourcePullRequestVersion": {
      "description": "",
      "type": "object",
      "properties": {
        "iterationId": {
          "description": "Pull Request Iteration Id for which the release will publish status.",
          "type": "string"
        },
        "pullRequestId": {
          "description": "Pull Request Id for which the release will publish status.",
          "type": "string"
        },
        "pullRequestMergedAt": {
          "description": "Date and time of the pull request merge creation. It is required to keep timeline record of Releases created by pull request.",
          "type": "string",
          "format": "date-time"
        },
        "sourceBranch": {
          "description": "Source branch of the Pull Request.",
          "type": "string"
        },
        "sourceBranchCommitId": {
          "description": "Source branch commit Id of the Pull Request for which the release will publish status.",
          "type": "string"
        },
        "targetBranch": {
          "description": "Target branch of the Pull Request.",
          "type": "string"
        }
      }
    },
    "SourceRepoTrigger": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ReleaseTriggerBase"
        }
      ],
      "properties": {
        "alias": {
          "description": "Alias of the source repo trigger.",
          "type": "string"
        },
        "branchFilters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SummaryMailSection": {
      "description": "",
      "type": "object",
      "properties": {
        "htmlContent": {
          "description": "Html content of summary mail.",
          "type": "string"
        },
        "rank": {
          "description": "Rank of the summary mail.",
          "type": "integer",
          "format": "int32"
        },
        "sectionType": {
          "description": "Summary mail section type. MailSectionType has section types.",
          "enum": [
            "details",
            "environments",
            "issues",
            "testResults",
            "workItems",
            "releaseInfo"
          ],
          "x-ms-enum": {
            "name": "MailSectionType",
            "values": [
              {
                "value": "details",
                "description": ""
              },
              {
                "value": "environments",
                "description": ""
              },
              {
                "value": "issues",
                "description": ""
              },
              {
                "value": "testResults",
                "description": ""
              },
              {
                "value": "workItems",
                "description": ""
              },
              {
                "value": "releaseInfo",
                "description": ""
              }
            ]
          }
        },
        "title": {
          "description": "Title of the summary mail.",
          "type": "string"
        }
      }
    },
    "TagFilter": {
      "description": "",
      "type": "object",
      "properties": {
        "pattern": {
          "description": "Gets or sets the tag filter pattern.",
          "type": "string"
        }
      }
    },
    "TaskInputDefinitionBase": {
      "description": "",
      "type": "object",
      "properties": {
        "aliases": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultValue": {
          "type": "string"
        },
        "groupName": {
          "type": "string"
        },
        "helpMarkDown": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "options": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "required": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        },
        "validation": {
          "$ref": "#/definitions/TaskInputValidation"
        },
        "visibleRule": {
          "type": "string"
        }
      }
    },
    "TaskInputValidation": {
      "description": "",
      "type": "object",
      "properties": {
        "expression": {
          "description": "Conditional expression",
          "type": "string"
        },
        "message": {
          "description": "Message explaining how user can correct if validation fails",
          "type": "string"
        }
      }
    },
    "TaskOrchestrationPlanGroupReference": {
      "description": "",
      "type": "object",
      "properties": {
        "planGroup": {
          "description": "Gets or sets the plan group.",
          "type": "string"
        },
        "projectId": {
          "description": "ID of the Project.",
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "TaskOrchestrationPlanGroupsStartedEvent": {
      "description": "",
      "type": "object",
      "properties": {
        "planGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskOrchestrationPlanGroupReference"
          }
        }
      }
    },
    "TaskSourceDefinitionBase": {
      "description": "",
      "type": "object",
      "properties": {
        "authKey": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "keySelector": {
          "type": "string"
        },
        "selector": {
          "type": "string"
        },
        "target": {
          "type": "string"
        }
      }
    },
    "TfvcArtifactDownloadInput": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactDownloadInputBase"
        }
      ],
      "properties": {}
    },
    "TimeZone": {
      "description": "",
      "type": "object",
      "properties": {
        "displayName": {
          "description": "Display name of the time zone.",
          "type": "string"
        },
        "id": {
          "description": "Id of the time zone.",
          "type": "string"
        }
      }
    },
    "TimeZoneList": {
      "description": "",
      "type": "object",
      "properties": {
        "utcTimeZone": {
          "description": "UTC timezone.",
          "$ref": "#/definitions/TimeZone"
        },
        "validTimeZones": {
          "description": "List of valid timezones.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeZone"
          }
        }
      }
    },
    "VariableGroup": {
      "description": "",
      "type": "object",
      "properties": {
        "createdBy": {
          "description": "Gets or sets the identity who created.",
          "$ref": "#/definitions/IdentityRef"
        },
        "createdOn": {
          "description": "Gets date on which it got created.",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "Gets or sets description.",
          "type": "string"
        },
        "id": {
          "description": "Gets the unique identifier of this field.",
          "type": "integer",
          "format": "int32"
        },
        "isShared": {
          "description": "Denotes if a variable group is shared with other project or not.",
          "type": "boolean"
        },
        "modifiedBy": {
          "description": "Gets or sets the identity who modified.",
          "$ref": "#/definitions/IdentityRef"
        },
        "modifiedOn": {
          "description": "Gets date on which it got modified.",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "Gets or sets name.",
          "type": "string"
        },
        "providerData": {
          "description": "Gets or sets provider data.",
          "$ref": "#/definitions/VariableGroupProviderData"
        },
        "type": {
          "description": "Gets or sets type.",
          "type": "string"
        },
        "variableGroupProjectReferences": {
          "description": "all project references where the variable group is shared with other projects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariableGroupProjectReference"
          }
        },
        "variables": {
          "description": "Gets and sets the dictionary of variables.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/VariableValue"
          }
        }
      }
    },
    "VariableGroupProjectReference": {
      "description": "A variable group reference is a shallow reference to variable group.",
      "type": "object",
      "properties": {
        "description": {
          "description": "Gets or sets description of the variable group.",
          "type": "string"
        },
        "name": {
          "description": "Gets or sets name of the variable group.",
          "type": "string"
        },
        "projectReference": {
          "description": "Gets or sets project reference of the variable group.",
          "$ref": "#/definitions/ProjectReference"
        }
      }
    },
    "VariableGroupProviderData": {
      "description": "",
      "type": "object",
      "properties": {}
    },
    "VariableValue": {
      "description": "",
      "type": "object",
      "properties": {
        "isReadOnly": {
          "description": "Gets or sets if the variable is read only or not.",
          "type": "boolean"
        },
        "isSecret": {
          "description": "Gets or sets as the variable is secret or not.",
          "type": "boolean"
        },
        "value": {
          "description": "Gets or sets the value.",
          "type": "string"
        }
      }
    },
    "VssJsonCollectionWrapper": {
      "description": "This class is used to serialize collections as a single JSON object on the wire.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/VssJsonCollectionWrapperBase"
        }
      ],
      "properties": {
        "value": {
          "description": "The serialized item.",
          "type": "string",
          "format": "T"
        }
      }
    },
    "VssJsonCollectionWrapperBase": {
      "description": "",
      "type": "object",
      "properties": {
        "count": {
          "description": "The number of serialized items.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "WorkflowTask": {
      "description": "",
      "type": "object",
      "properties": {
        "alwaysRun": {
          "description": "Gets or sets as the task always run or not.",
          "type": "boolean"
        },
        "condition": {
          "description": "Gets or sets the task condition.",
          "type": "string"
        },
        "continueOnError": {
          "description": "Gets or sets as the task continue run on error or not.",
          "type": "boolean"
        },
        "definitionType": {
          "description": "Gets or sets the task definition type. Example:- 'Agent', DeploymentGroup', 'Server' or 'ServerGate'.",
          "type": "string"
        },
        "enabled": {
          "description": "Gets or sets as the task enabled or not.",
          "type": "boolean"
        },
        "environment": {
          "description": "Gets or sets the task environment variables.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "inputs": {
          "description": "Gets or sets the task inputs.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Gets or sets the name of the task.",
          "type": "string"
        },
        "overrideInputs": {
          "description": "Gets or sets the task override inputs.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "refName": {
          "description": "Gets or sets the reference name of the task.",
          "type": "string"
        },
        "retryCountOnTaskFailure": {
          "description": "Gets or sets the task retryCount.",
          "type": "integer",
          "format": "int32"
        },
        "taskId": {
          "description": "Gets or sets the ID of the task.",
          "type": "string",
          "format": "uuid"
        },
        "timeoutInMinutes": {
          "description": "Gets or sets the task timeout.",
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "description": "Gets or sets the version of the task.",
          "type": "string"
        }
      }
    },
    "WorkflowTaskReference": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "description": "Task identifier.",
          "type": "string",
          "format": "uuid"
        },
        "name": {
          "description": "Name of the task.",
          "type": "string"
        },
        "version": {
          "description": "Version of the task.",
          "type": "string"
        }
      }
    },
    "YamlFileSource": {
      "description": "",
      "type": "object",
      "properties": {
        "sourceReference": {
          "description": "Gets or sets definition reference. e.g. {\"project\":{\"id\":\"fed755ea-49c5-4399-acea-fd5b5aa90a6c\",\"name\":\"myProject\"},\"definition\":{\"id\":\"1\",\"name\":\"mybuildDefinition\"},\"connection\":{\"id\":\"1\",\"name\":\"myConnection\"}}",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/YamlSourceReference"
          }
        },
        "type": {
          "enum": [
            "none",
            "tfsGit"
          ],
          "x-ms-enum": {
            "name": "YamlFileSourceTypes",
            "values": [
              {
                "value": "none",
                "description": ""
              },
              {
                "value": "tfsGit",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "YamlPipelineProcess": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/PipelineProcess"
        }
      ],
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "filename": {
          "type": "string"
        },
        "fileSource": {
          "$ref": "#/definitions/YamlFileSource"
        },
        "resources": {
          "$ref": "#/definitions/YamlPipelineProcessResources"
        }
      }
    },
    "YamlPipelineProcessResources": {
      "description": "",
      "type": "object",
      "properties": {
        "endpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceEndpointReference"
          }
        },
        "queues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgentPoolQueueReference"
          }
        }
      }
    },
    "YamlSourceReference": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "api-Version": {
      "name": "api-version",
      "in": "query",
      "description": "Version of the API to use.  This should be set to '7.1' to use this version of the api.",
      "required": true,
      "type": "string"
    }
  },
  "securityDefinitions": {
    "accessToken": {
      "type": "basic",
      "description": "Personal access token. Use any value for the user name and the token as the password."
    },
    "oauth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://app.vssps.visualstudio.com/oauth2/authorize&response_type=Assertion",
      "tokenUrl": "https://app.vssps.visualstudio.com/oauth2/token?client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer&grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer",
      "scopes": {
        "vso.release": "Grants the ability to read release artifacts, including folders, releases, release definitions and release environment.",
        "vso.release_execute": "Grants the ability to read and update release artifacts, including folders, releases, release definitions and release environment, and the ability to queue a new release.",
        "vso.release_manage": "Grants the ability to read, update and delete release artifacts, including folders, releases, release definitions and release environment and the ability to queue and approve a new release."
      }
    }
  },
  "security": [
    {
      "accessToken": []
    }
  ],
  "externalDocs": {
    "description": "Azure DevOps REST APIs",
    "url": "https://aka.ms/azure-devops-rest-apis"
  }
}